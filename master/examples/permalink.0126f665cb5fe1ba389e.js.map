{"version":3,"sources":["webpack:///./examples/permalink.js","webpack:///./node_modules/openlayers/src/ol/source/OSM.js","webpack:///./src/format/FeatureHash.js","webpack:///./src/format/FeatureHashStyleType.js","webpack:///./node_modules/openlayers/src/ol/source/XYZ.js"],"names":["__webpack_require__","exports","module","angular","_index2","default","name","_module2","_debounce2","_module4","mapComponent","controller","bindings","map","template","component","MapComponentController","ngeoLocation","ngeoDebounce","this","ngeoLocation_","ngeoDebounce_","prototype","$onInit","_this","view","getView","zoom","getParam","undefined","x","y","center","setCenter","setZoom","updateParams","z","Math","round","on","e","getCenter","params","getZoom","drawComponent","layer","DrawComponentController","$scope","scope_","featureSeq_","interaction","_this2","vectorSource","getSource","_Draw2","type","source","setActive","addInteraction","_decorate2","feature","set","fhFormat","_FeatureHash2","setStyle","_Style2","stroke","_Stroke2","color","width","features","getFeatures","encodedFeatures","writeFeatures","$applyAsync","readFeatures","length","addFeatures","clearLayer","clear","deleteParam","MainController","_Map2","layers","_Tile2","_OSM2","_Vector4","vectorLayer","_Vector2","setMap","__WEBPACK_IMPORTED_MODULE_1__source_XYZ_js__","OSM","opt_options","options","attributions","ATTRIBUTION","crossOrigin","url","call","cacheSize","opaque","maxZoom","reprojectionErrorThreshold","tileLoadFunction","wrapX","Object","__WEBPACK_IMPORTED_MODULE_0__index_js__","__webpack_exports__","olBase","olColor","olArray","_TextFeature2","accuracy_","accuracy","ACCURACY_","encodeStyles_","encodeStyles","propertiesFunction_","properties","defaultPropertiesFunction_","setStyle_","prevX_","prevY_","LegacyProperties_","propertiesType","inherits","StyleTypes_","LineString","_FeatureHashStyleType2","LINE_STRING","Point","POINT","Polygon","POLYGON","MultiLineString","MultiPoint","MultiPolygon","readFeature","readGeometry","writeFeature","writeGeometry","CHAR64_","getProperties","encodeSignedNumber_","num","signedNum","encodeNumber_","encodedNumber","charAt","styles","geometryType","encodedStyles","styleType","_asserts2","assert","i","style","fillStyle","getFill","imageStyle","getImage","strokeStyle","getStroke","textStyle","getText","encodeStylePolygon_","encodeStyleLine_","encodeStylePoint_","encodeStyleText_","encodeStyleStroke_","radius","getRadius","push","encodeURIComponent","encodeStyleFill_","opt_propertyName","propertyName","fillColor","getColor","Array","isArray","fillColorRgba","asArray","fillColorHex","_utils2","rgbArrayToHex","strokeColor","strokeColorRgba","strokeColorHex","strokeWidth","getWidth","fontStyle","getFont","font","split","readLineStringGeometry_","text","substring","flatCoordinates","decodeCoordinates_","lineString","_LineString2","setFlatCoordinates","_GeometryLayout2","XY","readMultiLineStringGeometry_","ends","lineStrings","ii","multiLineString","_MultiLineString2","readPointGeometry_","point","_Point2","readMultiPointGeometry_","multiPoint","_MultiPoint2","readPolygonGeometry_","rings","end","polygon","_Polygon2","readMultiPolygonGeometry_","endss","polygons","j","jj","multipolygon","_MultiPolygon2","setStyleInFeature_","getStyleProperties_","fontSize","fontColor","pointRadius","_Fill2","_Circle2","fill","_Text2","image","setStyleProperties_","geometry","getGeometry","_FeatureProperties2","IS_TEXT","parseFloat","indexOf","clone","key","value","setProperties","castValue_","numProperties","ANGLE","OPACITY","SIZE","STROKE","boolProperties","IS_CIRCLE","IS_RECTANGLE","SHOW_MEASURE","SHOW_LABEL","includes","parts","keyVal","decodeURIComponent","val","writeLineStringGeometry_","assertInstanceof","getFlatCoordinates","stride","getStride","encodeCoordinates_","writeMultiLineStringGeometry_","getEnds","lineStringCount","offset","textArray","join","writePointGeometry_","writeMultiPointGeometry_","encodeRings_","linearRingCount","writePolygonGeometry_","writeMultiPolygonGeometry_","getEndss","polygonCount","GEOMETRY_READERS_","P","L","A","l","p","a","GEOMETRY_WRITERS_","opt_flatCoordinates","len","index","b","shift","result","dx","dy","encodedCoordinates","floor","readFeatureFromText","splitIndex","geometryText","readGeometryFromText","_Feature2","attributesAndStylesText","attributesText","stylesText","readFeaturesFromText","geometryReader","writeFeatureText","encodedParts","encodedGeometry","writeGeometryText","encodedProperties","propFunction","getGeometryName","encoded","replace","toString","apply","styleFunction","getStyleFunction","getType","writeFeaturesText","geometryWriter","transformedGeometry","_Feature4","transformWithOptions","__WEBPACK_IMPORTED_MODULE_2__tilegrid_js__","XYZ","projection","tileGrid","createXYZ","extent","extentFromProjection","minZoom","tileSize","__WEBPACK_IMPORTED_MODULE_1__source_TileImage_js__","tilePixelRatio","tileUrlFunction","urls","transition"],"mappings":"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","file":"permalink.0126f665cb5fe1ba389e.js","sourcesContent":["/**\n * @module app.permalink\n */\nconst exports = {};\n\nimport './permalink.css';\nimport './common_dependencies.js';\nimport ngeoBase from 'ngeo/index.js';\n\nimport ngeoFormatFeatureHash from 'ngeo/format/FeatureHash.js';\nimport ngeoMapModule from 'ngeo/map/module.js';\nimport ngeoMiscDebounce from 'ngeo/misc/debounce.js';\nimport ngeoMiscDecorate from 'ngeo/misc/decorate.js';\nimport ngeoStatemanagerModule from 'ngeo/statemanager/module.js';\nimport olMap from 'ol/Map.js';\nimport olGeomGeometryType from 'ol/geom/GeometryType.js';\nimport olInteractionDraw from 'ol/interaction/Draw.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport olLayerVector from 'ol/layer/Vector.js';\nimport olSourceOSM from 'ol/source/OSM.js';\nimport olSourceVector from 'ol/source/Vector.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('app', [\n  ngeoBase.module.name,\n  ngeoMapModule.name,\n  ngeoMiscDebounce.name,\n  ngeoStatemanagerModule.name,\n]);\n\n/**\n * An application-specific map component that updates the URL in the browser\n * address bar when the map view changes. It also sets the initial view based\n * on the URL query params at init time.\n *\n * This component gets a reference to the map instance through the \"app-map\"\n * attribute.\n *\n * @type {!angular.Component}\n */\nexports.mapComponent = {\n  controller: 'AppMapController as ctrl',\n  bindings: {\n    'map': '=appMap'\n  },\n  template: '<div ngeo-map=ctrl.map></div>'\n};\n\n\nexports.module.component('appMap', exports.mapComponent);\n\n\n/**\n * @param {ngeo.statemanager.Location} ngeoLocation ngeo Location service.\n * @param {ngeox.miscDebounce} ngeoDebounce ngeo Debounce factory.\n * @constructor\n * @ngInject\n */\nexports.MapComponentController = function(ngeoLocation, ngeoDebounce) {\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map;\n\n  /**\n   * @type {ngeo.statemanager.Location}\n   * @private\n   */\n  this.ngeoLocation_ = ngeoLocation;\n\n  /**\n   * @type {ngeox.miscDebounce}\n   * @private\n   */\n  this.ngeoDebounce_ = ngeoDebounce;\n};\n\nexports.module.controller('AppMapController', exports.MapComponentController);\n\nexports.MapComponentController.prototype.$onInit = function() {\n  const view = this.map.getView();\n\n  let zoom = this.ngeoLocation_.getParam('z');\n  zoom = zoom !== undefined ? +zoom : 4;\n\n  const x = this.ngeoLocation_.getParam('x');\n  const y = this.ngeoLocation_.getParam('y');\n  const center = (x !== undefined) && (y !== undefined) ?\n    [+x, +y] : [0, 0];\n\n  view.setCenter(center);\n  view.setZoom(zoom);\n\n  this.ngeoLocation_.updateParams({\n    'z': zoom,\n    'x': Math.round(center[0]),\n    'y': Math.round(center[1])\n  });\n\n  view.on('propertychange',\n    this.ngeoDebounce_(\n      /**\n       * @param {ol.Object.Event} e Object event.\n       */\n      (e) => {\n        const center = view.getCenter();\n        const params = {\n          'z': view.getZoom(),\n          'x': Math.round(center[0]),\n          'y': Math.round(center[1])\n        };\n        this.ngeoLocation_.updateParams(params);\n      }, 300, /* invokeApply */ true));\n};\n\n/**\n * A draw component that adds a simple draw tool.\n *\n * @type {!angular.Component}\n */\nexports.drawComponent = {\n  controller: 'AppDrawController as ctrl',\n  bindings: {\n    'map': '=appDrawMap',\n    'layer': '=appDrawLayer'\n  },\n  template:\n      '<label>Enable drawing:' +\n      '<input type=\"checkbox\" ng-model=\"ctrl.interaction.active\" />' +\n      '</label><br>' +\n      '<button ng-click=\"ctrl.clearLayer()\">Clear layer</button>'\n};\n\n\nexports.module.component('appDraw', exports.drawComponent);\n\n\n/**\n * @param {!angular.Scope} $scope Scope.\n * @param {!ngeo.statemanager.Location} ngeoLocation ngeo Location service.\n * @constructor\n * @export\n * @ngInject\n */\nexports.DrawComponentController = function($scope, ngeoLocation) {\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map;\n\n  /**\n   * @type {ol.layer.Vector}\n   */\n  this.layer;\n\n  /**\n   * @type {!ngeo.statemanager.Location}\n   * @private\n   */\n  this.ngeoLocation_ = ngeoLocation;\n\n  /**\n   * @type {!angular.Scope}\n   * @private\n   */\n  this.scope_ = $scope;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.featureSeq_ = 0;\n\n  /**\n   * @type {ol.interaction.Draw}\n   * @export\n   */\n  this.interaction;\n};\n\nexports.DrawComponentController.prototype.$onInit = function() {\n  const vectorSource = this.layer.getSource();\n\n  this.interaction = new olInteractionDraw({\n    type: /** @type {ol.geom.GeometryType} */ ('LineString'),\n    source: vectorSource\n  });\n\n  this.interaction.setActive(false);\n  this.map.addInteraction(this.interaction);\n  ngeoMiscDecorate.interaction(this.interaction);\n\n  this.interaction.on('drawend', function(e) {\n    e.feature.set('id', ++this.featureSeq_);\n  }, this);\n\n  // Deal with the encoding and decoding of features in the URL.\n\n  const fhFormat = new ngeoFormatFeatureHash();\n\n  vectorSource.on('addfeature', (e) => {\n    const feature = e.feature;\n    feature.setStyle(new olStyleStyle({\n      stroke: new olStyleStroke({\n        color: [255, 0, 0, 1],\n        width: 2\n      })\n    }));\n    const features = vectorSource.getFeatures();\n    const encodedFeatures = fhFormat.writeFeatures(features);\n    this.scope_.$applyAsync(() => {\n      this.ngeoLocation_.updateParams({'features': encodedFeatures});\n    });\n  });\n\n  const encodedFeatures = this.ngeoLocation_.getParam('features');\n  if (encodedFeatures !== undefined) {\n    const features = fhFormat.readFeatures(encodedFeatures);\n    this.featureSeq_ = features.length;\n    vectorSource.addFeatures(features);\n  }\n};\n\n\n/**\n * Clear the vector layer.\n * @export\n */\nexports.DrawComponentController.prototype.clearLayer = function() {\n  this.layer.getSource().clear(true);\n  this.featureSeq_ = 0;\n  this.ngeoLocation_.deleteParam('features');\n};\n\nexports.module.controller('AppDrawController', exports.DrawComponentController);\n\n\n/**\n * @constructor\n */\nexports.MainController = function() {\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map = new olMap({\n    layers: [\n      new olLayerTile({\n        source: new olSourceOSM()\n      })\n    ]\n  });\n\n\n  const vectorSource = new olSourceVector();\n\n  /**\n   * @type {ol.layer.Vector}\n   * @export\n   */\n  this.vectorLayer = new olLayerVector({\n    source: vectorSource\n  });\n\n  // Use vectorLayer.setMap(map) rather than map.addLayer(vectorLayer). This\n  // makes the vector layer \"unmanaged\", meaning that it is always on top.\n  this.vectorLayer.setMap(this.map);\n\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/permalink.js","/**\n * @module ol/source/OSM\n */\nimport {inherits} from '../index.js';\nimport XYZ from '../source/XYZ.js';\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n *\n * @constructor\n * @extends {ol.source.XYZ}\n * @param {olx.source.OSMOptions=} opt_options Open Street Map options.\n * @api\n */\nconst OSM = function(opt_options) {\n\n  const options = opt_options || {};\n\n  let attributions;\n  if (options.attributions !== undefined) {\n    attributions = options.attributions;\n  } else {\n    attributions = [OSM.ATTRIBUTION];\n  }\n\n  const crossOrigin = options.crossOrigin !== undefined ?\n    options.crossOrigin : 'anonymous';\n\n  const url = options.url !== undefined ?\n    options.url : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n  XYZ.call(this, {\n    attributions: attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: crossOrigin,\n    opaque: options.opaque !== undefined ? options.opaque : true,\n    maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileLoadFunction: options.tileLoadFunction,\n    url: url,\n    wrapX: options.wrapX\n  });\n\n};\n\ninherits(OSM, XYZ);\n\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nOSM.ATTRIBUTION = '&copy; ' +\n      '<a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> ' +\n      'contributors.';\nexport default OSM;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/OSM.js\n// module id = 5\n// module chunks = 0 1 2 3 4 5 7 8 9 10 11 12 13 14 16 17 18 19 21 22 23 24 25 26 27","/**\n * @module ngeo.format.FeatureHash\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoFormatFeatureProperties from 'ngeo/format/FeatureProperties.js';\nimport ngeoFormatFeatureHashStyleType from 'ngeo/format/FeatureHashStyleType.js';\nimport ngeoUtils from 'ngeo/utils.js';\nimport * as olBase from 'ol/index.js';\nimport olFeature from 'ol/Feature.js';\nimport * as olColor from 'ol/color.js';\nimport * as olArray from 'ol/array.js';\nimport olFormatFeature from 'ol/format/Feature.js';\nimport olFormatTextFeature from 'ol/format/TextFeature.js';\nimport olGeomGeometryLayout from 'ol/geom/GeometryLayout.js';\nimport olGeomGeometryType from 'ol/geom/GeometryType.js';\nimport olGeomLineString from 'ol/geom/LineString.js';\nimport olGeomMultiLineString from 'ol/geom/MultiLineString.js';\nimport olGeomMultiPoint from 'ol/geom/MultiPoint.js';\nimport olGeomMultiPolygon from 'ol/geom/MultiPolygon.js';\nimport olGeomPoint from 'ol/geom/Point.js';\nimport olGeomPolygon from 'ol/geom/Polygon.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\nimport olStyleText from 'ol/style/Text.js';\n\n/**\n * @classdesc\n * Provide an OpenLayers format for encoding and decoding features for use\n * in permalinks.\n *\n * The code is based on Stéphane Brunner's URLCompressed format.\n *\n * TODOs:\n *\n * - The OpenLayers-URLCompressed format has options where the user\n *   can define attribute and style transformers. This is currently\n *   not supported by this format.\n * - The OpenLayers-URLCompressed format has a \"simplify\" option.\n *   This format does not have it.\n * - ol.style.Icon styles are not supported.\n * - Transformation of coordinates during encoding and decoding is\n *   not supported.\n *\n * @see https://github.com/sbrunner/OpenLayers-URLCompressed\n * @constructor\n * @struct\n * @extends {ol.format.TextFeature}\n * @param {ngeox.format.FeatureHashOptions=} opt_options Options.\n */\nconst exports = function(opt_options) {\n\n  olFormatTextFeature.call(this);\n\n  const options = opt_options !== undefined ? opt_options : {};\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.accuracy_ = options.accuracy !== undefined ?\n    options.accuracy : exports.ACCURACY_;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.encodeStyles_ = options.encodeStyles !== undefined ?\n    options.encodeStyles : true;\n\n  /**\n   * @type {function(ol.Feature):Object.<string, (string|number)>}\n   * @private\n   */\n  this.propertiesFunction_ = options.properties !== undefined ?\n    options.properties : exports.defaultPropertiesFunction_;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.setStyle_ = options.setStyle !== undefined ? options.setStyle : true;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.prevX_ = 0;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.prevY_ = 0;\n\n  /**\n   * @type {Object.<string, string>}\n   * @private\n   */\n  exports.LegacyProperties_ = (options.propertiesType !== undefined) &&  options.propertiesType;\n\n};\n\nolBase.inherits(exports, olFormatTextFeature);\n\n\n/**\n * @type {Object.<ol.geom.GeometryType, ngeo.format.FeatureHashStyleType>}\n * @private\n */\nexports.StyleTypes_ = {\n  'LineString': ngeoFormatFeatureHashStyleType.LINE_STRING,\n  'Point': ngeoFormatFeatureHashStyleType.POINT,\n  'Polygon': ngeoFormatFeatureHashStyleType.POLYGON,\n  'MultiLineString': ngeoFormatFeatureHashStyleType.LINE_STRING,\n  'MultiPoint': ngeoFormatFeatureHashStyleType.POINT,\n  'MultiPolygon': ngeoFormatFeatureHashStyleType.POLYGON\n};\n\n/**\n * @type {Object.<string, string>}\n * @private\n */\nexports.LegacyProperties_ = {};\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.readFeature;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.readGeometry;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.writeFeature;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.writeFeatures;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.writeGeometry;\n\n\n/**\n * Characters used to encode the coordinates. The characters \"~\", \"'\", \"(\"\n * and \")\" are not part of this character set, and used as separators (for\n * example to separate the coordinates from the feature properties).\n * @const\n * @private\n */\nexports.CHAR64_ =\n    '.-_!*ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghjkmnpqrstuvwxyz';\n\n\n/**\n * @const\n * @private\n */\nexports.ACCURACY_ = 0.1;\n\n\n/**\n * Get features's properties.\n * @param {ol.Feature} feature Feature.\n * @return {Object.<string, (string|number)>} The feature properties to\n * serialize.\n * @private\n */\nexports.defaultPropertiesFunction_ = function(feature) {\n  return feature.getProperties();\n};\n\n\n/**\n * Sign then encode a number.\n * @param {number} num Number.\n * @return {string} String.\n * @private\n */\nexports.encodeSignedNumber_ = function(num) {\n  let signedNum = num << 1;\n  if (num < 0) {\n    signedNum = ~(signedNum);\n  }\n  return exports.encodeNumber_(signedNum);\n};\n\n\n/**\n * Transform a number into a logical sequence of characters.\n * @param {number} num Number.\n * @return {string} String.\n * @private\n */\nexports.encodeNumber_ = function(num) {\n  let encodedNumber = '';\n  while (num >= 0x20) {\n    encodedNumber += exports.CHAR64_.charAt(\n      0x20 | (num & 0x1f));\n    num >>= 5;\n  }\n  encodedNumber += exports.CHAR64_.charAt(num);\n  return encodedNumber;\n};\n\n\n/**\n * For a type of geometry, transforms an array of {@link ol.style.Style} into\n * a logical sequence of characters and put the result into the given encoded\n * styles's array.\n * @param {Array.<ol.style.Style>} styles Styles.\n * @param {ol.geom.GeometryType} geometryType Geometry type.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStyles_ = function(styles, geometryType, encodedStyles) {\n  const styleType = exports.StyleTypes_[geometryType];\n  googAsserts.assert(styleType !== undefined);\n  for (let i = 0; i < styles.length; ++i) {\n    const style = styles[i];\n    const fillStyle = style.getFill();\n    const imageStyle = style.getImage();\n    const strokeStyle = style.getStroke();\n    const textStyle = style.getText();\n    if (styleType == ngeoFormatFeatureHashStyleType.POLYGON) {\n      if (fillStyle !== null) {\n        exports.encodeStylePolygon_(\n          fillStyle, strokeStyle, encodedStyles);\n      }\n    } else if (styleType == ngeoFormatFeatureHashStyleType.LINE_STRING) {\n      if (strokeStyle !== null) {\n        exports.encodeStyleLine_(strokeStyle, encodedStyles);\n      }\n    } else if (styleType == ngeoFormatFeatureHashStyleType.POINT) {\n      if (imageStyle !== null) {\n        exports.encodeStylePoint_(imageStyle, encodedStyles);\n      }\n    }\n    if (textStyle !== null) {\n      exports.encodeStyleText_(textStyle, encodedStyles);\n    }\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Stroke} into a logical sequence of\n * characters and put the result into the given encoded styles's array.\n * @param {ol.style.Stroke} strokeStyle Stroke style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStyleLine_ = function(strokeStyle, encodedStyles) {\n  exports.encodeStyleStroke_(strokeStyle, encodedStyles);\n};\n\n\n/**\n * Transform an {@link ol.style.Circle} into a logical sequence of\n * characters and put the result into the given encoded styles's array.\n * @param {ol.style.Image} imageStyle Image style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStylePoint_ = function(imageStyle, encodedStyles) {\n  if (imageStyle instanceof olStyleCircle) {\n    const radius = imageStyle.getRadius();\n    if (encodedStyles.length > 0) {\n      encodedStyles.push('\\'');\n    }\n    encodedStyles.push(encodeURIComponent(`pointRadius*${radius}`));\n    const fillStyle = imageStyle.getFill();\n    if (fillStyle !== null) {\n      exports.encodeStyleFill_(fillStyle, encodedStyles);\n    }\n    const strokeStyle = imageStyle.getStroke();\n    if (strokeStyle !== null) {\n      exports.encodeStyleStroke_(strokeStyle, encodedStyles);\n    }\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Fill} and an {@link ol.style.Stroke} into\n * a logical sequence of characters and put the result into the given\n * encoded styles's array.\n * @param {ol.style.Fill} fillStyle Fill style.\n * @param {ol.style.Stroke} strokeStyle Stroke style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStylePolygon_ = function(fillStyle, strokeStyle, encodedStyles) {\n  exports.encodeStyleFill_(fillStyle, encodedStyles);\n  if (strokeStyle !== null) {\n    exports.encodeStyleStroke_(strokeStyle, encodedStyles);\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Fill} and optionally its properties into\n * a logical sequence of characters and put the result into the given encoded\n * styles's array.\n * @param {ol.style.Fill} fillStyle Fill style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @param {string=} opt_propertyName Property name.\n * @private\n */\nexports.encodeStyleFill_ = function(fillStyle, encodedStyles, opt_propertyName) {\n  const propertyName = opt_propertyName !== undefined ?\n    opt_propertyName : 'fillColor';\n  const fillColor = fillStyle.getColor();\n  if (fillColor !== null) {\n    googAsserts.assert(Array.isArray(fillColor), 'only supporting fill colors');\n    const fillColorRgba = olColor.asArray(fillColor);\n    googAsserts.assert(Array.isArray(fillColorRgba), 'fill color must be an array');\n    const fillColorHex = ngeoUtils.rgbArrayToHex(fillColorRgba);\n    if (encodedStyles.length > 0) {\n      encodedStyles.push('\\'');\n    }\n    encodedStyles.push(\n      encodeURIComponent(`${propertyName}*${fillColorHex}`));\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Stroke} into a logical sequence of\n * characters and put the result into the given encoded styles's array.\n * @param {ol.style.Stroke} strokeStyle Stroke style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStyleStroke_ = function(strokeStyle, encodedStyles) {\n  const strokeColor = strokeStyle.getColor();\n  if (strokeColor !== null) {\n    googAsserts.assert(Array.isArray(strokeColor));\n    const strokeColorRgba = olColor.asArray(strokeColor);\n    googAsserts.assert(Array.isArray(strokeColorRgba), 'only supporting stroke colors');\n    const strokeColorHex = ngeoUtils.rgbArrayToHex(strokeColorRgba);\n    if (encodedStyles.length > 0) {\n      encodedStyles.push('\\'');\n    }\n    encodedStyles.push(encodeURIComponent(`strokeColor*${strokeColorHex}`));\n  }\n  const strokeWidth = strokeStyle.getWidth();\n  if (strokeWidth !== undefined) {\n    if (encodedStyles.length > 0) {\n      encodedStyles.push('\\'');\n    }\n    encodedStyles.push(encodeURIComponent(`strokeWidth*${strokeWidth}`));\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Text} into a logical sequence of characters and\n * put the result into the given encoded styles's array.\n * @param {ol.style.Text} textStyle Text style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStyleText_ = function(textStyle, encodedStyles) {\n  const fontStyle = textStyle.getFont();\n  if (fontStyle !== undefined) {\n    const font = fontStyle.split(' ');\n    if (font.length >= 3) {\n      if (encodedStyles.length > 0) {\n        encodedStyles.push('\\'');\n      }\n      encodedStyles.push(encodeURIComponent(`fontSize*${font[1]}`));\n    }\n  }\n  const fillStyle = textStyle.getFill();\n  if (fillStyle !== null) {\n    exports.encodeStyleFill_(\n      fillStyle, encodedStyles, 'fontColor');\n  }\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.LineString}.\n * @param {string} text Text.\n * @return {ol.geom.LineString} Line string.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readLineStringGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'l(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  const flatCoordinates = this.decodeCoordinates_(text);\n  const lineString = new olGeomLineString(null);\n  lineString.setFlatCoordinates(olGeomGeometryLayout.XY, flatCoordinates);\n  return lineString;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.MultiLineString}.\n * @param {string} text Text.\n * @return {ol.geom.MultiLineString} Line string.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readMultiLineStringGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'L(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  let flatCoordinates = [];\n  const ends = [];\n  const lineStrings = text.split('\\'');\n  for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n    flatCoordinates = this.decodeCoordinates_(lineStrings[i], flatCoordinates);\n    ends[i] = flatCoordinates.length;\n  }\n  const multiLineString = new olGeomMultiLineString(null);\n  multiLineString.setFlatCoordinates(\n    olGeomGeometryLayout.XY, flatCoordinates, ends);\n  return multiLineString;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.Point}.\n * @param {string} text Text.\n * @return {ol.geom.Point} Point.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readPointGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'p(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  const flatCoordinates = this.decodeCoordinates_(text);\n  googAsserts.assert(flatCoordinates.length === 2);\n  const point = new olGeomPoint(null);\n  point.setFlatCoordinates(olGeomGeometryLayout.XY, flatCoordinates);\n  return point;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.MultiPoint}.\n * @param {string} text Text.\n * @return {ol.geom.MultiPoint} MultiPoint.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readMultiPointGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'P(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  const flatCoordinates = this.decodeCoordinates_(text);\n  const multiPoint = new olGeomMultiPoint(null);\n  multiPoint.setFlatCoordinates(olGeomGeometryLayout.XY, flatCoordinates);\n  return multiPoint;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.Polygon}.\n * @param {string} text Text.\n * @return {ol.geom.Polygon} Polygon.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readPolygonGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'a(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  let flatCoordinates = [];\n  const ends = [];\n  const rings = text.split('\\'');\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    flatCoordinates = this.decodeCoordinates_(rings[i], flatCoordinates);\n    let end = flatCoordinates.length;\n    if (i === 0) {\n      flatCoordinates[end++] = flatCoordinates[0];\n      flatCoordinates[end++] = flatCoordinates[1];\n    } else {\n      flatCoordinates[end++] = flatCoordinates[ends[i - 1]];\n      flatCoordinates[end++] = flatCoordinates[ends[i - 1] + 1];\n    }\n    ends[i] = end;\n  }\n  const polygon = new olGeomPolygon(null);\n  polygon.setFlatCoordinates(olGeomGeometryLayout.XY, flatCoordinates, ends);\n  return polygon;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.MultiPolygon}.\n * @param {string} text Text.\n * @return {ol.geom.MultiPolygon} MultiPolygon.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readMultiPolygonGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'A(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  let flatCoordinates = [];\n  const endss = [];\n  const polygons = text.split(')(');\n  for (let i = 0, ii = polygons.length; i < ii; ++i) {\n    const rings = polygons[i].split('\\'');\n    const ends = endss[i] = [];\n    for (let j = 0, jj = rings.length; j < jj; ++j) {\n      flatCoordinates = this.decodeCoordinates_(rings[j], flatCoordinates);\n      let end = flatCoordinates.length;\n      if (j === 0) {\n        flatCoordinates[end++] = flatCoordinates[0];\n        flatCoordinates[end++] = flatCoordinates[1];\n      } else {\n        flatCoordinates[end++] = flatCoordinates[ends[j - 1]];\n        flatCoordinates[end++] = flatCoordinates[ends[j - 1] + 1];\n      }\n      ends[j] = end;\n    }\n  }\n  const multipolygon = new olGeomMultiPolygon(null);\n  multipolygon.setFlatCoordinates(\n    olGeomGeometryLayout.XY, flatCoordinates, endss);\n  return multipolygon;\n};\n\n\n/**\n * DEPRECATED - Use the `ngeo.misc.FeatureHelper` instead in combination with the\n * `setStyle: false` option.\n *\n * Read a logical sequence of characters and apply the decoded style on the\n * given feature.\n * @param {string} text Text.\n * @param {ol.Feature} feature Feature.\n * @private\n */\nexports.setStyleInFeature_ = function(text, feature) {\n  if (text == '') {\n    return;\n  }\n  const properties = exports.getStyleProperties_(text, feature);\n  const fillColor = properties['fillColor'];\n  const fontSize = properties['fontSize'];\n  const fontColor = properties['fontColor'];\n  const pointRadius = properties['pointRadius'];\n  const strokeColor = properties['strokeColor'];\n  const strokeWidth = properties['strokeWidth'];\n\n  let fillStyle = null;\n  if (fillColor !== undefined) {\n    fillStyle = new olStyleFill({\n      color: /** @type {Array<number>|string} */ (fillColor)\n    });\n  }\n  let strokeStyle = null;\n  if (strokeColor !== undefined && strokeWidth !== undefined) {\n    strokeStyle = new olStyleStroke({\n      color: /** @type {Array<number>|string} */ (strokeColor),\n      width: /** @type {number} */ (strokeWidth)\n    });\n  }\n  let imageStyle = null;\n  if (pointRadius !== undefined) {\n    imageStyle = new olStyleCircle({\n      radius: /** @type {number} */ (pointRadius),\n      fill: fillStyle,\n      stroke: strokeStyle\n    });\n    fillStyle = strokeStyle = null;\n  }\n  let textStyle = null;\n  if (fontSize !== undefined && fontColor !== undefined) {\n    textStyle = new olStyleText({\n      font: `${fontSize} sans-serif`,\n      fill: new olStyleFill({\n        color: /** @type {Array<number>|string} */ (fontColor)\n      })\n    });\n  }\n  const style = new olStyleStyle({\n    fill: fillStyle,\n    image: imageStyle,\n    stroke: strokeStyle,\n    text: textStyle\n  });\n  feature.setStyle(style);\n};\n\n\n/**\n * Read a logical sequence of characters and apply the decoded result as\n * style properties for the feature. Legacy keys are converted to the new ones\n * for compatibility.\n * @param {string} text Text.\n * @param {ol.Feature} feature Feature.\n * @private\n */\nexports.setStyleProperties_ = function(text, feature) {\n\n  const properties = exports.getStyleProperties_(text, feature);\n  const geometry = feature.getGeometry();\n\n  // Deal with legacy properties\n  if (geometry instanceof olGeomPoint) {\n    if (properties['isLabel'] ||\n        properties[ngeoFormatFeatureProperties.IS_TEXT]) {\n      delete properties['strokeColor'];\n      delete properties['fillColor'];\n    } else {\n      delete properties['fontColor'];\n      delete properties['fontSize'];\n    }\n  } else {\n    delete properties['fontColor'];\n\n    if (geometry instanceof olGeomLineString) {\n      delete properties['fillColor'];\n      delete properties['fillOpacity'];\n    }\n  }\n\n  // Convert font size from px to pt\n  if (properties['fontSize']) {\n    let fontSize = parseFloat(properties['fontSize']);\n    if (properties['fontSize'].indexOf('px') !== -1) {\n      fontSize = Math.round(fontSize / 1.333333);\n    }\n    properties['fontSize'] = fontSize;\n  }\n\n  // Convert legacy properties\n  const clone = {};\n  for (const key in properties) {\n    const value = properties[key];\n    if (exports.LegacyProperties_[key]) {\n      clone[exports.LegacyProperties_[key]] = value;\n    } else {\n      clone[key] = value;\n    }\n  }\n\n  feature.setProperties(clone);\n};\n\n\n/**\n * Cast values in the correct type depending on the property.\n * @param {string} key Key.\n * @param {string} value Value.\n * @return {number|boolean|string} The casted value corresponding to the key.\n * @private\n */\nexports.castValue_ = function(key, value) {\n  const numProperties = [\n    ngeoFormatFeatureProperties.ANGLE,\n    ngeoFormatFeatureProperties.OPACITY,\n    ngeoFormatFeatureProperties.SIZE,\n    ngeoFormatFeatureProperties.STROKE,\n    'pointRadius',\n    'strokeWidth'\n  ];\n  const boolProperties = [\n    ngeoFormatFeatureProperties.IS_CIRCLE,\n    ngeoFormatFeatureProperties.IS_RECTANGLE,\n    ngeoFormatFeatureProperties.IS_TEXT,\n    ngeoFormatFeatureProperties.SHOW_MEASURE,\n    ngeoFormatFeatureProperties.SHOW_LABEL,\n    'isCircle',\n    'isRectangle',\n    'isLabel',\n    'showMeasure',\n    'showLabel'\n  ];\n\n  if (olArray.includes(numProperties, key)) {\n    return +value;\n  } else if (olArray.includes(boolProperties, key)) {\n    return (value === 'true') ? true : false;\n  } else {\n    return value;\n  }\n};\n\n\n/**\n * From a logical sequence of characters, create and return an object of\n * style properties for a feature. The values are cast in the correct type\n * depending on the property. Some properties are also deleted when they don't\n * match the geometry of the feature.\n * @param {string} text Text.\n * @param {ol.Feature} feature Feature.\n * @return {Object.<string, boolean|number|string>} The style properties for\n *     the feature.\n * @private\n */\nexports.getStyleProperties_ = function(text, feature) {\n  const parts = text.split('\\'');\n  const properties = {};\n\n  for (let i = 0; i < parts.length; ++i) {\n    const part = decodeURIComponent(parts[i]);\n    const keyVal = part.split('*');\n    googAsserts.assert(keyVal.length === 2);\n    const key = keyVal[0];\n    const val = keyVal[1];\n\n    properties[key] = exports.castValue_(key, val);\n  }\n\n  return properties;\n};\n\n\n/**\n * Encode a {@link ol.geom.LineString} geometry into a logical sequence of\n * characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writeLineStringGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomLineString);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const end = flatCoordinates.length;\n  return `l(${this.encodeCoordinates_(flatCoordinates, stride, 0, end)})`;\n};\n\n\n/**\n * Encode a {@link ol.geom.MultiLineString} geometry into a logical sequence\n * of characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writeMultiLineStringGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomMultiLineString);\n  const ends = geometry.getEnds();\n  const lineStringCount = ends.length;\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  let offset = 0;\n  const textArray = ['L('];\n  for (let i = 0; i < lineStringCount; ++i) {\n    const end = ends[i];\n    const text = this.encodeCoordinates_(flatCoordinates, stride, offset, end);\n    if (i !== 0) {\n      textArray.push('\\'');\n    }\n    textArray.push(text);\n    offset = end;\n  }\n  textArray.push(')');\n  return textArray.join('');\n};\n\n\n/**\n * Encode a {@link ol.geom.Point} geometry into a logical sequence of\n * characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writePointGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomPoint);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const end = flatCoordinates.length;\n  return `p(${this.encodeCoordinates_(flatCoordinates, stride, 0, end)})`;\n};\n\n\n/**\n * Encode an {@link ol.geom.MultiPoint} geometry into a logical sequence\n * of characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writeMultiPointGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomMultiPoint);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const end = flatCoordinates.length;\n  return `P(${this.encodeCoordinates_(flatCoordinates, stride, 0, end)})`;\n};\n\n\n/**\n * Helper to encode an {@link ol.geom.Polygon} geometry.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} stride Stride.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {Array.<string>} textArray Text array.\n * @return {number} The new offset.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.encodeRings_ = function(flatCoordinates, stride, offset, ends, textArray) {\n  const linearRingCount = ends.length;\n  for (let i = 0; i < linearRingCount; ++i) {\n    // skip the \"closing\" point\n    const end = ends[i] - stride;\n    const text = this.encodeCoordinates_(flatCoordinates, stride, offset, end);\n    if (i !== 0) {\n      textArray.push('\\'');\n    }\n    textArray.push(text);\n    offset = ends[i];\n  }\n  return offset;\n};\n\n\n/**\n * Encode an {@link ol.geom.Polygon} geometry into a logical sequence\n * of characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writePolygonGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomPolygon);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const ends = geometry.getEnds();\n  const offset = 0;\n  const textArray = ['a('];\n  exports.encodeRings_.call(this,\n    flatCoordinates, stride, offset, ends, textArray);\n  textArray.push(')');\n  return textArray.join('');\n};\n\n\n/**\n * Encode an {@link ol.geom.MultiPoligon} geometry into a logical sequence of\n * characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writeMultiPolygonGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomMultiPolygon);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const endss = geometry.getEndss();\n  const polygonCount = endss.length;\n  let offset = 0;\n  const textArray = ['A'];\n  for (let i = 0; i < polygonCount; ++i) {\n    const ends = endss[i];\n    textArray.push('(');\n    offset = exports.encodeRings_.call(this,\n      flatCoordinates, stride, offset, ends, textArray);\n    textArray.push(')');\n  }\n  return textArray.join('');\n};\n\n\n/**\n * @const\n * @private\n * @type {Object.<string, function(string):ol.geom.Geometry>}\n */\nexports.GEOMETRY_READERS_ = {\n  'P': exports.readMultiPointGeometry_,\n  'L': exports.readMultiLineStringGeometry_,\n  'A': exports.readMultiPolygonGeometry_,\n  'l': exports.readLineStringGeometry_,\n  'p': exports.readPointGeometry_,\n  'a': exports.readPolygonGeometry_\n};\n\n\n/**\n * @const\n * @private\n * @type {Object.<string, function(ol.geom.Geometry):string>}\n */\nexports.GEOMETRY_WRITERS_ = {\n  'MultiLineString': exports.writeMultiLineStringGeometry_,\n  'MultiPoint': exports.writeMultiPointGeometry_,\n  'MultiPolygon': exports.writeMultiPolygonGeometry_,\n  'LineString': exports.writeLineStringGeometry_,\n  'Point': exports.writePointGeometry_,\n  'Polygon': exports.writePolygonGeometry_\n};\n\n\n/**\n * Read a logical sequence of characters and return (or complet then return)\n * an array of numbers. The coordinates are assumed to be in\n * two dimensions and in latitude, longitude order.\n * corresponding to a geometry's coordinates.\n * @param {string} text Text.\n * @param {Array.<number>=} opt_flatCoordinates Flat coordinates array.\n * @return {Array.<number>} Flat coordinates.\n * @private\n */\nexports.prototype.decodeCoordinates_ = function(text, opt_flatCoordinates) {\n  const len = text.length;\n  let index = 0;\n  const flatCoordinates = opt_flatCoordinates !== undefined ?\n    opt_flatCoordinates : [];\n  let i = flatCoordinates.length;\n  while (index < len) {\n    let b;\n    let shift = 0;\n    let result = 0;\n    do {\n      b = exports.CHAR64_.indexOf(text.charAt(index++));\n      result |= (b & 0x1f) << shift;\n      shift += 5;\n    } while (b >= 32);\n    const dx = ((result & 1) ? ~(result >> 1) : (result >> 1));\n    this.prevX_ += dx;\n    shift = 0;\n    result = 0;\n    do {\n      b = exports.CHAR64_.indexOf(text.charAt(index++));\n      result |= (b & 0x1f) << shift;\n      shift += 5;\n    } while (b >= 32);\n    const dy = ((result & 1) ? ~(result >> 1) : (result >> 1));\n    this.prevY_ += dy;\n    flatCoordinates[i++] = this.prevX_ * this.accuracy_;\n    flatCoordinates[i++] = this.prevY_ * this.accuracy_;\n  }\n  return flatCoordinates;\n};\n\n\n/**\n * Encode an array of number (corresponding to some coordinates) into a\n * logical sequence of characters. The coordinates are assumed to be in\n * two dimensions and in latitude, longitude order.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} stride Stride.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @return {string} String.\n * @private\n */\nexports.prototype.encodeCoordinates_ = function(flatCoordinates, stride, offset, end) {\n  let encodedCoordinates = '';\n  for (let i = offset; i < end; i += stride) {\n    let x = flatCoordinates[i];\n    let y = flatCoordinates[i + 1];\n    x = Math.floor(x / this.accuracy_);\n    y = Math.floor(y / this.accuracy_);\n    const dx = x - this.prevX_;\n    const dy = y - this.prevY_;\n    this.prevX_ = x;\n    this.prevY_ = y;\n    encodedCoordinates += exports.encodeSignedNumber_(dx) +\n        exports.encodeSignedNumber_(dy);\n  }\n  return encodedCoordinates;\n};\n\n\n/**\n * Read a feature from a logical sequence of characters.\n * @param {string} text Text.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.Feature} Feature.\n * @protected\n * @override\n */\nexports.prototype.readFeatureFromText = function(text, opt_options) {\n  googAsserts.assert(text.length > 2);\n  googAsserts.assert(text[1] === '(');\n  googAsserts.assert(text[text.length - 1] === ')');\n  let splitIndex = text.indexOf('~');\n  const geometryText = splitIndex >= 0 ?\n    `${text.substring(0, splitIndex)})` : text;\n  const geometry = this.readGeometryFromText(geometryText, opt_options);\n  const feature = new olFeature(geometry);\n  if (splitIndex >= 0) {\n    const attributesAndStylesText = text.substring(\n      splitIndex + 1, text.length - 1);\n    splitIndex = attributesAndStylesText.indexOf('~');\n    const attributesText = splitIndex >= 0 ?\n      attributesAndStylesText.substring(0, splitIndex) :\n      attributesAndStylesText;\n    if (attributesText != '') {\n      const parts = attributesText.split('\\'');\n      for (let i = 0; i < parts.length; ++i) {\n        const part = decodeURIComponent(parts[i]);\n        const keyVal = part.split('*');\n        googAsserts.assert(keyVal.length === 2);\n        let key = keyVal[0];\n        const value = keyVal[1];\n        if (!this.setStyle_ && exports.LegacyProperties_[key]) {\n          key = exports.LegacyProperties_[key];\n        }\n        feature.set(key, exports.castValue_(key, value));\n      }\n    }\n    if (splitIndex >= 0) {\n      const stylesText = attributesAndStylesText.substring(splitIndex + 1);\n      if (this.setStyle_) {\n        exports.setStyleInFeature_(stylesText, feature);\n      } else {\n        exports.setStyleProperties_(stylesText, feature);\n      }\n    }\n  }\n  return feature;\n};\n\n\n/**\n * Read multiple features from a logical sequence of characters.\n * @param {string} text Text.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {Array.<ol.Feature>} Features.\n * @protected\n * @override\n */\nexports.prototype.readFeaturesFromText = function(text, opt_options) {\n  googAsserts.assert(text[0] === 'F');\n  /** @type {Array.<ol.Feature>} */\n  const features = [];\n  text = text.substring(1);\n  while (text.length > 0) {\n    const index = text.indexOf(')');\n    googAsserts.assert(index >= 0);\n    const feature = this.readFeatureFromText(\n      text.substring(0, index + 1), opt_options);\n    features.push(feature);\n    text = text.substring(index + 1);\n  }\n  return features;\n};\n\n\n/**\n * Read a geometry from a logical sequence of characters.\n * @param {string} text Text.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.geom.Geometry} Geometry.\n * @protected\n * @override\n */\nexports.prototype.readGeometryFromText = function(text, opt_options) {\n  const geometryReader = exports.GEOMETRY_READERS_[text[0]];\n  googAsserts.assert(geometryReader !== undefined);\n  this.prevX_ = 0;\n  this.prevY_ = 0;\n  return geometryReader.call(this, text);\n};\n\n\n/**\n * Encode a feature into a logical sequence of characters.\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {string} Encoded feature.\n * @protected\n * @override\n */\nexports.prototype.writeFeatureText = function(feature, opt_options) {\n  const /** @type {Array.<string>} */ encodedParts = [];\n\n  // encode geometry\n\n  let encodedGeometry = '';\n  const geometry = feature.getGeometry();\n  if (geometry) {\n    encodedGeometry = this.writeGeometryText(geometry, opt_options);\n  }\n\n  if (encodedGeometry.length > 0) {\n    // remove the final bracket\n    googAsserts.assert(encodedGeometry[encodedGeometry.length - 1] === ')');\n    encodedGeometry = encodedGeometry.substring(0, encodedGeometry.length - 1);\n    encodedParts.push(encodedGeometry);\n  }\n\n  // encode properties\n\n  const /** @type {Array.<string>} */ encodedProperties = [];\n  const propFunction = this.propertiesFunction_(feature);\n  for (const key in propFunction) {\n    const value = propFunction[key];\n    if (value !== undefined && value !== null && key !== feature.getGeometryName()) {\n      if (encodedProperties.length !== 0) {\n        encodedProperties.push('\\'');\n      }\n      const encoded = encodeURIComponent(\n        `${key.replace(/[()'*]/g, '_')}*${\n          value.toString().replace(/[()'*]/g, '_')}`);\n      encodedProperties.push(encoded);\n    }\n  }\n\n  if (encodedProperties.length > 0) {\n    encodedParts.push('~');\n    Array.prototype.push.apply(encodedParts, encodedProperties);\n  }\n\n  // encode styles\n\n  if (this.encodeStyles_) {\n    const styleFunction = feature.getStyleFunction();\n    if (styleFunction !== undefined) {\n      let styles = styleFunction.call(feature, 0);\n      if (styles !== null) {\n        const encodedStyles = [];\n        styles = Array.isArray(styles) ? styles : [styles];\n        exports.encodeStyles_(\n          styles, geometry.getType(), encodedStyles);\n        if (encodedStyles.length > 0) {\n          encodedParts.push('~');\n          Array.prototype.push.apply(encodedParts, encodedStyles);\n        }\n      }\n    }\n  }\n\n  // append the closing bracket and return the encoded feature\n\n  encodedParts.push(')');\n  return encodedParts.join('');\n};\n\n\n/**\n * Encode an array of features into a logical sequence of characters.\n * @param {Array.<ol.Feature>} features Feature.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {string} Encoded features.\n * @protected\n * @override\n */\nexports.prototype.writeFeaturesText = function(features, opt_options) {\n  const textArray = [];\n  if (features.length > 0) {\n    textArray.push('F');\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      textArray.push(this.writeFeatureText(features[i], opt_options));\n    }\n  }\n  return textArray.join('');\n};\n\n\n/**\n * Encode a geometry into a logical sequence of characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {string} Encoded geometry.\n * @protected\n * @override\n */\nexports.prototype.writeGeometryText = function(geometry, opt_options) {\n  const geometryWriter = exports.GEOMETRY_WRITERS_[\n    geometry.getType()];\n  googAsserts.assert(geometryWriter !== undefined);\n  const transformedGeometry = /** @type {ol.geom.Geometry} */\n      (olFormatFeature.transformWithOptions(geometry, true, opt_options));\n  this.prevX_ = 0;\n  this.prevY_ = 0;\n  return geometryWriter.call(this, transformedGeometry);\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/FeatureHash.js","/**\n * @module ngeo.format.FeatureHashStyleType\n */\n/**\n * @enum {string}\n * @export\n */\nconst exports = {\n  LINE_STRING: 'LineString',\n  POINT: 'Point',\n  POLYGON: 'Polygon'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/FeatureHashStyleType.js","/**\n * @module ol/source/XYZ\n */\nimport {inherits} from '../index.js';\nimport TileImage from '../source/TileImage.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case,\n * {@link ol.source.TileImage} can be used with a `tileUrlFunction`\n * such as:\n *\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *        coordinate[1] + '/' + coordinate[2] + '.png';\n *    }\n *\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.XYZOptions=} opt_options XYZ options.\n * @api\n */\nconst XYZ = function(opt_options) {\n  const options = opt_options || {};\n  const projection = options.projection !== undefined ?\n    options.projection : 'EPSG:3857';\n\n  const tileGrid = options.tileGrid !== undefined ? options.tileGrid :\n    _ol_tilegrid_.createXYZ({\n      extent: _ol_tilegrid_.extentFromProjection(projection),\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize\n    });\n\n  TileImage.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    opaque: options.opaque,\n    projection: projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileGrid: tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n};\n\ninherits(XYZ, TileImage);\nexport default XYZ;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/XYZ.js\n// module id = 6\n// module chunks = 0 1 2 3 4 5 7 8 9 10 11 12 13 14 16 17 18 19 21 22 23 24 25 26 27"],"sourceRoot":""}