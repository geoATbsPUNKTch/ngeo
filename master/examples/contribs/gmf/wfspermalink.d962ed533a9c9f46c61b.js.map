{"version":3,"sources":["webpack:///./contribs/gmf/src/query/windowComponent.js","webpack:///./src/misc/swipe.js","webpack:///./node_modules/angular-animate/index.js","webpack:///./node_modules/angular-animate/angular-animate.js","webpack:///./node_modules/angular-touch/index.js","webpack:///./node_modules/angular-touch/angular-touch.js","webpack:///./contribs/gmf/examples/wfspermalink.js","webpack:///./node_modules/openlayers/src/ol/source/XYZ.js","webpack:///./node_modules/openlayers/src/ol/source/OSM.js"],"names":["__webpack_require__","olObj","exports","angular","module","_FeatureOverlayMgr2","default","name","_FeatureHelper2","_swipe2","_MapQuerent2","gmfDisplayquerywindowTemplateUrl","$element","$attrs","config","$animateProvider","classNameFilter","value","templateUrl","undefined","_index2","baseModuleTemplateUrl","component_","controller","bindings","draggableContainment","featuresStyleFn","selectedFeatureStyleFn","defaultCollapsedFn","desktop","showUnqueriedLayers","component","Controller_","$scope","ngeoQueryResult","ngeoMapQuerent","ngeoFeatureOverlayMgr","_this","this","collapsed","showUnqueriedLayers_","sourcesFilter","queried","sources","total","pending","ngeoMapQuerent_","selectedSource","features_","_Collection2","ngeoFeatureOverlayMgr_","highlightFeatures_","source","feature","currentResult","isNext","animate","open","element_","$watchCollection","newQueryResult","oldQueryResult","updateQueryResult_","show","close","prototype","$onInit","featuresOverlay","getFeatureOverlay","setFeatures","featuresStyle","_asserts2","assertInstanceof","_Style2","setStyle","highlightFeaturesOverlay","highlightFeatureStyle","fill","_Fill2","color","stroke","_Stroke2","width","image","_Circle2","radius","find","draggable","cancel","containment","resizable","minHeight","minWidth","clear","updateFeatures_","setCurrentResult_","collectFeatures_","highlightCurrentFeature_","position","setHighlight","hasChanged","i","features","lastFeature","length","previous","getResultLength","animate_","next","queryResult","filter","assert","isEmpty","getFilteredFeatureValues","push","isFirst","isLast","getFeatureValues","ii","opt_lastFeature","remove","setSelectedSource","factory","POINTER_EVENTS","mouse","start","move","end","touch","pointer","getCoordinates","event","originalEvent","touches","e","changedTouches","x","clientX","y","clientY","getEvents","pointerTypes","eventType","res","forEach","pointerType","eventName","join","bind","element","eventHandlers","totalX","totalY","startCoords","lastPos","active","on","events","coords","Math","abs","preventDefault","makeSwipeDirective_","directiveName","direction","directive","$parse","$verticalSwipe","MAX_HORIZONTAL_DISTANCE","MAX_HORIZONTAL_RATIO","MIN_VERTICAL_DISTANCE","scope","attr","swipeHandler","valid","isDefined","deltaY","deltaX","validSwipe","$apply","triggerHandler","$event","window","TRANSITION_PROP","TRANSITIONEND_EVENT","ANIMATION_PROP","ANIMATIONEND_EVENT","ELEMENT_NODE","ADD_CLASS_SUFFIX","REMOVE_CLASS_SUFFIX","EVENT_CLASS_PREFIX","NG_ANIMATE_CLASSNAME","NG_ANIMATE_CHILDREN_DATA","ontransitionend","onwebkittransitionend","onanimationend","onwebkitanimationend","DURATION_KEY","TIMING_KEY","ANIMATION_PLAYSTATE_KEY","ANIMATION_DELAY_PROP","ANIMATION_DURATION_PROP","TRANSITION_DELAY_PROP","TRANSITION_DURATION_PROP","ngMinErr","$$minErr","assertArg","arg","reason","mergeClasses","a","b","isArray","pendClasses","classes","fix","isPrefix","className","isString","split","klass","stripCommentsFromElement","jqLite","nodeType","extractElementNode","elm","applyAnimationClassesFactory","$$jqLite","options","addClass","$$addClass","removeClass","$$removeClass","prepareAnimationOptions","$$prepared","domOperation","noop","$$domOperationFired","applyAnimationStyles","applyAnimationFromStyles","applyAnimationToStyles","from","css","to","mergeAnimationDetails","oldAnimation","newAnimation","target","newOptions","toAdd","toRemove","existing","flags","splitClassesToLookup","key","obj","val","prop","allow","resolveElementClasses","preparationClasses","concatWithSpace","realDomOperation","extend","getDomNode","blockTransitions","node","duration","applyInlineStyle","blockKeyframeAnimations","applyBlock","styleTuple","style","$$AnimateChildrenDirective","$interpolate","link","attrs","ngAnimateChildren","setData","data","$observe","ANIMATE_TIMER_KEY","ONE_SECOND","ELAPSED_TIME_MAX_DECIMAL_PLACES","CLOSING_TIME_BUFFER","DETECT_CSS_PROPERTIES","transitionDuration","transitionDelay","transitionProperty","animationDuration","animationDelay","animationIterationCount","DETECT_STAGGER_CSS_PROPERTIES","getCssDelayStyle","delay","isKeyframeAnimation","computeCssStyles","$window","properties","styles","Object","create","detectedStyles","getComputedStyle","formalStyleName","actualStyleName","maxValue","values","c","charAt","substring","parseFloat","max","truthyTimingValue","getCssTransitionDurationStyle","applyOnlyDuration","createLocalCacheLookup","cache","flush","count","entry","get","put","registerRestorableStyles","backup","getPropertyValue","copy","isElement","isFunction","isObject","isUndefined","$AnimateCssProvider","gcsLookup","gcsStaggerLookup","$get","$$AnimateRunner","$timeout","$$forceReflow","$sniffer","$$rAFScheduler","$$animateQueue","applyAnimationClasses","parentCounter","gcsHashFn","extraClasses","KEY","parentNode","getAttribute","rafWaitQueue","waitUntilQuiet","callback","pageWidth","computeTimings","cacheKey","timings","computeCachedCssStyles","aD","tD","maxDelay","maxDuration","initialOptions","restoreStyles","enabled","closeAndReturnNoopAnimator","animationClosed","animationPaused","animationCompleted","runner","runnerHost","maxDelayTime","maxDurationTime","startTime","temporaryStyles","packageStyles","animations","transitions","method","structuralClassName","addRemoveClassName","structural","applyClassesEarly","stagger","trim","fullClassName","activeClasses","hasToStyles","keys","keyframeStyle","staggerVal","staggerClassName","computeCachedCssStaggerStyles","$$skipPreparationClasses","transitionStyle","durationStyle","itemIndex","staggerIndex","skipBlocking","relativeDelay","delayStyle","hasTransitions","hasAnimations","hasTransitionAll","applyTransitionDuration","applyAnimationDuration","applyTransitionDelay","applyAnimationDelay","recalculateTimingStyles","blockTransition","blockKeyframeAnimation","cleanupStyles","applyBlocking","$$willAnimate","endFn","cancelFn","resume","pause","rejected","setProperty","removeProperty","onDone","off","onAnimationProgress","animationTimerData","timer","removeData","complete","stopPropagation","ev","timeStamp","$manualTimeStamp","Date","now","elapsedTime","toFixed","playPause","playAnimation","index","arr","indexOf","splice","maxStagger","triggerAnimationStart","floor","easing","easeProp","easeVal","timerTime","endTime","animationsData","setupFallbackTimer","currentTimerData","expectedEndTime","onAnimationExpired","$$AnimateCssDriverProvider","$$animationProvider","drivers","NG_ANIMATE_SHIM_CLASS_NAME","NG_ANIMATE_ANCHOR_CLASS_NAME","NG_OUT_ANCHOR_CLASS_NAME","NG_IN_ANCHOR_CLASS_NAME","$animateCss","$rootScope","$rootElement","$document","bodyNode","body","rootNode","rootBodyElement","contains","animationDetails","anchors","fromAnimation","prepareRegularAnimation","toAnimation","anchorAnimations","anchor","animator","outAnchor","inAnchor","clone","cloneNode","startingClasses","filterCssClasses","getClassVal","append","animatorIn","animatorOut","calculateAnchorStyles","prepareInAnimation","startingAnimator","currentAnimation","done","getBoundingClientRect","scrollTop","scrollLeft","endingClasses","getUniqueValues","prepareAnchoredAnimation","animationRunners","animation","all","status","prepareFromToAnchorAnimation","replace","$$AnimateJsProvider","$injector","arguments","before","after","afterFn","beforeFn","classesToAdd","classesToRemove","matches","flagMap","animationFactory","$$registeredAnimations","lookupAnimations","toUpperCase","substr","packageAnimations","closeActiveAnimations","chain","fn","applyOptions","setHost","endAnimations","onComplete","success","cancelled","groupEventedAnimations","fnName","operations","ani","endProgressCb","resolved","onAnimationComplete","args","apply","executeAnimationFn","result","concat","runners","animateFn","reject","$$AnimateJsDriverProvider","$$animateJs","prepareAnimation","endFnFactory","NG_ANIMATE_ATTR_NAME","NG_ANIMATE_PIN_DATA","$$AnimateQueueProvider","PRE_DIGEST_STATE","RUNNING_STATE","ONE_SPACE","rules","skip","hasMatchingClasses","newClassString","currentClassString","currentClassMap","classString","map","makeTruthyCssClassMap","some","isAllowed","ruleType","previousAnimation","hasAnimationClasses","and","state","nA","nR","cA","cR","$$rAF","$$Map","$$animation","$templateRequest","$$isDocumentHidden","activeAnimationsLookup","disabledElementsLookup","animationsEnabled","deregisterWatch","$watch","totalPendingRequests","$$postDigest","callbackRegistry","customFilter","returnTrue","isAnimatableByFilter","isAnimatableClassName","test","normalizeAnimationDetails","Node","compareDocumentPosition","filterFromRegistry","list","matchContainer","matchCallback","containerNode","cleanupEventListeners","phase","$animate","container","entries","pin","parentElement","originalElement","runInNextPostDigestOrNow","postDigestCalled","isStructural","documentHidden","skipAnimations","existingAnimation","hasExistingAnimation","animateChildren","bodyNodeDetected","nodeName","rootNodeDetected","parentAnimationDetected","elementDisabled","parentHost","details","parentNodeDisabled","areAnimationsAllowed","notifyProgress","children","querySelectorAll","child","parseInt","delete","closeChildAnimations","skipAnimationFlag","cancelAnimationFlag","joinAnimationFlag","applyGeneratedPreparationClasses","isValidAnimation","clearElementAnimationState","counter","markElementAnimationState","animationCancelled","parent","realRunner","callbacks","targetParentNode","targetNode","call","findCallbacks","progress","clearGeneratedClasses","queueAnimation","bool","argCount","set","removeAttribute","setAttribute","oldValue","newValue","$$AnimationProvider","NG_ANIMATE_REF_ATTR","RUNNER_STORAGE_KEY","getRunner","animationQueue","setRunner","prepareClassName","tempClasses","beforeStart","handleDestroyedElement","groupedAnimations","preparedAnimations","refLookup","enterOrMove","anchorNodes","SELECTOR","items","hasAttribute","getAnchorNodes","animationID","usedIndicesLookup","anchorGroups","lookupKey","toString","group","aa","j","cssClassesIntersection","out","in","indexKey","groupAnimations","toBeSortedAnimations","animationEntry","domNode","startAnimationFn","closeFn","operation","driverName","driver","invokeFirstDriver","animationRunner","newRunner","update","updateAnimationRunners","tree","lookup","processNode","queue","remainingLevelEntries","nextLevelEntries","row","childEntry","flatten","processed","parentEntry","elementNode","sortAnimations","removeRunner","info","angularVersion","restrict","transclude","terminal","priority","ctrl","$transclude","previousElement","previousScope","ngAnimateSwap","leave","$destroy","$new","enter","scheduler","tasks","nextTick","shift","provider","ngTouch","$TouchProvider","$provide","$compileProvider","ngClickOverrideEnabled","ngClickDirectiveAdded","ngTouchClickDirectiveFactory","$$moduleName","decorator","$delegate","$inject","lastPreventedTime","touchCoordinates","lastLabelClickCoordinates","PREVENT_DURATION","CLICKBUSTER_THRESHOLD","ACTIVE_CLASS_NAME","checkAllowableRegions","x1","y1","x2","y2","onClick","lowercase","blur","onTouchStart","tapElement","touchStartX","touchStartY","clickHandler","ngClick","tapping","resetState","srcElement","diff","dist","sqrt","pow","addEventListener","preventGhostClick","disabled","onclick","touchend","makeSwipeDirective","$swipe","MAX_VERTICAL_DISTANCE","MAX_VERTICAL_RATIO","MIN_HORIZONTAL_DISTANCE","_component2","_windowComponent2","url","wfsTypes","featureType","label","defaultFeatureNS","defaultFeaturePrefix","constant","MainController","_Map2","layers","_Tile2","_OSM2","view","_View2","projection","resolutions","center","zoom","featureStyle","XYZ","opt_options","tileGrid","tilegrid","createXYZ","extent","extentFromProjection","maxZoom","minZoom","tileSize","TileImage","attributions","cacheSize","crossOrigin","opaque","reprojectionErrorThreshold","tileLoadFunction","tilePixelRatio","tileUrlFunction","urls","wrapX","transition","ol","source_XYZ","OSM","ATTRIBUTION","__webpack_exports__"],"mappings":"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","file":"wfspermalink.d962ed533a9c9f46c61b.js","sourcesContent":["/**\n * @module gmf.query.windowComponent\n */\nimport gmfBase from 'gmf/index.js';\nimport googAsserts from 'goog/asserts.js';\nimport ngeoMapFeatureOverlayMgr from 'ngeo/map/FeatureOverlayMgr.js';\nimport ngeoMiscFeatureHelper from 'ngeo/misc/FeatureHelper.js';\n\n/** @suppress {extraRequire} */\nimport ngeoMiscSwipe from 'ngeo/misc/swipe.js';\n\n/** @suppress {extraRequire} - required for `ngeoQueryResult` */\nimport ngeoQueryMapQuerent from 'ngeo/query/MapQuerent.js';\n\nimport olCollection from 'ol/Collection.js';\nimport * as olObj from 'ol/obj.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\n\nimport 'angular-animate';\nimport 'angular-touch';\n\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('gmfQueryWindowComponent', [\n  ngeoMapFeatureOverlayMgr.module.name,\n  ngeoMiscFeatureHelper.module.name,\n  ngeoMiscSwipe.name,\n  ngeoQueryMapQuerent.module.name,\n  'ngAnimate',\n  'ngTouch',\n]);\n\n\nexports.config(['$animateProvider',\n  /**\n   * For performance reason, only perform animation on elements that have the\n   * `gmf-animatable` css class.\n   * @param {angular.$animateProvider} $animateProvider animate provider.\n   */\n  function($animateProvider) {\n    $animateProvider.classNameFilter(/gmf-animatable/);\n  }\n]);\n\n\nexports.value('gmfDisplayquerywindowTemplateUrl',\n  /**\n     * @param {!angular.JQLite} $element Element.\n     * @param {!angular.Attributes} $attrs Attributes.\n     * @return {string} Template.\n     */\n  ($element, $attrs) => {\n    const templateUrl = $attrs['gmfDisplayquerywindowTemplateurl'];\n    return templateUrl !== undefined ? templateUrl :\n      `${gmfBase.baseModuleTemplateUrl}/query/windowComponent.html`;\n  });\n\n\n/**\n * @param {!angular.JQLite} $element Element.\n * @param {!angular.Attributes} $attrs Attributes.\n * @param {!function(!angular.JQLite, !angular.Attributes): string} gmfDisplayquerywindowTemplateUrl Template function.\n * @return {string} Template URL.\n * @ngInject\n */\nfunction gmfDisplayquerywindowTemplateUrl($element, $attrs, gmfDisplayquerywindowTemplateUrl) {\n  return gmfDisplayquerywindowTemplateUrl($element, $attrs);\n}\n\n\n/**\n * Provide a component to display results of the {@link ngeo.queryResult}\n * and shows related features on the map using the {@link ngeo.map.FeatureOverlayMgr}.\n *\n * You can override the default component's template by setting the\n * value `gmfDisplayquerywindowTemplateUrl`.\n *\n * Features displayed on the map use a default style but you can override these\n * styles by passing ol.style.Style objects as attributes of this component.\n *\n * Example:\n *\n *      <gmf-displayquerywindow\n *        gmf-displayquerywindow-featuresstyle=\"ctrl.styleForAllFeatures\"\n *        gmf-displayquerywindow-selectedfeaturestyle=\"ctrl.styleForTheCurrentFeature\">\n *      </gmf-displayquerywindow>\n *\n * @htmlAttribute {ol.style.Style} gmf-displayquerywindow-featuresstyle A style\n *     object for all features from the result of the query.\n * @htmlAttribute {ol.style.Style} selectedfeaturestyle A style\n *     object for the current displayed feature.\n * @htmlAttribute {boolean=} defaultcollapsed If the query result window is\n *     collapsed.\n * @htmlAttribute {boolean} desktop If the component is used in the desktop\n *     application.\n * @htmlAttribute {boolean} showunqueriedlayers If also layers, that have not\n *     been queried for the last query, should be shown in the filter.\n *\n * @ngdoc component\n * @ngname gmfDisplayquerywindow\n */\nexports.component_ = {\n  controller: 'GmfDisplayquerywindowController as ctrl',\n  bindings: {\n    'draggableContainment': '<?gmfDisplayquerywindowDraggableContainment',\n    'featuresStyleFn': '&gmfDisplayquerywindowFeaturesstyle',\n    'selectedFeatureStyleFn': '&gmfDisplayquerywindowSelectedfeaturestyle',\n    'defaultCollapsedFn': '&?gmfDisplayquerywindowDefaultcollapsed',\n    'desktop': '=gmfDisplayquerywindowDesktop',\n    'showUnqueriedLayers': '=gmfDisplayquerywindowShowunqueriedlayers'\n  },\n  templateUrl: gmfDisplayquerywindowTemplateUrl\n};\n\n\nexports.component('gmfDisplayquerywindow', exports.component_);\n\n\n/**\n * @param {!jQuery} $element Element.\n * @param {!angular.Scope} $scope Angular scope.\n * @param {!ngeox.QueryResult} ngeoQueryResult ngeo query result.\n * @param {!ngeo.query.MapQuerent} ngeoMapQuerent ngeo map querent service.\n * @param {!ngeo.map.FeatureOverlayMgr} ngeoFeatureOverlayMgr The ngeo feature\n *     overlay manager service.\n * @constructor\n * @private\n * @ngInject\n * @ngdoc controller\n * @ngname GmfDisplayquerywindowController\n */\nexports.Controller_ = function($element, $scope, ngeoQueryResult, ngeoMapQuerent,\n  ngeoFeatureOverlayMgr) {\n\n  /**\n   * @type {Element|string}\n   * @export\n   */\n  this.draggableContainment;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.desktop = false;\n\n  /**\n   * Is the window currently collapsed?\n   * When used for Desktop, it is shown non-collapsed.\n   * @type {boolean}\n   * @export\n   */\n  this.collapsed = !this.desktop;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.showUnqueriedLayers_ = false;\n\n  /**\n   * Object that is used to filter the source list in the template.\n   * @type {Object}\n   * @export\n   */\n  this.sourcesFilter = {'queried': true};\n\n  /**\n   * @type {ngeox.QueryResult}\n   * @export\n   */\n  this.ngeoQueryResult = {\n    sources: [],\n    total: 0,\n    pending: false\n  };\n\n  /**\n   * @type {!ngeo.query.MapQuerent}\n   * @private\n   */\n  this.ngeoMapQuerent_ = ngeoMapQuerent;\n\n  /**\n   * @type {?ngeox.QueryResultSource}\n   * @export\n   */\n  this.selectedSource = null;\n\n  /**\n   * @type {!ol.Collection}\n   * @private\n   */\n  this.features_ = new olCollection();\n\n  /**\n   * @type {!ngeo.map.FeatureOverlayMgr}\n   * @private\n   */\n  this.ngeoFeatureOverlayMgr_ = ngeoFeatureOverlayMgr;\n\n  /**\n   * @type {!ol.Collection}\n   * @private\n   */\n  this.highlightFeatures_ = new olCollection();\n\n  /**\n   * @type {?ngeox.QueryResultSource}\n   * @export\n   */\n  this.source = null;\n\n  /**\n   * @type {?ol.Feature}\n   * @export\n   */\n  this.feature = null;\n\n  /**\n   * @type {number}\n   * @export\n   */\n  this.currentResult = -1;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.isNext = true;\n\n  /**\n   * @type {number}\n   * @export\n   */\n  this.animate = 0;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.open = false;\n\n  /**\n   * @const {!jQuery}\n   * @private\n   */\n  this.element_ = $element;\n\n  $scope.$watchCollection(\n    () => ngeoQueryResult,\n    (newQueryResult, oldQueryResult) => {\n      this.updateQueryResult_(newQueryResult);\n      if (newQueryResult.total > 0) {\n        this.show();\n      } else if (oldQueryResult !== newQueryResult) {\n        this.close();\n      }\n    });\n};\n\n/**\n * Initialise the controller.\n */\nexports.Controller_.prototype.$onInit = function() {\n  this.draggableContainment = this.draggableContainment || 'document';\n  this.desktop = this.desktop;\n  this.collapsed = this['defaultCollapsedFn'] ?\n    this['defaultCollapsedFn']() === true : !this.desktop;\n\n  this.showUnqueriedLayers_ = this['showUnqueriedLayers'] ?\n    this['showUnqueriedLayers'] === true : false;\n\n  this.sourcesFilter = this.showUnqueriedLayers_ ? {} : {'queried': true};\n\n  const featuresOverlay = this.ngeoFeatureOverlayMgr_.getFeatureOverlay();\n  featuresOverlay.setFeatures(this.features_);\n  const featuresStyle = this['featuresStyleFn']();\n  if (featuresStyle !== undefined) {\n    googAsserts.assertInstanceof(featuresStyle, olStyleStyle);\n    featuresOverlay.setStyle(featuresStyle);\n  }\n\n  const highlightFeaturesOverlay = this.ngeoFeatureOverlayMgr_.getFeatureOverlay();\n  highlightFeaturesOverlay.setFeatures(this.highlightFeatures_);\n  let highlightFeatureStyle = this['selectedFeatureStyleFn']();\n  if (highlightFeatureStyle !== undefined) {\n    googAsserts.assertInstanceof(highlightFeatureStyle, olStyleStyle);\n  } else {\n    const fill = new olStyleFill({color: [255, 0, 0, 0.6]});\n    const stroke = new olStyleStroke({color: [255, 0, 0, 1], width: 2});\n    highlightFeatureStyle = new olStyleStyle({\n      fill: fill,\n      image: new olStyleCircle({\n        fill: fill,\n        radius: 5,\n        stroke: stroke\n      }),\n      stroke: stroke\n    });\n  }\n  highlightFeaturesOverlay.setStyle(highlightFeatureStyle);\n\n  if (this.desktop) {\n    this.element_.find('.gmf-displayquerywindow .container').draggable({\n      'cancel': 'input,textarea,button,select,option,tr',\n      'containment': this.draggableContainment\n    });\n    this.element_.find('.gmf-displayquerywindow .container').resizable({\n      'minHeight': 240,\n      'minWidth': 240\n    });\n  }\n};\n\n\n/**\n * Remove current displayed results then get new results from the\n * ngeoQueryResult service. Display all results on the map and display,\n * highlight the first feature.\n * @export\n */\nexports.Controller_.prototype.show = function() {\n  this.clear();\n  this.updateFeatures_();\n};\n\n\n/**\n * @private\n */\nexports.Controller_.prototype.updateFeatures_ = function() {\n  this.setCurrentResult_(0, false);\n  if (this.source !== null) {\n    this.collectFeatures_();\n    this.highlightCurrentFeature_();\n    this.open = true;\n  }\n};\n\n/**\n * Select a source and a feature depending of the given position.\n * @param {number} position The index of the feature. If the position is bigger\n * than the length of the first source, get it in the next source. Etc.\n * @param {boolean} setHighlight True to set the highlight automatically.\n * @return {boolean} True if result has changed. False else.\n * @private\n */\nexports.Controller_.prototype.setCurrentResult_ = function(\n  position, setHighlight) {\n  let hasChanged = false;\n  if (position !== this.currentResult) {\n    let i, source, features;\n    const lastFeature = this.feature;\n    const sources = this.ngeoQueryResult.sources;\n    this.currentResult = position;\n    for (i = 0; i < sources.length; i++) {\n      source = sources[i];\n      if (this.selectedSource !== null && this.selectedSource !== source) {\n        // when filtering on a source, only consider features of the selected source\n        continue;\n      }\n      features = source.features;\n      if (position >= features.length) {\n        position -= features.length;\n      } else {\n        this.source = source;\n        this.feature = source.features[position];\n        hasChanged = true;\n        break;\n      }\n    }\n    if (setHighlight) {\n      this.highlightCurrentFeature_(lastFeature);\n    }\n  }\n  return hasChanged;\n};\n\n\n/**\n * Select the logical previous source and feature then highlight this feature on\n * the map.\n * @export\n */\nexports.Controller_.prototype.previous = function() {\n  let position = this.currentResult - 1;\n  if (position < 0) {\n    position = this.getResultLength() - 1;\n  }\n  const hasChanged = this.setCurrentResult_(position, true);\n  if (hasChanged) {\n    this.animate_(false);\n  }\n};\n\n\n/**\n * Select the logical next source and feature then highlight this feature on\n * the map.\n * @export\n */\nexports.Controller_.prototype.next = function() {\n  let position = this.currentResult + 1;\n  const positionMax = this.getResultLength() - 1;\n  if (position > positionMax) {\n    position = 0;\n  }\n  const hasChanged = this.setCurrentResult_(position, true);\n  if (hasChanged) {\n    this.animate_(true);\n  }\n};\n\n\n/**\n * Remove features without properties from the query result.\n * @param {ngeox.QueryResult} queryResult ngeo query result.\n * @private\n */\nexports.Controller_.prototype.updateQueryResult_ = function(queryResult) {\n  this.ngeoQueryResult.total = 0;\n  this.ngeoQueryResult.sources.length = 0;\n  for (let i = 0; i < queryResult.sources.length; i++) {\n    const source = queryResult.sources[i];\n    source.features = source.features.filter((feature) => {\n      googAsserts.assert(feature);\n      return !olObj.isEmpty(ngeoMiscFeatureHelper.getFilteredFeatureValues(feature));\n    });\n    this.ngeoQueryResult.sources.push(source);\n    this.ngeoQueryResult.total += source.features.length;\n  }\n};\n\n/**\n * Get the total count of features in the result of the query. If a source\n * has been select, only the number of features of that source are returned.\n * @return {number} Total number of features.\n * @export\n */\nexports.Controller_.prototype.getResultLength = function() {\n  if (this.selectedSource === null) {\n    return this.ngeoQueryResult.total;\n  } else {\n    return this.selectedSource.features.length;\n  }\n};\n\n\n/**\n * @return {boolean} If the first result is active.\n * @export\n */\nexports.Controller_.prototype.isFirst = function() {\n  return this.currentResult == 0;\n};\n\n\n/**\n * @return {boolean} If the last result is active.\n * @export\n */\nexports.Controller_.prototype.isLast = function() {\n  return this.currentResult == this.getResultLength() - 1;\n};\n\n\n/**\n * Delete the unwanted ol3 properties from the current feature then return the\n * properties.\n * @return {Object?} Filtered properties of the current feature or null.\n * @export\n */\nexports.Controller_.prototype.getFeatureValues = function() {\n  if (!this.feature) {\n    return null;\n  }\n  return ngeoMiscFeatureHelper.getFilteredFeatureValues(this.feature);\n};\n\n\n/**\n * Special function that's used to set the \"animation\" value after to set the\n * \"isNext\" value. The aim is to wait on Angular to add a class (corresponding\n * to \"isNext\") on the DOM before to set the \"animation\" value and do the\n * animation.\n * @param {boolean} isNext used to indicate if the user wants to see the next\n * or the previous result.\n * @private\n */\nexports.Controller_.prototype.animate_ = function(isNext) {\n  this.isNext = isNext;\n  this.animate++;\n};\n\n\n/**\n * Collect all features in the queryResult object.\n * @private\n */\nexports.Controller_.prototype.collectFeatures_ = function() {\n  const sources = this.ngeoQueryResult.sources;\n  this.features_.clear();\n  for (let i = 0; i < sources.length; i++) {\n    const source = sources[i];\n    if (this.selectedSource !== null && this.selectedSource !== source) {\n      // when filtering on a source, only add features of the selected source\n      continue;\n    }\n    const features = source.features;\n    for (let ii = 0; ii < features.length; ii++) {\n      this.features_.push(features[ii]);\n    }\n  }\n};\n\n\n/**\n * Highlight the current displayed feature.\n * @param {ol.Feature=} opt_lastFeature last highlighted feature. Require if\n * it exists because it must be added to the 'non-selected' features collection.\n * @private\n */\nexports.Controller_.prototype.highlightCurrentFeature_ =\nfunction(opt_lastFeature) {\n  this.highlightFeatures_.clear();\n  this.features_.remove(this.feature);\n  this.highlightFeatures_.push(this.feature);\n  if (opt_lastFeature !== undefined) {\n    this.features_.push(opt_lastFeature);\n  }\n};\n\n\n/**\n * Remove the current selected feature and source and remove all features\n * from the map.\n * @export\n */\nexports.Controller_.prototype.close = function() {\n  this.open = false;\n  this.clear();\n  this.ngeoMapQuerent_.clear();\n};\n\n\n/**\n * Remove the current selected feature and source and remove all features\n * from the map.\n * @export\n */\nexports.Controller_.prototype.clear = function() {\n  this.feature = null;\n  this.source = null;\n  this.currentResult = -1;\n  this.features_.clear();\n  this.highlightFeatures_.clear();\n  this.selectedSource = null;\n};\n\n\n/**\n * @param {ngeox.QueryResultSource} source The source to select.\n * @export\n */\nexports.Controller_.prototype.setSelectedSource = function(source) {\n  if (source !== null && source.features.length <= 0) {\n    // sources with no results can not be selected\n    return;\n  }\n  this.clear();\n  this.selectedSource = source;\n  this.updateFeatures_();\n};\n\n\nexports.controller('GmfDisplayquerywindowController',\n  exports.Controller_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/query/windowComponent.js","/**\n * @module ngeo.misc.swipe\n */\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('ngeoMiscSwipe', []);\n\n\n/**\n * ===========================================\n * NOTE: It is an inversed copy of ngSwipe.\n * Angular ngSwipe assumes that vertical\n * swipe is a scroll.\n * For more details:\n * https://docs.angularjs.org/api/ngTouch/service/$swipe\n * ===========================================\n */\n\n/**\n * @ngdoc service\n * @name $verticalSwipe\n *\n * @description\n * The `$verticalSwipe` service is a service that abstracts the messier details of hold-and-drag swipe\n * behavior, to make implementing swipe-related directives more convenient.\n *\n * Requires the {@link ngTouch `ngTouch`} module to be installed.\n *\n * `$verticalSwipe` is used by the `ngeoSwipeUp` and `ngeoSwipeDown` directives.\n *\n * # Usage\n * The `$verticalSwipe` service is an object with a single method: `bind`. `bind` takes an element\n * which is to be watched for swipes, and an object with four handler functions. See the\n * documentation for `bind` below.\n */\n\nexports.factory('$verticalSwipe', [function() {\n  // The total distance in any direction before we make the call on swipe vs. scroll.\n  const MOVE_BUFFER_RADIUS = 10;\n\n  const POINTER_EVENTS = {\n    'mouse': {\n      start: 'mousedown',\n      move: 'mousemove',\n      end: 'mouseup'\n    },\n    'touch': {\n      start: 'touchstart',\n      move: 'touchmove',\n      end: 'touchend',\n      cancel: 'touchcancel'\n    },\n    'pointer': {\n      start: 'pointerdown',\n      move: 'pointermove',\n      end: 'pointerup',\n      cancel: 'pointercancel'\n    }\n  };\n\n  function getCoordinates(event) {\n    const originalEvent = event.originalEvent || event;\n    const touches = originalEvent.touches && originalEvent.touches.length ? originalEvent.touches : [originalEvent];\n    const e = (originalEvent.changedTouches && originalEvent.changedTouches[0]) || touches[0];\n\n    return {\n      x: e.clientX,\n      y: e.clientY\n    };\n  }\n\n  function getEvents(pointerTypes, eventType) {\n    const res = [];\n    angular.forEach(pointerTypes, (pointerType) => {\n      const eventName = POINTER_EVENTS[pointerType][eventType];\n      if (eventName) {\n        res.push(eventName);\n      }\n    });\n    return res.join(' ');\n  }\n\n  return {\n    /**\n     * @ngdoc method\n     * @name $verticalSwipe#bind\n     * @param {!angular.JQLite} element Element.\n     * @param {Object} eventHandlers - Event handlers object with `start`, `cancel` and `end` callbacks\n     * @param {Array<string>} pointerTypes - Types of pointer\n     *\n     * @description\n     * The main method of `$verticalSwipe`. It takes an element to be watched for swipe motions, and an\n     * object containing event handlers.\n     * The pointer types that should be used can be specified via the optional\n     * third argument, which is an array of strings `'mouse'`, `'touch'` and `'pointer'`. By default,\n     * `$verticalSwipe` will listen for `mouse`, `touch` and `pointer` events.\n     *\n     * The four events are `start`, `move`, `end`, and `cancel`. `start`, `move`, and `end`\n     * receive as a parameter a coordinates object of the form `{ x: 150, y: 310 }` and the raw\n     * `event`. `cancel` receives the raw `event` as its single parameter.\n     *\n     * `start` is called on either `mousedown`, `touchstart` or `pointerdown`. After this event, `$verticalSwipe` is\n     * watching for `touchmove`, `mousemove` or `pointermove` events. These events are ignored until the total\n     * distance moved in either dimension exceeds a small threshold.\n     *\n     * Once this threshold is exceeded, either the vertical or vertical delta is greater.\n     * - If the vertical distance is greater, this is a swipe and `move` and `end` events follow.\n     * - If the horizontal distance is greater, this is a scroll, and we let the browser take over.\n     *   A `cancel` event is sent.\n     *\n     * `move` is called on `mousemove`, `touchmove` and `pointermove` after the above logic has determined that\n     * a swipe is in progress.\n     *\n     * `end` is called when a swipe is successfully completed with a `touchend`, `mouseup` or `pointerup`.\n     *\n     * `cancel` is called either on a `touchcancel` or `pointercancel`  from the browser, or when we begin scrolling\n     * as described above.\n     *\n     */\n    bind(element, eventHandlers, pointerTypes) {\n      // Absolute total movement, used to control swipe vs. scroll.\n      let totalX, totalY;\n      // Coordinates of the start position.\n      let startCoords;\n      // Last event's position.\n      let lastPos;\n      // Whether a swipe is active.\n      let active = false;\n\n      pointerTypes = pointerTypes || ['mouse', 'touch', 'pointer'];\n      element.on(getEvents(pointerTypes, 'start'), (event) => {\n        startCoords = getCoordinates(event);\n        active = true;\n        totalX = 0;\n        totalY = 0;\n        lastPos = startCoords;\n        if (eventHandlers['start']) {\n          eventHandlers['start'](startCoords, event);\n        }\n      });\n      const events = getEvents(pointerTypes, 'cancel');\n      if (events) {\n        element.on(events, (event) => {\n          active = false;\n          if (eventHandlers['cancel']) {\n            eventHandlers['cancel'](event);\n          }\n        });\n      }\n\n      element.on(getEvents(pointerTypes, 'move'), (event) => {\n        if (!active) {\n          return;\n        }\n\n        // Android will send a touchcancel if it thinks we're starting to scroll.\n        // So when the total distance (+ or - or both) exceeds 10px in either direction,\n        // we either:\n        // - On totalX > totalY, we send preventDefault() and treat this as a swipe.\n        // - On totalY > totalX, we let the browser handle it as a scroll.\n\n        if (!startCoords) {\n          return;\n        }\n        const coords = getCoordinates(event);\n\n        totalX += Math.abs(coords.x - lastPos.x);\n        totalY += Math.abs(coords.y - lastPos.y);\n\n        lastPos = coords;\n\n        if (totalX < MOVE_BUFFER_RADIUS && totalY < MOVE_BUFFER_RADIUS) {\n          return;\n        }\n\n        // One of totalX or totalY has exceeded the buffer, so decide on swipe vs. scroll.\n        if (totalX > totalY) {\n          // Allow native scrolling to take over.\n          active = false;\n          if (eventHandlers['cancel']) {\n            eventHandlers['cancel'](event);\n          }\n          return;\n        } else {\n          // Prevent the browser from scrolling.\n          event.preventDefault();\n          if (eventHandlers['move']) {\n            eventHandlers['move'](coords, event);\n          }\n        }\n      });\n\n      element.on(getEvents(pointerTypes, 'end'), (event) => {\n        if (!active) {\n          return;\n        }\n        active = false;\n        if (eventHandlers['end']) {\n          eventHandlers['end'](getCoordinates(event), event);\n        }\n      });\n    }\n  };\n}]);\n\nexports.makeSwipeDirective_ = function(directiveName, direction, eventName) {\n  exports.directive(directiveName, ['$parse', '$verticalSwipe', function($parse, $verticalSwipe) {\n    // The maximum horizontal delta for a swipe should be less than 75px.\n    const MAX_HORIZONTAL_DISTANCE = 75;\n    // Horizontal distance should not be more than a fraction of the vertical distance.\n    const MAX_HORIZONTAL_RATIO = 0.3;\n    // At least a 30px lateral motion is necessary for a swipe.\n    const MIN_VERTICAL_DISTANCE = 30;\n\n    return function(scope, element, attr) {\n      const swipeHandler = $parse(attr[directiveName]);\n\n      let startCoords, valid;\n\n      function validSwipe(coords) {\n        // Check that it's within the coordinates.\n        // Absolute vertical distance must be within tolerances.\n        // Horizontal distance, we take the current X - the starting X.\n        // This is negative for downward swipes and positive for upward swipes.\n        // After multiplying by the direction (-1 for down, +1 for up), legal swipes\n        // (ie. same direction as the directive wants) will have a positive delta and\n        // illegal ones a negative delta.\n        // Therefore this delta must be positive, and larger than the minimum.\n        if (!startCoords) {\n          return false;\n        }\n        const deltaY = (coords.y - startCoords.y) * direction;\n        const deltaX = Math.abs(coords.x - startCoords.x);\n        return valid && // Short circuit for already-invalidated swipes.\n            deltaX < MAX_HORIZONTAL_DISTANCE &&\n            deltaY > 0 &&\n            deltaY > MIN_VERTICAL_DISTANCE &&\n            deltaX / deltaY < MAX_HORIZONTAL_RATIO;\n      }\n\n      const pointerTypes = ['touch'];\n      if (!angular.isDefined(attr['ngeoSwipeDisableMouse'])) {\n        pointerTypes.push('mouse');\n      }\n      $verticalSwipe.bind(element, {\n        'start': function(coords, event) {\n          startCoords = coords;\n          valid = true;\n        },\n        'cancel': function(event) {\n          valid = false;\n        },\n        'end': function(coords, event) {\n          if (validSwipe(coords)) {\n            scope.$apply(() => {\n              element.triggerHandler(eventName);\n              swipeHandler(scope, {$event: event});\n            });\n          }\n        }\n      }, pointerTypes);\n    };\n  }]);\n};\n\n// Down is negative Y-coordinate, up is positive.\nexports.makeSwipeDirective_('ngeoSwipeDown', 1, 'swipedown');\nexports.makeSwipeDirective_('ngeoSwipeUp', -1, 'swipeup');\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc/swipe.js","require('./angular-animate');\nmodule.exports = 'ngAnimate';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-animate/index.js\n// module id = 258\n// module chunks = 0 1","/**\n * @license AngularJS v1.6.9\n * (c) 2010-2018 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\nvar ELEMENT_NODE = 1;\nvar COMMENT_NODE = 8;\n\nvar ADD_CLASS_SUFFIX = '-add';\nvar REMOVE_CLASS_SUFFIX = '-remove';\nvar EVENT_CLASS_PREFIX = 'ng-';\nvar ACTIVE_CLASS_SUFFIX = '-active';\nvar PREPARE_CLASS_SUFFIX = '-prepare';\n\nvar NG_ANIMATE_CLASSNAME = 'ng-animate';\nvar NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';\n\n// Detect proper transitionend/animationend event names.\nvar CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;\n\n// If unprefixed events are not supported but webkit-prefixed are, use the latter.\n// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.\n// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`\n// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.\n// Register both events in case `window.onanimationend` is not supported because of that,\n// do the same for `transitionend` as Safari is likely to exhibit similar behavior.\n// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit\n// therefore there is no reason to test anymore for other vendor prefixes:\n// http://caniuse.com/#search=transition\nif ((window.ontransitionend === undefined) && (window.onwebkittransitionend !== undefined)) {\n  CSS_PREFIX = '-webkit-';\n  TRANSITION_PROP = 'WebkitTransition';\n  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';\n} else {\n  TRANSITION_PROP = 'transition';\n  TRANSITIONEND_EVENT = 'transitionend';\n}\n\nif ((window.onanimationend === undefined) && (window.onwebkitanimationend !== undefined)) {\n  CSS_PREFIX = '-webkit-';\n  ANIMATION_PROP = 'WebkitAnimation';\n  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';\n} else {\n  ANIMATION_PROP = 'animation';\n  ANIMATIONEND_EVENT = 'animationend';\n}\n\nvar DURATION_KEY = 'Duration';\nvar PROPERTY_KEY = 'Property';\nvar DELAY_KEY = 'Delay';\nvar TIMING_KEY = 'TimingFunction';\nvar ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';\nvar ANIMATION_PLAYSTATE_KEY = 'PlayState';\nvar SAFE_FAST_FORWARD_DURATION_VALUE = 9999;\n\nvar ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;\nvar ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;\nvar TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;\nvar TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;\n\nvar ngMinErr = angular.$$minErr('ng');\nfunction assertArg(arg, name, reason) {\n  if (!arg) {\n    throw ngMinErr('areq', 'Argument \\'{0}\\' is {1}', (name || '?'), (reason || 'required'));\n  }\n  return arg;\n}\n\nfunction mergeClasses(a,b) {\n  if (!a && !b) return '';\n  if (!a) return b;\n  if (!b) return a;\n  if (isArray(a)) a = a.join(' ');\n  if (isArray(b)) b = b.join(' ');\n  return a + ' ' + b;\n}\n\nfunction packageStyles(options) {\n  var styles = {};\n  if (options && (options.to || options.from)) {\n    styles.to = options.to;\n    styles.from = options.from;\n  }\n  return styles;\n}\n\nfunction pendClasses(classes, fix, isPrefix) {\n  var className = '';\n  classes = isArray(classes)\n      ? classes\n      : classes && isString(classes) && classes.length\n          ? classes.split(/\\s+/)\n          : [];\n  forEach(classes, function(klass, i) {\n    if (klass && klass.length > 0) {\n      className += (i > 0) ? ' ' : '';\n      className += isPrefix ? fix + klass\n                            : klass + fix;\n    }\n  });\n  return className;\n}\n\nfunction removeFromArray(arr, val) {\n  var index = arr.indexOf(val);\n  if (val >= 0) {\n    arr.splice(index, 1);\n  }\n}\n\nfunction stripCommentsFromElement(element) {\n  if (element instanceof jqLite) {\n    switch (element.length) {\n      case 0:\n        return element;\n\n      case 1:\n        // there is no point of stripping anything if the element\n        // is the only element within the jqLite wrapper.\n        // (it's important that we retain the element instance.)\n        if (element[0].nodeType === ELEMENT_NODE) {\n          return element;\n        }\n        break;\n\n      default:\n        return jqLite(extractElementNode(element));\n    }\n  }\n\n  if (element.nodeType === ELEMENT_NODE) {\n    return jqLite(element);\n  }\n}\n\nfunction extractElementNode(element) {\n  if (!element[0]) return element;\n  for (var i = 0; i < element.length; i++) {\n    var elm = element[i];\n    if (elm.nodeType === ELEMENT_NODE) {\n      return elm;\n    }\n  }\n}\n\nfunction $$addClass($$jqLite, element, className) {\n  forEach(element, function(elm) {\n    $$jqLite.addClass(elm, className);\n  });\n}\n\nfunction $$removeClass($$jqLite, element, className) {\n  forEach(element, function(elm) {\n    $$jqLite.removeClass(elm, className);\n  });\n}\n\nfunction applyAnimationClassesFactory($$jqLite) {\n  return function(element, options) {\n    if (options.addClass) {\n      $$addClass($$jqLite, element, options.addClass);\n      options.addClass = null;\n    }\n    if (options.removeClass) {\n      $$removeClass($$jqLite, element, options.removeClass);\n      options.removeClass = null;\n    }\n  };\n}\n\nfunction prepareAnimationOptions(options) {\n  options = options || {};\n  if (!options.$$prepared) {\n    var domOperation = options.domOperation || noop;\n    options.domOperation = function() {\n      options.$$domOperationFired = true;\n      domOperation();\n      domOperation = noop;\n    };\n    options.$$prepared = true;\n  }\n  return options;\n}\n\nfunction applyAnimationStyles(element, options) {\n  applyAnimationFromStyles(element, options);\n  applyAnimationToStyles(element, options);\n}\n\nfunction applyAnimationFromStyles(element, options) {\n  if (options.from) {\n    element.css(options.from);\n    options.from = null;\n  }\n}\n\nfunction applyAnimationToStyles(element, options) {\n  if (options.to) {\n    element.css(options.to);\n    options.to = null;\n  }\n}\n\nfunction mergeAnimationDetails(element, oldAnimation, newAnimation) {\n  var target = oldAnimation.options || {};\n  var newOptions = newAnimation.options || {};\n\n  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');\n  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');\n  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);\n\n  if (newOptions.preparationClasses) {\n    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);\n    delete newOptions.preparationClasses;\n  }\n\n  // noop is basically when there is no callback; otherwise something has been set\n  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;\n\n  extend(target, newOptions);\n\n  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.\n  if (realDomOperation) {\n    target.domOperation = realDomOperation;\n  }\n\n  if (classes.addClass) {\n    target.addClass = classes.addClass;\n  } else {\n    target.addClass = null;\n  }\n\n  if (classes.removeClass) {\n    target.removeClass = classes.removeClass;\n  } else {\n    target.removeClass = null;\n  }\n\n  oldAnimation.addClass = target.addClass;\n  oldAnimation.removeClass = target.removeClass;\n\n  return target;\n}\n\nfunction resolveElementClasses(existing, toAdd, toRemove) {\n  var ADD_CLASS = 1;\n  var REMOVE_CLASS = -1;\n\n  var flags = {};\n  existing = splitClassesToLookup(existing);\n\n  toAdd = splitClassesToLookup(toAdd);\n  forEach(toAdd, function(value, key) {\n    flags[key] = ADD_CLASS;\n  });\n\n  toRemove = splitClassesToLookup(toRemove);\n  forEach(toRemove, function(value, key) {\n    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;\n  });\n\n  var classes = {\n    addClass: '',\n    removeClass: ''\n  };\n\n  forEach(flags, function(val, klass) {\n    var prop, allow;\n    if (val === ADD_CLASS) {\n      prop = 'addClass';\n      allow = !existing[klass] || existing[klass + REMOVE_CLASS_SUFFIX];\n    } else if (val === REMOVE_CLASS) {\n      prop = 'removeClass';\n      allow = existing[klass] || existing[klass + ADD_CLASS_SUFFIX];\n    }\n    if (allow) {\n      if (classes[prop].length) {\n        classes[prop] += ' ';\n      }\n      classes[prop] += klass;\n    }\n  });\n\n  function splitClassesToLookup(classes) {\n    if (isString(classes)) {\n      classes = classes.split(' ');\n    }\n\n    var obj = {};\n    forEach(classes, function(klass) {\n      // sometimes the split leaves empty string values\n      // incase extra spaces were applied to the options\n      if (klass.length) {\n        obj[klass] = true;\n      }\n    });\n    return obj;\n  }\n\n  return classes;\n}\n\nfunction getDomNode(element) {\n  return (element instanceof jqLite) ? element[0] : element;\n}\n\nfunction applyGeneratedPreparationClasses(element, event, options) {\n  var classes = '';\n  if (event) {\n    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);\n  }\n  if (options.addClass) {\n    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));\n  }\n  if (options.removeClass) {\n    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));\n  }\n  if (classes.length) {\n    options.preparationClasses = classes;\n    element.addClass(classes);\n  }\n}\n\nfunction clearGeneratedClasses(element, options) {\n  if (options.preparationClasses) {\n    element.removeClass(options.preparationClasses);\n    options.preparationClasses = null;\n  }\n  if (options.activeClasses) {\n    element.removeClass(options.activeClasses);\n    options.activeClasses = null;\n  }\n}\n\nfunction blockTransitions(node, duration) {\n  // we use a negative delay value since it performs blocking\n  // yet it doesn't kill any existing transitions running on the\n  // same element which makes this safe for class-based animations\n  var value = duration ? '-' + duration + 's' : '';\n  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);\n  return [TRANSITION_DELAY_PROP, value];\n}\n\nfunction blockKeyframeAnimations(node, applyBlock) {\n  var value = applyBlock ? 'paused' : '';\n  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;\n  applyInlineStyle(node, [key, value]);\n  return [key, value];\n}\n\nfunction applyInlineStyle(node, styleTuple) {\n  var prop = styleTuple[0];\n  var value = styleTuple[1];\n  node.style[prop] = value;\n}\n\nfunction concatWithSpace(a,b) {\n  if (!a) return b;\n  if (!b) return a;\n  return a + ' ' + b;\n}\n\nvar $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {\n  var queue, cancelFn;\n\n  function scheduler(tasks) {\n    // we make a copy since RAFScheduler mutates the state\n    // of the passed in array variable and this would be difficult\n    // to track down on the outside code\n    queue = queue.concat(tasks);\n    nextTick();\n  }\n\n  queue = scheduler.queue = [];\n\n  /* waitUntilQuiet does two things:\n   * 1. It will run the FINAL `fn` value only when an uncanceled RAF has passed through\n   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.\n   *\n   * The motivation here is that animation code can request more time from the scheduler\n   * before the next wave runs. This allows for certain DOM properties such as classes to\n   * be resolved in time for the next animation to run.\n   */\n  scheduler.waitUntilQuiet = function(fn) {\n    if (cancelFn) cancelFn();\n\n    cancelFn = $$rAF(function() {\n      cancelFn = null;\n      fn();\n      nextTick();\n    });\n  };\n\n  return scheduler;\n\n  function nextTick() {\n    if (!queue.length) return;\n\n    var items = queue.shift();\n    for (var i = 0; i < items.length; i++) {\n      items[i]();\n    }\n\n    if (!cancelFn) {\n      $$rAF(function() {\n        if (!cancelFn) nextTick();\n      });\n    }\n  }\n}];\n\n/**\n * @ngdoc directive\n * @name ngAnimateChildren\n * @restrict AE\n * @element ANY\n *\n * @description\n *\n * ngAnimateChildren allows you to specify that children of this element should animate even if any\n * of the children's parents are currently animating. By default, when an element has an active `enter`, `leave`, or `move`\n * (structural) animation, child elements that also have an active structural animation are not animated.\n *\n * Note that even if `ngAnimateChildren` is set, no child animations will run when the parent element is removed from the DOM (`leave` animation).\n *\n *\n * @param {string} ngAnimateChildren If the value is empty, `true` or `on`,\n *     then child animations are allowed. If the value is `false`, child animations are not allowed.\n *\n * @example\n * <example module=\"ngAnimateChildren\" name=\"ngAnimateChildren\" deps=\"angular-animate.js\" animations=\"true\">\n     <file name=\"index.html\">\n       <div ng-controller=\"MainController as main\">\n         <label>Show container? <input type=\"checkbox\" ng-model=\"main.enterElement\" /></label>\n         <label>Animate children? <input type=\"checkbox\" ng-model=\"main.animateChildren\" /></label>\n         <hr>\n         <div ng-animate-children=\"{{main.animateChildren}}\">\n           <div ng-if=\"main.enterElement\" class=\"container\">\n             List of items:\n             <div ng-repeat=\"item in [0, 1, 2, 3]\" class=\"item\">Item {{item}}</div>\n           </div>\n         </div>\n       </div>\n     </file>\n     <file name=\"animations.css\">\n\n      .container.ng-enter,\n      .container.ng-leave {\n        transition: all ease 1.5s;\n      }\n\n      .container.ng-enter,\n      .container.ng-leave-active {\n        opacity: 0;\n      }\n\n      .container.ng-leave,\n      .container.ng-enter-active {\n        opacity: 1;\n      }\n\n      .item {\n        background: firebrick;\n        color: #FFF;\n        margin-bottom: 10px;\n      }\n\n      .item.ng-enter,\n      .item.ng-leave {\n        transition: transform 1.5s ease;\n      }\n\n      .item.ng-enter {\n        transform: translateX(50px);\n      }\n\n      .item.ng-enter-active {\n        transform: translateX(0);\n      }\n    </file>\n    <file name=\"script.js\">\n      angular.module('ngAnimateChildren', ['ngAnimate'])\n        .controller('MainController', function MainController() {\n          this.animateChildren = false;\n          this.enterElement = false;\n        });\n    </file>\n  </example>\n */\nvar $$AnimateChildrenDirective = ['$interpolate', function($interpolate) {\n  return {\n    link: function(scope, element, attrs) {\n      var val = attrs.ngAnimateChildren;\n      if (isString(val) && val.length === 0) { //empty attribute\n        element.data(NG_ANIMATE_CHILDREN_DATA, true);\n      } else {\n        // Interpolate and set the value, so that it is available to\n        // animations that run right after compilation\n        setData($interpolate(val)(scope));\n        attrs.$observe('ngAnimateChildren', setData);\n      }\n\n      function setData(value) {\n        value = value === 'on' || value === 'true';\n        element.data(NG_ANIMATE_CHILDREN_DATA, value);\n      }\n    }\n  };\n}];\n\n/* exported $AnimateCssProvider */\n\nvar ANIMATE_TIMER_KEY = '$$animateCss';\n\n/**\n * @ngdoc service\n * @name $animateCss\n * @kind object\n *\n * @description\n * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes\n * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT\n * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or\n * directives to create more complex animations that can be purely driven using CSS code.\n *\n * Note that only browsers that support CSS transitions and/or keyframe animations are capable of\n * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).\n *\n * ## General Use\n * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that\n * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,\n * any automatic control over cancelling animations and/or preventing animations from being run on\n * child elements will not be handled by AngularJS. For this to work as expected, please use `$animate` to\n * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger\n * the CSS animation.\n *\n * The example below shows how we can create a folding animation on an element using `ng-if`:\n *\n * ```html\n * <!-- notice the `fold-animation` CSS class -->\n * <div ng-if=\"onOff\" class=\"fold-animation\">\n *   This element will go BOOM\n * </div>\n * <button ng-click=\"onOff=true\">Fold In</button>\n * ```\n *\n * Now we create the **JavaScript animation** that will trigger the CSS transition:\n *\n * ```js\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element, doneFn) {\n *       var height = element[0].offsetHeight;\n *       return $animateCss(element, {\n *         from: { height:'0px' },\n *         to: { height:height + 'px' },\n *         duration: 1 // one second\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * ## More Advanced Uses\n *\n * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks\n * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.\n *\n * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,\n * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with\n * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order\n * to provide a working animation that will run in CSS.\n *\n * The example below showcases a more advanced version of the `.fold-animation` from the example above:\n *\n * ```js\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element, doneFn) {\n *       var height = element[0].offsetHeight;\n *       return $animateCss(element, {\n *         addClass: 'red large-text pulse-twice',\n *         easing: 'ease-out',\n *         from: { height:'0px' },\n *         to: { height:height + 'px' },\n *         duration: 1 // one second\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * Since we're adding/removing CSS classes then the CSS transition will also pick those up:\n *\n * ```css\n * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,\n * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/\n * .red { background:red; }\n * .large-text { font-size:20px; }\n *\n * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/\n * .pulse-twice {\n *   animation: 0.5s pulse linear 2;\n *   -webkit-animation: 0.5s pulse linear 2;\n * }\n *\n * @keyframes pulse {\n *   from { transform: scale(0.5); }\n *   to { transform: scale(1.5); }\n * }\n *\n * @-webkit-keyframes pulse {\n *   from { -webkit-transform: scale(0.5); }\n *   to { -webkit-transform: scale(1.5); }\n * }\n * ```\n *\n * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.\n *\n * ## How the Options are handled\n *\n * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation\n * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline\n * styles using the `from` and `to` properties.\n *\n * ```js\n * var animator = $animateCss(element, {\n *   from: { background:'red' },\n *   to: { background:'blue' }\n * });\n * animator.start();\n * ```\n *\n * ```css\n * .rotating-animation {\n *   animation:0.5s rotate linear;\n *   -webkit-animation:0.5s rotate linear;\n * }\n *\n * @keyframes rotate {\n *   from { transform: rotate(0deg); }\n *   to { transform: rotate(360deg); }\n * }\n *\n * @-webkit-keyframes rotate {\n *   from { -webkit-transform: rotate(0deg); }\n *   to { -webkit-transform: rotate(360deg); }\n * }\n * ```\n *\n * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is\n * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition\n * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition\n * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied\n * and spread across the transition and keyframe animation.\n *\n * ## What is returned\n *\n * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually\n * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are\n * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:\n *\n * ```js\n * var animator = $animateCss(element, { ... });\n * ```\n *\n * Now what do the contents of our `animator` variable look like:\n *\n * ```js\n * {\n *   // starts the animation\n *   start: Function,\n *\n *   // ends (aborts) the animation\n *   end: Function\n * }\n * ```\n *\n * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.\n * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and styles may have been\n * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties\n * and that changing them will not reconfigure the parameters of the animation.\n *\n * ### runner.done() vs runner.then()\n * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the\n * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.\n * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`\n * unless you really need a digest to kick off afterwards.\n *\n * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss\n * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).\n * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.\n *\n * @param {DOMElement} element the element that will be animated\n * @param {object} options the animation-related options that will be applied during the animation\n *\n * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied\n * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)\n * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and\n * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.\n * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).\n * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).\n * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).\n * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.\n * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.\n * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.\n * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.\n * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`\n * is provided then the animation will be skipped entirely.\n * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is\n * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value\n * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same\n * CSS delay value.\n * * `stagger` - A numeric time value representing the delay between successively animated elements\n * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})\n * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a\n *   `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)\n * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occurring on the classes being added and removed.)\n * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once\n *    the animation is closed. This is useful for when the styles are used purely for the sake of\n *    the animation and do not have a lasting visual effect on the element (e.g. a collapse and open animation).\n *    By default this value is set to `false`.\n *\n * @return {object} an object with start and end methods and details about the animation.\n *\n * * `start` - The method to start the animation. This will return a `Promise` when called.\n * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.\n */\nvar ONE_SECOND = 1000;\n\nvar ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\nvar CLOSING_TIME_BUFFER = 1.5;\n\nvar DETECT_CSS_PROPERTIES = {\n  transitionDuration:      TRANSITION_DURATION_PROP,\n  transitionDelay:         TRANSITION_DELAY_PROP,\n  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,\n  animationDuration:       ANIMATION_DURATION_PROP,\n  animationDelay:          ANIMATION_DELAY_PROP,\n  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY\n};\n\nvar DETECT_STAGGER_CSS_PROPERTIES = {\n  transitionDuration:      TRANSITION_DURATION_PROP,\n  transitionDelay:         TRANSITION_DELAY_PROP,\n  animationDuration:       ANIMATION_DURATION_PROP,\n  animationDelay:          ANIMATION_DELAY_PROP\n};\n\nfunction getCssKeyframeDurationStyle(duration) {\n  return [ANIMATION_DURATION_PROP, duration + 's'];\n}\n\nfunction getCssDelayStyle(delay, isKeyframeAnimation) {\n  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;\n  return [prop, delay + 's'];\n}\n\nfunction computeCssStyles($window, element, properties) {\n  var styles = Object.create(null);\n  var detectedStyles = $window.getComputedStyle(element) || {};\n  forEach(properties, function(formalStyleName, actualStyleName) {\n    var val = detectedStyles[formalStyleName];\n    if (val) {\n      var c = val.charAt(0);\n\n      // only numerical-based values have a negative sign or digit as the first value\n      if (c === '-' || c === '+' || c >= 0) {\n        val = parseMaxTime(val);\n      }\n\n      // by setting this to null in the event that the delay is not set or is set directly as 0\n      // then we can still allow for negative values to be used later on and not mistake this\n      // value for being greater than any other negative value.\n      if (val === 0) {\n        val = null;\n      }\n      styles[actualStyleName] = val;\n    }\n  });\n\n  return styles;\n}\n\nfunction parseMaxTime(str) {\n  var maxValue = 0;\n  var values = str.split(/\\s*,\\s*/);\n  forEach(values, function(value) {\n    // it's always safe to consider only second values and omit `ms` values since\n    // getComputedStyle will always handle the conversion for us\n    if (value.charAt(value.length - 1) === 's') {\n      value = value.substring(0, value.length - 1);\n    }\n    value = parseFloat(value) || 0;\n    maxValue = maxValue ? Math.max(value, maxValue) : value;\n  });\n  return maxValue;\n}\n\nfunction truthyTimingValue(val) {\n  return val === 0 || val != null;\n}\n\nfunction getCssTransitionDurationStyle(duration, applyOnlyDuration) {\n  var style = TRANSITION_PROP;\n  var value = duration + 's';\n  if (applyOnlyDuration) {\n    style += DURATION_KEY;\n  } else {\n    value += ' linear all';\n  }\n  return [style, value];\n}\n\nfunction createLocalCacheLookup() {\n  var cache = Object.create(null);\n  return {\n    flush: function() {\n      cache = Object.create(null);\n    },\n\n    count: function(key) {\n      var entry = cache[key];\n      return entry ? entry.total : 0;\n    },\n\n    get: function(key) {\n      var entry = cache[key];\n      return entry && entry.value;\n    },\n\n    put: function(key, value) {\n      if (!cache[key]) {\n        cache[key] = { total: 1, value: value };\n      } else {\n        cache[key].total++;\n      }\n    }\n  };\n}\n\n// we do not reassign an already present style value since\n// if we detect the style property value again we may be\n// detecting styles that were added via the `from` styles.\n// We make use of `isDefined` here since an empty string\n// or null value (which is what getPropertyValue will return\n// for a non-existing style) will still be marked as a valid\n// value for the style (a falsy value implies that the style\n// is to be removed at the end of the animation). If we had a simple\n// \"OR\" statement then it would not be enough to catch that.\nfunction registerRestorableStyles(backup, node, properties) {\n  forEach(properties, function(prop) {\n    backup[prop] = isDefined(backup[prop])\n        ? backup[prop]\n        : node.style.getPropertyValue(prop);\n  });\n}\n\nvar $AnimateCssProvider = ['$animateProvider', /** @this */ function($animateProvider) {\n  var gcsLookup = createLocalCacheLookup();\n  var gcsStaggerLookup = createLocalCacheLookup();\n\n  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',\n               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$$animateQueue',\n       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,\n                $$forceReflow,   $sniffer,   $$rAFScheduler, $$animateQueue) {\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    var parentCounter = 0;\n    function gcsHashFn(node, extraClasses) {\n      var KEY = '$$ngAnimateParentKey';\n      var parentNode = node.parentNode;\n      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);\n      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;\n    }\n\n    function computeCachedCssStyles(node, className, cacheKey, properties) {\n      var timings = gcsLookup.get(cacheKey);\n\n      if (!timings) {\n        timings = computeCssStyles($window, node, properties);\n        if (timings.animationIterationCount === 'infinite') {\n          timings.animationIterationCount = 1;\n        }\n      }\n\n      // we keep putting this in multiple times even though the value and the cacheKey are the same\n      // because we're keeping an internal tally of how many duplicate animations are detected.\n      gcsLookup.put(cacheKey, timings);\n      return timings;\n    }\n\n    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {\n      var stagger;\n\n      // if we have one or more existing matches of matching elements\n      // containing the same parent + CSS styles (which is how cacheKey works)\n      // then staggering is possible\n      if (gcsLookup.count(cacheKey) > 0) {\n        stagger = gcsStaggerLookup.get(cacheKey);\n\n        if (!stagger) {\n          var staggerClassName = pendClasses(className, '-stagger');\n\n          $$jqLite.addClass(node, staggerClassName);\n\n          stagger = computeCssStyles($window, node, properties);\n\n          // force the conversion of a null value to zero incase not set\n          stagger.animationDuration = Math.max(stagger.animationDuration, 0);\n          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);\n\n          $$jqLite.removeClass(node, staggerClassName);\n\n          gcsStaggerLookup.put(cacheKey, stagger);\n        }\n      }\n\n      return stagger || {};\n    }\n\n    var rafWaitQueue = [];\n    function waitUntilQuiet(callback) {\n      rafWaitQueue.push(callback);\n      $$rAFScheduler.waitUntilQuiet(function() {\n        gcsLookup.flush();\n        gcsStaggerLookup.flush();\n\n        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.\n        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.\n        var pageWidth = $$forceReflow();\n\n        // we use a for loop to ensure that if the queue is changed\n        // during this looping then it will consider new requests\n        for (var i = 0; i < rafWaitQueue.length; i++) {\n          rafWaitQueue[i](pageWidth);\n        }\n        rafWaitQueue.length = 0;\n      });\n    }\n\n    function computeTimings(node, className, cacheKey) {\n      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);\n      var aD = timings.animationDelay;\n      var tD = timings.transitionDelay;\n      timings.maxDelay = aD && tD\n          ? Math.max(aD, tD)\n          : (aD || tD);\n      timings.maxDuration = Math.max(\n          timings.animationDuration * timings.animationIterationCount,\n          timings.transitionDuration);\n\n      return timings;\n    }\n\n    return function init(element, initialOptions) {\n      // all of the animation functions should create\n      // a copy of the options data, however, if a\n      // parent service has already created a copy then\n      // we should stick to using that\n      var options = initialOptions || {};\n      if (!options.$$prepared) {\n        options = prepareAnimationOptions(copy(options));\n      }\n\n      var restoreStyles = {};\n      var node = getDomNode(element);\n      if (!node\n          || !node.parentNode\n          || !$$animateQueue.enabled()) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var temporaryStyles = [];\n      var classes = element.attr('class');\n      var styles = packageStyles(options);\n      var animationClosed;\n      var animationPaused;\n      var animationCompleted;\n      var runner;\n      var runnerHost;\n      var maxDelay;\n      var maxDelayTime;\n      var maxDuration;\n      var maxDurationTime;\n      var startTime;\n      var events = [];\n\n      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var method = options.event && isArray(options.event)\n            ? options.event.join(' ')\n            : options.event;\n\n      var isStructural = method && options.structural;\n      var structuralClassName = '';\n      var addRemoveClassName = '';\n\n      if (isStructural) {\n        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);\n      } else if (method) {\n        structuralClassName = method;\n      }\n\n      if (options.addClass) {\n        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);\n      }\n\n      if (options.removeClass) {\n        if (addRemoveClassName.length) {\n          addRemoveClassName += ' ';\n        }\n        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);\n      }\n\n      // there may be a situation where a structural animation is combined together\n      // with CSS classes that need to resolve before the animation is computed.\n      // However this means that there is no explicit CSS code to block the animation\n      // from happening (by setting 0s none in the class name). If this is the case\n      // we need to apply the classes before the first rAF so we know to continue if\n      // there actually is a detected transition or keyframe animation\n      if (options.applyClassesEarly && addRemoveClassName.length) {\n        applyAnimationClasses(element, options);\n      }\n\n      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();\n      var fullClassName = classes + ' ' + preparationClasses;\n      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);\n      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;\n      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;\n\n      // there is no way we can trigger an animation if no styles and\n      // no classes are being applied which would then trigger a transition,\n      // unless there a is raw keyframe value that is applied to the element.\n      if (!containsKeyframeAnimation\n           && !hasToStyles\n           && !preparationClasses) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var cacheKey, stagger;\n      if (options.stagger > 0) {\n        var staggerVal = parseFloat(options.stagger);\n        stagger = {\n          transitionDelay: staggerVal,\n          animationDelay: staggerVal,\n          transitionDuration: 0,\n          animationDuration: 0\n        };\n      } else {\n        cacheKey = gcsHashFn(node, fullClassName);\n        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);\n      }\n\n      if (!options.$$skipPreparationClasses) {\n        $$jqLite.addClass(element, preparationClasses);\n      }\n\n      var applyOnlyDuration;\n\n      if (options.transitionStyle) {\n        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];\n        applyInlineStyle(node, transitionStyle);\n        temporaryStyles.push(transitionStyle);\n      }\n\n      if (options.duration >= 0) {\n        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;\n        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);\n\n        // we set the duration so that it will be picked up by getComputedStyle later\n        applyInlineStyle(node, durationStyle);\n        temporaryStyles.push(durationStyle);\n      }\n\n      if (options.keyframeStyle) {\n        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];\n        applyInlineStyle(node, keyframeStyle);\n        temporaryStyles.push(keyframeStyle);\n      }\n\n      var itemIndex = stagger\n          ? options.staggerIndex >= 0\n              ? options.staggerIndex\n              : gcsLookup.count(cacheKey)\n          : 0;\n\n      var isFirst = itemIndex === 0;\n\n      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY\n      // without causing any combination of transitions to kick in. By adding a negative delay value\n      // it forces the setup class' transition to end immediately. We later then remove the negative\n      // transition delay to allow for the transition to naturally do it's thing. The beauty here is\n      // that if there is no transition defined then nothing will happen and this will also allow\n      // other transitions to be stacked on top of each other without any chopping them out.\n      if (isFirst && !options.skipBlocking) {\n        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);\n      }\n\n      var timings = computeTimings(node, fullClassName, cacheKey);\n      var relativeDelay = timings.maxDelay;\n      maxDelay = Math.max(relativeDelay, 0);\n      maxDuration = timings.maxDuration;\n\n      var flags = {};\n      flags.hasTransitions          = timings.transitionDuration > 0;\n      flags.hasAnimations           = timings.animationDuration > 0;\n      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty === 'all';\n      flags.applyTransitionDuration = hasToStyles && (\n                                        (flags.hasTransitions && !flags.hasTransitionAll)\n                                         || (flags.hasAnimations && !flags.hasTransitions));\n      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;\n      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);\n      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;\n      flags.recalculateTimingStyles = addRemoveClassName.length > 0;\n\n      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {\n        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;\n\n        if (flags.applyTransitionDuration) {\n          flags.hasTransitions = true;\n          timings.transitionDuration = maxDuration;\n          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;\n          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));\n        }\n\n        if (flags.applyAnimationDuration) {\n          flags.hasAnimations = true;\n          timings.animationDuration = maxDuration;\n          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));\n        }\n      }\n\n      if (maxDuration === 0 && !flags.recalculateTimingStyles) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      if (options.delay != null) {\n        var delayStyle;\n        if (typeof options.delay !== 'boolean') {\n          delayStyle = parseFloat(options.delay);\n          // number in options.delay means we have to recalculate the delay for the closing timeout\n          maxDelay = Math.max(delayStyle, 0);\n        }\n\n        if (flags.applyTransitionDelay) {\n          temporaryStyles.push(getCssDelayStyle(delayStyle));\n        }\n\n        if (flags.applyAnimationDelay) {\n          temporaryStyles.push(getCssDelayStyle(delayStyle, true));\n        }\n      }\n\n      // we need to recalculate the delay value since we used a pre-emptive negative\n      // delay value and the delay value is required for the final event checking. This\n      // property will ensure that this will happen after the RAF phase has passed.\n      if (options.duration == null && timings.transitionDuration > 0) {\n        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;\n      }\n\n      maxDelayTime = maxDelay * ONE_SECOND;\n      maxDurationTime = maxDuration * ONE_SECOND;\n      if (!options.skipBlocking) {\n        flags.blockTransition = timings.transitionDuration > 0;\n        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&\n                                       stagger.animationDelay > 0 &&\n                                       stagger.animationDuration === 0;\n      }\n\n      if (options.from) {\n        if (options.cleanupStyles) {\n          registerRestorableStyles(restoreStyles, node, Object.keys(options.from));\n        }\n        applyAnimationFromStyles(element, options);\n      }\n\n      if (flags.blockTransition || flags.blockKeyframeAnimation) {\n        applyBlocking(maxDuration);\n      } else if (!options.skipBlocking) {\n        blockTransitions(node, false);\n      }\n\n      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging\n      return {\n        $$willAnimate: true,\n        end: endFn,\n        start: function() {\n          if (animationClosed) return;\n\n          runnerHost = {\n            end: endFn,\n            cancel: cancelFn,\n            resume: null, //this will be set during the start() phase\n            pause: null\n          };\n\n          runner = new $$AnimateRunner(runnerHost);\n\n          waitUntilQuiet(start);\n\n          // we don't have access to pause/resume the animation\n          // since it hasn't run yet. AnimateRunner will therefore\n          // set noop functions for resume and pause and they will\n          // later be overridden once the animation is triggered\n          return runner;\n        }\n      };\n\n      function endFn() {\n        close();\n      }\n\n      function cancelFn() {\n        close(true);\n      }\n\n      function close(rejected) {\n        // if the promise has been called already then we shouldn't close\n        // the animation again\n        if (animationClosed || (animationCompleted && animationPaused)) return;\n        animationClosed = true;\n        animationPaused = false;\n\n        if (!options.$$skipPreparationClasses) {\n          $$jqLite.removeClass(element, preparationClasses);\n        }\n        $$jqLite.removeClass(element, activeClasses);\n\n        blockKeyframeAnimations(node, false);\n        blockTransitions(node, false);\n\n        forEach(temporaryStyles, function(entry) {\n          // There is only one way to remove inline style properties entirely from elements.\n          // By using `removeProperty` this works, but we need to convert camel-cased CSS\n          // styles down to hyphenated values.\n          node.style[entry[0]] = '';\n        });\n\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n\n        if (Object.keys(restoreStyles).length) {\n          forEach(restoreStyles, function(value, prop) {\n            if (value) {\n              node.style.setProperty(prop, value);\n            } else {\n              node.style.removeProperty(prop);\n            }\n          });\n        }\n\n        // the reason why we have this option is to allow a synchronous closing callback\n        // that is fired as SOON as the animation ends (when the CSS is removed) or if\n        // the animation never takes off at all. A good example is a leave animation since\n        // the element must be removed just after the animation is over or else the element\n        // will appear on screen for one animation frame causing an overbearing flicker.\n        if (options.onDone) {\n          options.onDone();\n        }\n\n        if (events && events.length) {\n          // Remove the transitionend / animationend listener(s)\n          element.off(events.join(' '), onAnimationProgress);\n        }\n\n        //Cancel the fallback closing timeout and remove the timer data\n        var animationTimerData = element.data(ANIMATE_TIMER_KEY);\n        if (animationTimerData) {\n          $timeout.cancel(animationTimerData[0].timer);\n          element.removeData(ANIMATE_TIMER_KEY);\n        }\n\n        // if the preparation function fails then the promise is not setup\n        if (runner) {\n          runner.complete(!rejected);\n        }\n      }\n\n      function applyBlocking(duration) {\n        if (flags.blockTransition) {\n          blockTransitions(node, duration);\n        }\n\n        if (flags.blockKeyframeAnimation) {\n          blockKeyframeAnimations(node, !!duration);\n        }\n      }\n\n      function closeAndReturnNoopAnimator() {\n        runner = new $$AnimateRunner({\n          end: endFn,\n          cancel: cancelFn\n        });\n\n        // should flush the cache animation\n        waitUntilQuiet(noop);\n        close();\n\n        return {\n          $$willAnimate: false,\n          start: function() {\n            return runner;\n          },\n          end: endFn\n        };\n      }\n\n      function onAnimationProgress(event) {\n        event.stopPropagation();\n        var ev = event.originalEvent || event;\n\n        if (ev.target !== node) {\n          // Since TransitionEvent / AnimationEvent bubble up,\n          // we have to ignore events by finished child animations\n          return;\n        }\n\n        // we now always use `Date.now()` due to the recent changes with\n        // event.timeStamp in Firefox, Webkit and Chrome (see #13494 for more info)\n        var timeStamp = ev.$manualTimeStamp || Date.now();\n\n        /* Firefox (or possibly just Gecko) likes to not round values up\n         * when a ms measurement is used for the animation */\n        var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));\n\n        /* $manualTimeStamp is a mocked timeStamp value which is set\n         * within browserTrigger(). This is only here so that tests can\n         * mock animations properly. Real events fallback to event.timeStamp,\n         * or, if they don't, then a timeStamp is automatically created for them.\n         * We're checking to see if the timeStamp surpasses the expected delay,\n         * but we're using elapsedTime instead of the timeStamp on the 2nd\n         * pre-condition since animationPauseds sometimes close off early */\n        if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {\n          // we set this flag to ensure that if the transition is paused then, when resumed,\n          // the animation will automatically close itself since transitions cannot be paused.\n          animationCompleted = true;\n          close();\n        }\n      }\n\n      function start() {\n        if (animationClosed) return;\n        if (!node.parentNode) {\n          close();\n          return;\n        }\n\n        // even though we only pause keyframe animations here the pause flag\n        // will still happen when transitions are used. Only the transition will\n        // not be paused since that is not possible. If the animation ends when\n        // paused then it will not complete until unpaused or cancelled.\n        var playPause = function(playAnimation) {\n          if (!animationCompleted) {\n            animationPaused = !playAnimation;\n            if (timings.animationDuration) {\n              var value = blockKeyframeAnimations(node, animationPaused);\n              if (animationPaused) {\n                temporaryStyles.push(value);\n              } else {\n                removeFromArray(temporaryStyles, value);\n              }\n            }\n          } else if (animationPaused && playAnimation) {\n            animationPaused = false;\n            close();\n          }\n        };\n\n        // checking the stagger duration prevents an accidentally cascade of the CSS delay style\n        // being inherited from the parent. If the transition duration is zero then we can safely\n        // rely that the delay value is an intentional stagger delay style.\n        var maxStagger = itemIndex > 0\n                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||\n                            (timings.animationDuration && stagger.animationDuration === 0))\n                         && Math.max(stagger.animationDelay, stagger.transitionDelay);\n        if (maxStagger) {\n          $timeout(triggerAnimationStart,\n                   Math.floor(maxStagger * itemIndex * ONE_SECOND),\n                   false);\n        } else {\n          triggerAnimationStart();\n        }\n\n        // this will decorate the existing promise runner with pause/resume methods\n        runnerHost.resume = function() {\n          playPause(true);\n        };\n\n        runnerHost.pause = function() {\n          playPause(false);\n        };\n\n        function triggerAnimationStart() {\n          // just incase a stagger animation kicks in when the animation\n          // itself was cancelled entirely\n          if (animationClosed) return;\n\n          applyBlocking(false);\n\n          forEach(temporaryStyles, function(entry) {\n            var key = entry[0];\n            var value = entry[1];\n            node.style[key] = value;\n          });\n\n          applyAnimationClasses(element, options);\n          $$jqLite.addClass(element, activeClasses);\n\n          if (flags.recalculateTimingStyles) {\n            fullClassName = node.getAttribute('class') + ' ' + preparationClasses;\n            cacheKey = gcsHashFn(node, fullClassName);\n\n            timings = computeTimings(node, fullClassName, cacheKey);\n            relativeDelay = timings.maxDelay;\n            maxDelay = Math.max(relativeDelay, 0);\n            maxDuration = timings.maxDuration;\n\n            if (maxDuration === 0) {\n              close();\n              return;\n            }\n\n            flags.hasTransitions = timings.transitionDuration > 0;\n            flags.hasAnimations = timings.animationDuration > 0;\n          }\n\n          if (flags.applyAnimationDelay) {\n            relativeDelay = typeof options.delay !== 'boolean' && truthyTimingValue(options.delay)\n                  ? parseFloat(options.delay)\n                  : relativeDelay;\n\n            maxDelay = Math.max(relativeDelay, 0);\n            timings.animationDelay = relativeDelay;\n            delayStyle = getCssDelayStyle(relativeDelay, true);\n            temporaryStyles.push(delayStyle);\n            node.style[delayStyle[0]] = delayStyle[1];\n          }\n\n          maxDelayTime = maxDelay * ONE_SECOND;\n          maxDurationTime = maxDuration * ONE_SECOND;\n\n          if (options.easing) {\n            var easeProp, easeVal = options.easing;\n            if (flags.hasTransitions) {\n              easeProp = TRANSITION_PROP + TIMING_KEY;\n              temporaryStyles.push([easeProp, easeVal]);\n              node.style[easeProp] = easeVal;\n            }\n            if (flags.hasAnimations) {\n              easeProp = ANIMATION_PROP + TIMING_KEY;\n              temporaryStyles.push([easeProp, easeVal]);\n              node.style[easeProp] = easeVal;\n            }\n          }\n\n          if (timings.transitionDuration) {\n            events.push(TRANSITIONEND_EVENT);\n          }\n\n          if (timings.animationDuration) {\n            events.push(ANIMATIONEND_EVENT);\n          }\n\n          startTime = Date.now();\n          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;\n          var endTime = startTime + timerTime;\n\n          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];\n          var setupFallbackTimer = true;\n          if (animationsData.length) {\n            var currentTimerData = animationsData[0];\n            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;\n            if (setupFallbackTimer) {\n              $timeout.cancel(currentTimerData.timer);\n            } else {\n              animationsData.push(close);\n            }\n          }\n\n          if (setupFallbackTimer) {\n            var timer = $timeout(onAnimationExpired, timerTime, false);\n            animationsData[0] = {\n              timer: timer,\n              expectedEndTime: endTime\n            };\n            animationsData.push(close);\n            element.data(ANIMATE_TIMER_KEY, animationsData);\n          }\n\n          if (events.length) {\n            element.on(events.join(' '), onAnimationProgress);\n          }\n\n          if (options.to) {\n            if (options.cleanupStyles) {\n              registerRestorableStyles(restoreStyles, node, Object.keys(options.to));\n            }\n            applyAnimationToStyles(element, options);\n          }\n        }\n\n        function onAnimationExpired() {\n          var animationsData = element.data(ANIMATE_TIMER_KEY);\n\n          // this will be false in the event that the element was\n          // removed from the DOM (via a leave animation or something\n          // similar)\n          if (animationsData) {\n            for (var i = 1; i < animationsData.length; i++) {\n              animationsData[i]();\n            }\n            element.removeData(ANIMATE_TIMER_KEY);\n          }\n        }\n      }\n    };\n  }];\n}];\n\nvar $$AnimateCssDriverProvider = ['$$animationProvider', /** @this */ function($$animationProvider) {\n  $$animationProvider.drivers.push('$$animateCssDriver');\n\n  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';\n  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';\n\n  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';\n  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';\n\n  function isDocumentFragment(node) {\n    return node.parentNode && node.parentNode.nodeType === 11;\n  }\n\n  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',\n       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $sniffer,   $$jqLite,   $document) {\n\n    // only browsers that support these properties can render animations\n    if (!$sniffer.animations && !$sniffer.transitions) return noop;\n\n    var bodyNode = $document[0].body;\n    var rootNode = getDomNode($rootElement);\n\n    var rootBodyElement = jqLite(\n      // this is to avoid using something that exists outside of the body\n      // we also special case the doc fragment case because our unit test code\n      // appends the $rootElement to the body after the app has been bootstrapped\n      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode\n    );\n\n    return function initDriverFn(animationDetails) {\n      return animationDetails.from && animationDetails.to\n          ? prepareFromToAnchorAnimation(animationDetails.from,\n                                         animationDetails.to,\n                                         animationDetails.classes,\n                                         animationDetails.anchors)\n          : prepareRegularAnimation(animationDetails);\n    };\n\n    function filterCssClasses(classes) {\n      //remove all the `ng-` stuff\n      return classes.replace(/\\bng-\\S+\\b/g, '');\n    }\n\n    function getUniqueValues(a, b) {\n      if (isString(a)) a = a.split(' ');\n      if (isString(b)) b = b.split(' ');\n      return a.filter(function(val) {\n        return b.indexOf(val) === -1;\n      }).join(' ');\n    }\n\n    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {\n      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));\n      var startingClasses = filterCssClasses(getClassVal(clone));\n\n      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\n      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\n\n      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);\n\n      rootBodyElement.append(clone);\n\n      var animatorIn, animatorOut = prepareOutAnimation();\n\n      // the user may not end up using the `out` animation and\n      // only making use of the `in` animation or vice-versa.\n      // In either case we should allow this and not assume the\n      // animation is over unless both animations are not used.\n      if (!animatorOut) {\n        animatorIn = prepareInAnimation();\n        if (!animatorIn) {\n          return end();\n        }\n      }\n\n      var startingAnimator = animatorOut || animatorIn;\n\n      return {\n        start: function() {\n          var runner;\n\n          var currentAnimation = startingAnimator.start();\n          currentAnimation.done(function() {\n            currentAnimation = null;\n            if (!animatorIn) {\n              animatorIn = prepareInAnimation();\n              if (animatorIn) {\n                currentAnimation = animatorIn.start();\n                currentAnimation.done(function() {\n                  currentAnimation = null;\n                  end();\n                  runner.complete();\n                });\n                return currentAnimation;\n              }\n            }\n            // in the event that there is no `in` animation\n            end();\n            runner.complete();\n          });\n\n          runner = new $$AnimateRunner({\n            end: endFn,\n            cancel: endFn\n          });\n\n          return runner;\n\n          function endFn() {\n            if (currentAnimation) {\n              currentAnimation.end();\n            }\n          }\n        }\n      };\n\n      function calculateAnchorStyles(anchor) {\n        var styles = {};\n\n        var coords = getDomNode(anchor).getBoundingClientRect();\n\n        // we iterate directly since safari messes up and doesn't return\n        // all the keys for the coords object when iterated\n        forEach(['width','height','top','left'], function(key) {\n          var value = coords[key];\n          switch (key) {\n            case 'top':\n              value += bodyNode.scrollTop;\n              break;\n            case 'left':\n              value += bodyNode.scrollLeft;\n              break;\n          }\n          styles[key] = Math.floor(value) + 'px';\n        });\n        return styles;\n      }\n\n      function prepareOutAnimation() {\n        var animator = $animateCss(clone, {\n          addClass: NG_OUT_ANCHOR_CLASS_NAME,\n          delay: true,\n          from: calculateAnchorStyles(outAnchor)\n        });\n\n        // read the comment within `prepareRegularAnimation` to understand\n        // why this check is necessary\n        return animator.$$willAnimate ? animator : null;\n      }\n\n      function getClassVal(element) {\n        return element.attr('class') || '';\n      }\n\n      function prepareInAnimation() {\n        var endingClasses = filterCssClasses(getClassVal(inAnchor));\n        var toAdd = getUniqueValues(endingClasses, startingClasses);\n        var toRemove = getUniqueValues(startingClasses, endingClasses);\n\n        var animator = $animateCss(clone, {\n          to: calculateAnchorStyles(inAnchor),\n          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,\n          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,\n          delay: true\n        });\n\n        // read the comment within `prepareRegularAnimation` to understand\n        // why this check is necessary\n        return animator.$$willAnimate ? animator : null;\n      }\n\n      function end() {\n        clone.remove();\n        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\n        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\n      }\n    }\n\n    function prepareFromToAnchorAnimation(from, to, classes, anchors) {\n      var fromAnimation = prepareRegularAnimation(from, noop);\n      var toAnimation = prepareRegularAnimation(to, noop);\n\n      var anchorAnimations = [];\n      forEach(anchors, function(anchor) {\n        var outElement = anchor['out'];\n        var inElement = anchor['in'];\n        var animator = prepareAnchoredAnimation(classes, outElement, inElement);\n        if (animator) {\n          anchorAnimations.push(animator);\n        }\n      });\n\n      // no point in doing anything when there are no elements to animate\n      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;\n\n      return {\n        start: function() {\n          var animationRunners = [];\n\n          if (fromAnimation) {\n            animationRunners.push(fromAnimation.start());\n          }\n\n          if (toAnimation) {\n            animationRunners.push(toAnimation.start());\n          }\n\n          forEach(anchorAnimations, function(animation) {\n            animationRunners.push(animation.start());\n          });\n\n          var runner = new $$AnimateRunner({\n            end: endFn,\n            cancel: endFn // CSS-driven animations cannot be cancelled, only ended\n          });\n\n          $$AnimateRunner.all(animationRunners, function(status) {\n            runner.complete(status);\n          });\n\n          return runner;\n\n          function endFn() {\n            forEach(animationRunners, function(runner) {\n              runner.end();\n            });\n          }\n        }\n      };\n    }\n\n    function prepareRegularAnimation(animationDetails) {\n      var element = animationDetails.element;\n      var options = animationDetails.options || {};\n\n      if (animationDetails.structural) {\n        options.event = animationDetails.event;\n        options.structural = true;\n        options.applyClassesEarly = true;\n\n        // we special case the leave animation since we want to ensure that\n        // the element is removed as soon as the animation is over. Otherwise\n        // a flicker might appear or the element may not be removed at all\n        if (animationDetails.event === 'leave') {\n          options.onDone = options.domOperation;\n        }\n      }\n\n      // We assign the preparationClasses as the actual animation event since\n      // the internals of $animateCss will just suffix the event token values\n      // with `-active` to trigger the animation.\n      if (options.preparationClasses) {\n        options.event = concatWithSpace(options.event, options.preparationClasses);\n      }\n\n      var animator = $animateCss(element, options);\n\n      // the driver lookup code inside of $$animation attempts to spawn a\n      // driver one by one until a driver returns a.$$willAnimate animator object.\n      // $animateCss will always return an object, however, it will pass in\n      // a flag as a hint as to whether an animation was detected or not\n      return animator.$$willAnimate ? animator : null;\n    }\n  }];\n}];\n\n// TODO(matsko): use caching here to speed things up for detection\n// TODO(matsko): add documentation\n//  by the time...\n\nvar $$AnimateJsProvider = ['$animateProvider', /** @this */ function($animateProvider) {\n  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',\n       function($injector,   $$AnimateRunner,   $$jqLite) {\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n         // $animateJs(element, 'enter');\n    return function(element, event, classes, options) {\n      var animationClosed = false;\n\n      // the `classes` argument is optional and if it is not used\n      // then the classes will be resolved from the element's className\n      // property as well as options.addClass/options.removeClass.\n      if (arguments.length === 3 && isObject(classes)) {\n        options = classes;\n        classes = null;\n      }\n\n      options = prepareAnimationOptions(options);\n      if (!classes) {\n        classes = element.attr('class') || '';\n        if (options.addClass) {\n          classes += ' ' + options.addClass;\n        }\n        if (options.removeClass) {\n          classes += ' ' + options.removeClass;\n        }\n      }\n\n      var classesToAdd = options.addClass;\n      var classesToRemove = options.removeClass;\n\n      // the lookupAnimations function returns a series of animation objects that are\n      // matched up with one or more of the CSS classes. These animation objects are\n      // defined via the module.animation factory function. If nothing is detected then\n      // we don't return anything which then makes $animation query the next driver.\n      var animations = lookupAnimations(classes);\n      var before, after;\n      if (animations.length) {\n        var afterFn, beforeFn;\n        if (event === 'leave') {\n          beforeFn = 'leave';\n          afterFn = 'afterLeave'; // TODO(matsko): get rid of this\n        } else {\n          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);\n          afterFn = event;\n        }\n\n        if (event !== 'enter' && event !== 'move') {\n          before = packageAnimations(element, event, options, animations, beforeFn);\n        }\n        after  = packageAnimations(element, event, options, animations, afterFn);\n      }\n\n      // no matching animations\n      if (!before && !after) return;\n\n      function applyOptions() {\n        options.domOperation();\n        applyAnimationClasses(element, options);\n      }\n\n      function close() {\n        animationClosed = true;\n        applyOptions();\n        applyAnimationStyles(element, options);\n      }\n\n      var runner;\n\n      return {\n        $$willAnimate: true,\n        end: function() {\n          if (runner) {\n            runner.end();\n          } else {\n            close();\n            runner = new $$AnimateRunner();\n            runner.complete(true);\n          }\n          return runner;\n        },\n        start: function() {\n          if (runner) {\n            return runner;\n          }\n\n          runner = new $$AnimateRunner();\n          var closeActiveAnimations;\n          var chain = [];\n\n          if (before) {\n            chain.push(function(fn) {\n              closeActiveAnimations = before(fn);\n            });\n          }\n\n          if (chain.length) {\n            chain.push(function(fn) {\n              applyOptions();\n              fn(true);\n            });\n          } else {\n            applyOptions();\n          }\n\n          if (after) {\n            chain.push(function(fn) {\n              closeActiveAnimations = after(fn);\n            });\n          }\n\n          runner.setHost({\n            end: function() {\n              endAnimations();\n            },\n            cancel: function() {\n              endAnimations(true);\n            }\n          });\n\n          $$AnimateRunner.chain(chain, onComplete);\n          return runner;\n\n          function onComplete(success) {\n            close(success);\n            runner.complete(success);\n          }\n\n          function endAnimations(cancelled) {\n            if (!animationClosed) {\n              (closeActiveAnimations || noop)(cancelled);\n              onComplete(cancelled);\n            }\n          }\n        }\n      };\n\n      function executeAnimationFn(fn, element, event, options, onDone) {\n        var args;\n        switch (event) {\n          case 'animate':\n            args = [element, options.from, options.to, onDone];\n            break;\n\n          case 'setClass':\n            args = [element, classesToAdd, classesToRemove, onDone];\n            break;\n\n          case 'addClass':\n            args = [element, classesToAdd, onDone];\n            break;\n\n          case 'removeClass':\n            args = [element, classesToRemove, onDone];\n            break;\n\n          default:\n            args = [element, onDone];\n            break;\n        }\n\n        args.push(options);\n\n        var value = fn.apply(fn, args);\n        if (value) {\n          if (isFunction(value.start)) {\n            value = value.start();\n          }\n\n          if (value instanceof $$AnimateRunner) {\n            value.done(onDone);\n          } else if (isFunction(value)) {\n            // optional onEnd / onCancel callback\n            return value;\n          }\n        }\n\n        return noop;\n      }\n\n      function groupEventedAnimations(element, event, options, animations, fnName) {\n        var operations = [];\n        forEach(animations, function(ani) {\n          var animation = ani[fnName];\n          if (!animation) return;\n\n          // note that all of these animations will run in parallel\n          operations.push(function() {\n            var runner;\n            var endProgressCb;\n\n            var resolved = false;\n            var onAnimationComplete = function(rejected) {\n              if (!resolved) {\n                resolved = true;\n                (endProgressCb || noop)(rejected);\n                runner.complete(!rejected);\n              }\n            };\n\n            runner = new $$AnimateRunner({\n              end: function() {\n                onAnimationComplete();\n              },\n              cancel: function() {\n                onAnimationComplete(true);\n              }\n            });\n\n            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {\n              var cancelled = result === false;\n              onAnimationComplete(cancelled);\n            });\n\n            return runner;\n          });\n        });\n\n        return operations;\n      }\n\n      function packageAnimations(element, event, options, animations, fnName) {\n        var operations = groupEventedAnimations(element, event, options, animations, fnName);\n        if (operations.length === 0) {\n          var a, b;\n          if (fnName === 'beforeSetClass') {\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');\n          } else if (fnName === 'setClass') {\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');\n          }\n\n          if (a) {\n            operations = operations.concat(a);\n          }\n          if (b) {\n            operations = operations.concat(b);\n          }\n        }\n\n        if (operations.length === 0) return;\n\n        // TODO(matsko): add documentation\n        return function startAnimation(callback) {\n          var runners = [];\n          if (operations.length) {\n            forEach(operations, function(animateFn) {\n              runners.push(animateFn());\n            });\n          }\n\n          if (runners.length) {\n            $$AnimateRunner.all(runners, callback);\n          }  else {\n            callback();\n          }\n\n          return function endFn(reject) {\n            forEach(runners, function(runner) {\n              if (reject) {\n                runner.cancel();\n              } else {\n                runner.end();\n              }\n            });\n          };\n        };\n      }\n    };\n\n    function lookupAnimations(classes) {\n      classes = isArray(classes) ? classes : classes.split(' ');\n      var matches = [], flagMap = {};\n      for (var i = 0; i < classes.length; i++) {\n        var klass = classes[i],\n            animationFactory = $animateProvider.$$registeredAnimations[klass];\n        if (animationFactory && !flagMap[klass]) {\n          matches.push($injector.get(animationFactory));\n          flagMap[klass] = true;\n        }\n      }\n      return matches;\n    }\n  }];\n}];\n\nvar $$AnimateJsDriverProvider = ['$$animationProvider', /** @this */ function($$animationProvider) {\n  $$animationProvider.drivers.push('$$animateJsDriver');\n  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {\n    return function initDriverFn(animationDetails) {\n      if (animationDetails.from && animationDetails.to) {\n        var fromAnimation = prepareAnimation(animationDetails.from);\n        var toAnimation = prepareAnimation(animationDetails.to);\n        if (!fromAnimation && !toAnimation) return;\n\n        return {\n          start: function() {\n            var animationRunners = [];\n\n            if (fromAnimation) {\n              animationRunners.push(fromAnimation.start());\n            }\n\n            if (toAnimation) {\n              animationRunners.push(toAnimation.start());\n            }\n\n            $$AnimateRunner.all(animationRunners, done);\n\n            var runner = new $$AnimateRunner({\n              end: endFnFactory(),\n              cancel: endFnFactory()\n            });\n\n            return runner;\n\n            function endFnFactory() {\n              return function() {\n                forEach(animationRunners, function(runner) {\n                  // at this point we cannot cancel animations for groups just yet. 1.5+\n                  runner.end();\n                });\n              };\n            }\n\n            function done(status) {\n              runner.complete(status);\n            }\n          }\n        };\n      } else {\n        return prepareAnimation(animationDetails);\n      }\n    };\n\n    function prepareAnimation(animationDetails) {\n      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations\n      var element = animationDetails.element;\n      var event = animationDetails.event;\n      var options = animationDetails.options;\n      var classes = animationDetails.classes;\n      return $$animateJs(element, event, classes, options);\n    }\n  }];\n}];\n\nvar NG_ANIMATE_ATTR_NAME = 'data-ng-animate';\nvar NG_ANIMATE_PIN_DATA = '$ngAnimatePin';\nvar $$AnimateQueueProvider = ['$animateProvider', /** @this */ function($animateProvider) {\n  var PRE_DIGEST_STATE = 1;\n  var RUNNING_STATE = 2;\n  var ONE_SPACE = ' ';\n\n  var rules = this.rules = {\n    skip: [],\n    cancel: [],\n    join: []\n  };\n\n  function makeTruthyCssClassMap(classString) {\n    if (!classString) {\n      return null;\n    }\n\n    var keys = classString.split(ONE_SPACE);\n    var map = Object.create(null);\n\n    forEach(keys, function(key) {\n      map[key] = true;\n    });\n    return map;\n  }\n\n  function hasMatchingClasses(newClassString, currentClassString) {\n    if (newClassString && currentClassString) {\n      var currentClassMap = makeTruthyCssClassMap(currentClassString);\n      return newClassString.split(ONE_SPACE).some(function(className) {\n        return currentClassMap[className];\n      });\n    }\n  }\n\n  function isAllowed(ruleType, currentAnimation, previousAnimation) {\n    return rules[ruleType].some(function(fn) {\n      return fn(currentAnimation, previousAnimation);\n    });\n  }\n\n  function hasAnimationClasses(animation, and) {\n    var a = (animation.addClass || '').length > 0;\n    var b = (animation.removeClass || '').length > 0;\n    return and ? a && b : a || b;\n  }\n\n  rules.join.push(function(newAnimation, currentAnimation) {\n    // if the new animation is class-based then we can just tack that on\n    return !newAnimation.structural && hasAnimationClasses(newAnimation);\n  });\n\n  rules.skip.push(function(newAnimation, currentAnimation) {\n    // there is no need to animate anything if no classes are being added and\n    // there is no structural animation that will be triggered\n    return !newAnimation.structural && !hasAnimationClasses(newAnimation);\n  });\n\n  rules.skip.push(function(newAnimation, currentAnimation) {\n    // why should we trigger a new structural animation if the element will\n    // be removed from the DOM anyway?\n    return currentAnimation.event === 'leave' && newAnimation.structural;\n  });\n\n  rules.skip.push(function(newAnimation, currentAnimation) {\n    // if there is an ongoing current animation then don't even bother running the class-based animation\n    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;\n  });\n\n  rules.cancel.push(function(newAnimation, currentAnimation) {\n    // there can never be two structural animations running at the same time\n    return currentAnimation.structural && newAnimation.structural;\n  });\n\n  rules.cancel.push(function(newAnimation, currentAnimation) {\n    // if the previous animation is already running, but the new animation will\n    // be triggered, but the new animation is structural\n    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;\n  });\n\n  rules.cancel.push(function(newAnimation, currentAnimation) {\n    // cancel the animation if classes added / removed in both animation cancel each other out,\n    // but only if the current animation isn't structural\n\n    if (currentAnimation.structural) return false;\n\n    var nA = newAnimation.addClass;\n    var nR = newAnimation.removeClass;\n    var cA = currentAnimation.addClass;\n    var cR = currentAnimation.removeClass;\n\n    // early detection to save the global CPU shortage :)\n    if ((isUndefined(nA) && isUndefined(nR)) || (isUndefined(cA) && isUndefined(cR))) {\n      return false;\n    }\n\n    return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);\n  });\n\n  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$Map',\n               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',\n               '$$isDocumentHidden',\n       function($$rAF,   $rootScope,   $rootElement,   $document,   $$Map,\n                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow,\n                $$isDocumentHidden) {\n\n    var activeAnimationsLookup = new $$Map();\n    var disabledElementsLookup = new $$Map();\n    var animationsEnabled = null;\n\n    function postDigestTaskFactory() {\n      var postDigestCalled = false;\n      return function(fn) {\n        // we only issue a call to postDigest before\n        // it has first passed. This prevents any callbacks\n        // from not firing once the animation has completed\n        // since it will be out of the digest cycle.\n        if (postDigestCalled) {\n          fn();\n        } else {\n          $rootScope.$$postDigest(function() {\n            postDigestCalled = true;\n            fn();\n          });\n        }\n      };\n    }\n\n    // Wait until all directive and route-related templates are downloaded and\n    // compiled. The $templateRequest.totalPendingRequests variable keeps track of\n    // all of the remote templates being currently downloaded. If there are no\n    // templates currently downloading then the watcher will still fire anyway.\n    var deregisterWatch = $rootScope.$watch(\n      function() { return $templateRequest.totalPendingRequests === 0; },\n      function(isEmpty) {\n        if (!isEmpty) return;\n        deregisterWatch();\n\n        // Now that all templates have been downloaded, $animate will wait until\n        // the post digest queue is empty before enabling animations. By having two\n        // calls to $postDigest calls we can ensure that the flag is enabled at the\n        // very end of the post digest queue. Since all of the animations in $animate\n        // use $postDigest, it's important that the code below executes at the end.\n        // This basically means that the page is fully downloaded and compiled before\n        // any animations are triggered.\n        $rootScope.$$postDigest(function() {\n          $rootScope.$$postDigest(function() {\n            // we check for null directly in the event that the application already called\n            // .enabled() with whatever arguments that it provided it with\n            if (animationsEnabled === null) {\n              animationsEnabled = true;\n            }\n          });\n        });\n      }\n    );\n\n    var callbackRegistry = Object.create(null);\n\n    // remember that the `customFilter`/`classNameFilter` are set during the\n    // provider/config stage therefore we can optimize here and setup helper functions\n    var customFilter = $animateProvider.customFilter();\n    var classNameFilter = $animateProvider.classNameFilter();\n    var returnTrue = function() { return true; };\n\n    var isAnimatableByFilter = customFilter || returnTrue;\n    var isAnimatableClassName = !classNameFilter ? returnTrue : function(node, options) {\n      var className = [node.getAttribute('class'), options.addClass, options.removeClass].join(' ');\n      return classNameFilter.test(className);\n    };\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    function normalizeAnimationDetails(element, animation) {\n      return mergeAnimationDetails(element, animation, {});\n    }\n\n    // IE9-11 has no method \"contains\" in SVG element and in Node.prototype. Bug #10259.\n    var contains = window.Node.prototype.contains || /** @this */ function(arg) {\n      // eslint-disable-next-line no-bitwise\n      return this === arg || !!(this.compareDocumentPosition(arg) & 16);\n    };\n\n    function findCallbacks(targetParentNode, targetNode, event) {\n      var matches = [];\n      var entries = callbackRegistry[event];\n      if (entries) {\n        forEach(entries, function(entry) {\n          if (contains.call(entry.node, targetNode)) {\n            matches.push(entry.callback);\n          } else if (event === 'leave' && contains.call(entry.node, targetParentNode)) {\n            matches.push(entry.callback);\n          }\n        });\n      }\n\n      return matches;\n    }\n\n    function filterFromRegistry(list, matchContainer, matchCallback) {\n      var containerNode = extractElementNode(matchContainer);\n      return list.filter(function(entry) {\n        var isMatch = entry.node === containerNode &&\n                        (!matchCallback || entry.callback === matchCallback);\n        return !isMatch;\n      });\n    }\n\n    function cleanupEventListeners(phase, node) {\n      if (phase === 'close' && !node.parentNode) {\n        // If the element is not attached to a parentNode, it has been removed by\n        // the domOperation, and we can safely remove the event callbacks\n        $animate.off(node);\n      }\n    }\n\n    var $animate = {\n      on: function(event, container, callback) {\n        var node = extractElementNode(container);\n        callbackRegistry[event] = callbackRegistry[event] || [];\n        callbackRegistry[event].push({\n          node: node,\n          callback: callback\n        });\n\n        // Remove the callback when the element is removed from the DOM\n        jqLite(container).on('$destroy', function() {\n          var animationDetails = activeAnimationsLookup.get(node);\n\n          if (!animationDetails) {\n            // If there's an animation ongoing, the callback calling code will remove\n            // the event listeners. If we'd remove here, the callbacks would be removed\n            // before the animation ends\n            $animate.off(event, container, callback);\n          }\n        });\n      },\n\n      off: function(event, container, callback) {\n        if (arguments.length === 1 && !isString(arguments[0])) {\n          container = arguments[0];\n          for (var eventType in callbackRegistry) {\n            callbackRegistry[eventType] = filterFromRegistry(callbackRegistry[eventType], container);\n          }\n\n          return;\n        }\n\n        var entries = callbackRegistry[event];\n        if (!entries) return;\n\n        callbackRegistry[event] = arguments.length === 1\n            ? null\n            : filterFromRegistry(entries, container, callback);\n      },\n\n      pin: function(element, parentElement) {\n        assertArg(isElement(element), 'element', 'not an element');\n        assertArg(isElement(parentElement), 'parentElement', 'not an element');\n        element.data(NG_ANIMATE_PIN_DATA, parentElement);\n      },\n\n      push: function(element, event, options, domOperation) {\n        options = options || {};\n        options.domOperation = domOperation;\n        return queueAnimation(element, event, options);\n      },\n\n      // this method has four signatures:\n      //  () - global getter\n      //  (bool) - global setter\n      //  (element) - element getter\n      //  (element, bool) - element setter<F37>\n      enabled: function(element, bool) {\n        var argCount = arguments.length;\n\n        if (argCount === 0) {\n          // () - Global getter\n          bool = !!animationsEnabled;\n        } else {\n          var hasElement = isElement(element);\n\n          if (!hasElement) {\n            // (bool) - Global setter\n            bool = animationsEnabled = !!element;\n          } else {\n            var node = getDomNode(element);\n\n            if (argCount === 1) {\n              // (element) - Element getter\n              bool = !disabledElementsLookup.get(node);\n            } else {\n              // (element, bool) - Element setter\n              disabledElementsLookup.set(node, !bool);\n            }\n          }\n        }\n\n        return bool;\n      }\n    };\n\n    return $animate;\n\n    function queueAnimation(originalElement, event, initialOptions) {\n      // we always make a copy of the options since\n      // there should never be any side effects on\n      // the input data when running `$animateCss`.\n      var options = copy(initialOptions);\n\n      var element = stripCommentsFromElement(originalElement);\n      var node = getDomNode(element);\n      var parentNode = node && node.parentNode;\n\n      options = prepareAnimationOptions(options);\n\n      // we create a fake runner with a working promise.\n      // These methods will become available after the digest has passed\n      var runner = new $$AnimateRunner();\n\n      // this is used to trigger callbacks in postDigest mode\n      var runInNextPostDigestOrNow = postDigestTaskFactory();\n\n      if (isArray(options.addClass)) {\n        options.addClass = options.addClass.join(' ');\n      }\n\n      if (options.addClass && !isString(options.addClass)) {\n        options.addClass = null;\n      }\n\n      if (isArray(options.removeClass)) {\n        options.removeClass = options.removeClass.join(' ');\n      }\n\n      if (options.removeClass && !isString(options.removeClass)) {\n        options.removeClass = null;\n      }\n\n      if (options.from && !isObject(options.from)) {\n        options.from = null;\n      }\n\n      if (options.to && !isObject(options.to)) {\n        options.to = null;\n      }\n\n      // If animations are hard-disabled for the whole application there is no need to continue.\n      // There are also situations where a directive issues an animation for a jqLite wrapper that\n      // contains only comment nodes. In this case, there is no way we can perform an animation.\n      if (!animationsEnabled ||\n          !node ||\n          !isAnimatableByFilter(node, event, initialOptions) ||\n          !isAnimatableClassName(node, options)) {\n        close();\n        return runner;\n      }\n\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\n\n      var documentHidden = $$isDocumentHidden();\n\n      // This is a hard disable of all animations the element itself, therefore  there is no need to\n      // continue further past this point if not enabled\n      // Animations are also disabled if the document is currently hidden (page is not visible\n      // to the user), because browsers slow down or do not flush calls to requestAnimationFrame\n      var skipAnimations = documentHidden || disabledElementsLookup.get(node);\n      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};\n      var hasExistingAnimation = !!existingAnimation.state;\n\n      // there is no point in traversing the same collection of parent ancestors if a followup\n      // animation will be run on the same element that already did all that checking work\n      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state !== PRE_DIGEST_STATE)) {\n        skipAnimations = !areAnimationsAllowed(node, parentNode, event);\n      }\n\n      if (skipAnimations) {\n        // Callbacks should fire even if the document is hidden (regression fix for issue #14120)\n        if (documentHidden) notifyProgress(runner, event, 'start');\n        close();\n        if (documentHidden) notifyProgress(runner, event, 'close');\n        return runner;\n      }\n\n      if (isStructural) {\n        closeChildAnimations(node);\n      }\n\n      var newAnimation = {\n        structural: isStructural,\n        element: element,\n        event: event,\n        addClass: options.addClass,\n        removeClass: options.removeClass,\n        close: close,\n        options: options,\n        runner: runner\n      };\n\n      if (hasExistingAnimation) {\n        var skipAnimationFlag = isAllowed('skip', newAnimation, existingAnimation);\n        if (skipAnimationFlag) {\n          if (existingAnimation.state === RUNNING_STATE) {\n            close();\n            return runner;\n          } else {\n            mergeAnimationDetails(element, existingAnimation, newAnimation);\n            return existingAnimation.runner;\n          }\n        }\n        var cancelAnimationFlag = isAllowed('cancel', newAnimation, existingAnimation);\n        if (cancelAnimationFlag) {\n          if (existingAnimation.state === RUNNING_STATE) {\n            // this will end the animation right away and it is safe\n            // to do so since the animation is already running and the\n            // runner callback code will run in async\n            existingAnimation.runner.end();\n          } else if (existingAnimation.structural) {\n            // this means that the animation is queued into a digest, but\n            // hasn't started yet. Therefore it is safe to run the close\n            // method which will call the runner methods in async.\n            existingAnimation.close();\n          } else {\n            // this will merge the new animation options into existing animation options\n            mergeAnimationDetails(element, existingAnimation, newAnimation);\n\n            return existingAnimation.runner;\n          }\n        } else {\n          // a joined animation means that this animation will take over the existing one\n          // so an example would involve a leave animation taking over an enter. Then when\n          // the postDigest kicks in the enter will be ignored.\n          var joinAnimationFlag = isAllowed('join', newAnimation, existingAnimation);\n          if (joinAnimationFlag) {\n            if (existingAnimation.state === RUNNING_STATE) {\n              normalizeAnimationDetails(element, newAnimation);\n            } else {\n              applyGeneratedPreparationClasses(element, isStructural ? event : null, options);\n\n              event = newAnimation.event = existingAnimation.event;\n              options = mergeAnimationDetails(element, existingAnimation, newAnimation);\n\n              //we return the same runner since only the option values of this animation will\n              //be fed into the `existingAnimation`.\n              return existingAnimation.runner;\n            }\n          }\n        }\n      } else {\n        // normalization in this case means that it removes redundant CSS classes that\n        // already exist (addClass) or do not exist (removeClass) on the element\n        normalizeAnimationDetails(element, newAnimation);\n      }\n\n      // when the options are merged and cleaned up we may end up not having to do\n      // an animation at all, therefore we should check this before issuing a post\n      // digest callback. Structural animations will always run no matter what.\n      var isValidAnimation = newAnimation.structural;\n      if (!isValidAnimation) {\n        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present\n        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)\n                            || hasAnimationClasses(newAnimation);\n      }\n\n      if (!isValidAnimation) {\n        close();\n        clearElementAnimationState(node);\n        return runner;\n      }\n\n      // the counter keeps track of cancelled animations\n      var counter = (existingAnimation.counter || 0) + 1;\n      newAnimation.counter = counter;\n\n      markElementAnimationState(node, PRE_DIGEST_STATE, newAnimation);\n\n      $rootScope.$$postDigest(function() {\n        // It is possible that the DOM nodes inside `originalElement` have been replaced. This can\n        // happen if the animated element is a transcluded clone and also has a `templateUrl`\n        // directive on it. Therefore, we must recreate `element` in order to interact with the\n        // actual DOM nodes.\n        // Note: We still need to use the old `node` for certain things, such as looking up in\n        //       HashMaps where it was used as the key.\n\n        element = stripCommentsFromElement(originalElement);\n\n        var animationDetails = activeAnimationsLookup.get(node);\n        var animationCancelled = !animationDetails;\n        animationDetails = animationDetails || {};\n\n        // if addClass/removeClass is called before something like enter then the\n        // registered parent element may not be present. The code below will ensure\n        // that a final value for parent element is obtained\n        var parentElement = element.parent() || [];\n\n        // animate/structural/class-based animations all have requirements. Otherwise there\n        // is no point in performing an animation. The parent node must also be set.\n        var isValidAnimation = parentElement.length > 0\n                                && (animationDetails.event === 'animate'\n                                    || animationDetails.structural\n                                    || hasAnimationClasses(animationDetails));\n\n        // this means that the previous animation was cancelled\n        // even if the follow-up animation is the same event\n        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {\n          // if another animation did not take over then we need\n          // to make sure that the domOperation and options are\n          // handled accordingly\n          if (animationCancelled) {\n            applyAnimationClasses(element, options);\n            applyAnimationStyles(element, options);\n          }\n\n          // if the event changed from something like enter to leave then we do\n          // it, otherwise if it's the same then the end result will be the same too\n          if (animationCancelled || (isStructural && animationDetails.event !== event)) {\n            options.domOperation();\n            runner.end();\n          }\n\n          // in the event that the element animation was not cancelled or a follow-up animation\n          // isn't allowed to animate from here then we need to clear the state of the element\n          // so that any future animations won't read the expired animation data.\n          if (!isValidAnimation) {\n            clearElementAnimationState(node);\n          }\n\n          return;\n        }\n\n        // this combined multiple class to addClass / removeClass into a setClass event\n        // so long as a structural event did not take over the animation\n        event = !animationDetails.structural && hasAnimationClasses(animationDetails, true)\n            ? 'setClass'\n            : animationDetails.event;\n\n        markElementAnimationState(node, RUNNING_STATE);\n        var realRunner = $$animation(element, event, animationDetails.options);\n\n        // this will update the runner's flow-control events based on\n        // the `realRunner` object.\n        runner.setHost(realRunner);\n        notifyProgress(runner, event, 'start', {});\n\n        realRunner.done(function(status) {\n          close(!status);\n          var animationDetails = activeAnimationsLookup.get(node);\n          if (animationDetails && animationDetails.counter === counter) {\n            clearElementAnimationState(node);\n          }\n          notifyProgress(runner, event, 'close', {});\n        });\n      });\n\n      return runner;\n\n      function notifyProgress(runner, event, phase, data) {\n        runInNextPostDigestOrNow(function() {\n          var callbacks = findCallbacks(parentNode, node, event);\n          if (callbacks.length) {\n            // do not optimize this call here to RAF because\n            // we don't know how heavy the callback code here will\n            // be and if this code is buffered then this can\n            // lead to a performance regression.\n            $$rAF(function() {\n              forEach(callbacks, function(callback) {\n                callback(element, phase, data);\n              });\n              cleanupEventListeners(phase, node);\n            });\n          } else {\n            cleanupEventListeners(phase, node);\n          }\n        });\n        runner.progress(event, phase, data);\n      }\n\n      function close(reject) {\n        clearGeneratedClasses(element, options);\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n        options.domOperation();\n        runner.complete(!reject);\n      }\n    }\n\n    function closeChildAnimations(node) {\n      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');\n      forEach(children, function(child) {\n        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME), 10);\n        var animationDetails = activeAnimationsLookup.get(child);\n        if (animationDetails) {\n          switch (state) {\n            case RUNNING_STATE:\n              animationDetails.runner.end();\n              /* falls through */\n            case PRE_DIGEST_STATE:\n              activeAnimationsLookup.delete(child);\n              break;\n          }\n        }\n      });\n    }\n\n    function clearElementAnimationState(node) {\n      node.removeAttribute(NG_ANIMATE_ATTR_NAME);\n      activeAnimationsLookup.delete(node);\n    }\n\n    /**\n     * This fn returns false if any of the following is true:\n     * a) animations on any parent element are disabled, and animations on the element aren't explicitly allowed\n     * b) a parent element has an ongoing structural animation, and animateChildren is false\n     * c) the element is not a child of the body\n     * d) the element is not a child of the $rootElement\n     */\n    function areAnimationsAllowed(node, parentNode, event) {\n      var bodyNode = $document[0].body;\n      var rootNode = getDomNode($rootElement);\n\n      var bodyNodeDetected = (node === bodyNode) || node.nodeName === 'HTML';\n      var rootNodeDetected = (node === rootNode);\n      var parentAnimationDetected = false;\n      var elementDisabled = disabledElementsLookup.get(node);\n      var animateChildren;\n\n      var parentHost = jqLite.data(node, NG_ANIMATE_PIN_DATA);\n      if (parentHost) {\n        parentNode = getDomNode(parentHost);\n      }\n\n      while (parentNode) {\n        if (!rootNodeDetected) {\n          // AngularJS doesn't want to attempt to animate elements outside of the application\n          // therefore we need to ensure that the rootElement is an ancestor of the current element\n          rootNodeDetected = (parentNode === rootNode);\n        }\n\n        if (parentNode.nodeType !== ELEMENT_NODE) {\n          // no point in inspecting the #document element\n          break;\n        }\n\n        var details = activeAnimationsLookup.get(parentNode) || {};\n        // either an enter, leave or move animation will commence\n        // therefore we can't allow any animations to take place\n        // but if a parent animation is class-based then that's ok\n        if (!parentAnimationDetected) {\n          var parentNodeDisabled = disabledElementsLookup.get(parentNode);\n\n          if (parentNodeDisabled === true && elementDisabled !== false) {\n            // disable animations if the user hasn't explicitly enabled animations on the\n            // current element\n            elementDisabled = true;\n            // element is disabled via parent element, no need to check anything else\n            break;\n          } else if (parentNodeDisabled === false) {\n            elementDisabled = false;\n          }\n          parentAnimationDetected = details.structural;\n        }\n\n        if (isUndefined(animateChildren) || animateChildren === true) {\n          var value = jqLite.data(parentNode, NG_ANIMATE_CHILDREN_DATA);\n          if (isDefined(value)) {\n            animateChildren = value;\n          }\n        }\n\n        // there is no need to continue traversing at this point\n        if (parentAnimationDetected && animateChildren === false) break;\n\n        if (!bodyNodeDetected) {\n          // we also need to ensure that the element is or will be a part of the body element\n          // otherwise it is pointless to even issue an animation to be rendered\n          bodyNodeDetected = (parentNode === bodyNode);\n        }\n\n        if (bodyNodeDetected && rootNodeDetected) {\n          // If both body and root have been found, any other checks are pointless,\n          // as no animation data should live outside the application\n          break;\n        }\n\n        if (!rootNodeDetected) {\n          // If `rootNode` is not detected, check if `parentNode` is pinned to another element\n          parentHost = jqLite.data(parentNode, NG_ANIMATE_PIN_DATA);\n          if (parentHost) {\n            // The pin target element becomes the next parent element\n            parentNode = getDomNode(parentHost);\n            continue;\n          }\n        }\n\n        parentNode = parentNode.parentNode;\n      }\n\n      var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;\n      return allowAnimation && rootNodeDetected && bodyNodeDetected;\n    }\n\n    function markElementAnimationState(node, state, details) {\n      details = details || {};\n      details.state = state;\n\n      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);\n\n      var oldValue = activeAnimationsLookup.get(node);\n      var newValue = oldValue\n          ? extend(oldValue, details)\n          : details;\n      activeAnimationsLookup.set(node, newValue);\n    }\n  }];\n}];\n\n/* exported $$AnimationProvider */\n\nvar $$AnimationProvider = ['$animateProvider', /** @this */ function($animateProvider) {\n  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';\n\n  var drivers = this.drivers = [];\n\n  var RUNNER_STORAGE_KEY = '$$animationRunner';\n\n  function setRunner(element, runner) {\n    element.data(RUNNER_STORAGE_KEY, runner);\n  }\n\n  function removeRunner(element) {\n    element.removeData(RUNNER_STORAGE_KEY);\n  }\n\n  function getRunner(element) {\n    return element.data(RUNNER_STORAGE_KEY);\n  }\n\n  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$Map', '$$rAFScheduler',\n       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$Map,   $$rAFScheduler) {\n\n    var animationQueue = [];\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    function sortAnimations(animations) {\n      var tree = { children: [] };\n      var i, lookup = new $$Map();\n\n      // this is done first beforehand so that the map\n      // is filled with a list of the elements that will be animated\n      for (i = 0; i < animations.length; i++) {\n        var animation = animations[i];\n        lookup.set(animation.domNode, animations[i] = {\n          domNode: animation.domNode,\n          fn: animation.fn,\n          children: []\n        });\n      }\n\n      for (i = 0; i < animations.length; i++) {\n        processNode(animations[i]);\n      }\n\n      return flatten(tree);\n\n      function processNode(entry) {\n        if (entry.processed) return entry;\n        entry.processed = true;\n\n        var elementNode = entry.domNode;\n        var parentNode = elementNode.parentNode;\n        lookup.set(elementNode, entry);\n\n        var parentEntry;\n        while (parentNode) {\n          parentEntry = lookup.get(parentNode);\n          if (parentEntry) {\n            if (!parentEntry.processed) {\n              parentEntry = processNode(parentEntry);\n            }\n            break;\n          }\n          parentNode = parentNode.parentNode;\n        }\n\n        (parentEntry || tree).children.push(entry);\n        return entry;\n      }\n\n      function flatten(tree) {\n        var result = [];\n        var queue = [];\n        var i;\n\n        for (i = 0; i < tree.children.length; i++) {\n          queue.push(tree.children[i]);\n        }\n\n        var remainingLevelEntries = queue.length;\n        var nextLevelEntries = 0;\n        var row = [];\n\n        for (i = 0; i < queue.length; i++) {\n          var entry = queue[i];\n          if (remainingLevelEntries <= 0) {\n            remainingLevelEntries = nextLevelEntries;\n            nextLevelEntries = 0;\n            result.push(row);\n            row = [];\n          }\n          row.push(entry.fn);\n          entry.children.forEach(function(childEntry) {\n            nextLevelEntries++;\n            queue.push(childEntry);\n          });\n          remainingLevelEntries--;\n        }\n\n        if (row.length) {\n          result.push(row);\n        }\n\n        return result;\n      }\n    }\n\n    // TODO(matsko): document the signature in a better way\n    return function(element, event, options) {\n      options = prepareAnimationOptions(options);\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\n\n      // there is no animation at the current moment, however\n      // these runner methods will get later updated with the\n      // methods leading into the driver's end/cancel methods\n      // for now they just stop the animation from starting\n      var runner = new $$AnimateRunner({\n        end: function() { close(); },\n        cancel: function() { close(true); }\n      });\n\n      if (!drivers.length) {\n        close();\n        return runner;\n      }\n\n      setRunner(element, runner);\n\n      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));\n      var tempClasses = options.tempClasses;\n      if (tempClasses) {\n        classes += ' ' + tempClasses;\n        options.tempClasses = null;\n      }\n\n      var prepareClassName;\n      if (isStructural) {\n        prepareClassName = 'ng-' + event + PREPARE_CLASS_SUFFIX;\n        $$jqLite.addClass(element, prepareClassName);\n      }\n\n      animationQueue.push({\n        // this data is used by the postDigest code and passed into\n        // the driver step function\n        element: element,\n        classes: classes,\n        event: event,\n        structural: isStructural,\n        options: options,\n        beforeStart: beforeStart,\n        close: close\n      });\n\n      element.on('$destroy', handleDestroyedElement);\n\n      // we only want there to be one function called within the post digest\n      // block. This way we can group animations for all the animations that\n      // were apart of the same postDigest flush call.\n      if (animationQueue.length > 1) return runner;\n\n      $rootScope.$$postDigest(function() {\n        var animations = [];\n        forEach(animationQueue, function(entry) {\n          // the element was destroyed early on which removed the runner\n          // form its storage. This means we can't animate this element\n          // at all and it already has been closed due to destruction.\n          if (getRunner(entry.element)) {\n            animations.push(entry);\n          } else {\n            entry.close();\n          }\n        });\n\n        // now any future animations will be in another postDigest\n        animationQueue.length = 0;\n\n        var groupedAnimations = groupAnimations(animations);\n        var toBeSortedAnimations = [];\n\n        forEach(groupedAnimations, function(animationEntry) {\n          toBeSortedAnimations.push({\n            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),\n            fn: function triggerAnimationStart() {\n              // it's important that we apply the `ng-animate` CSS class and the\n              // temporary classes before we do any driver invoking since these\n              // CSS classes may be required for proper CSS detection.\n              animationEntry.beforeStart();\n\n              var startAnimationFn, closeFn = animationEntry.close;\n\n              // in the event that the element was removed before the digest runs or\n              // during the RAF sequencing then we should not trigger the animation.\n              var targetElement = animationEntry.anchors\n                  ? (animationEntry.from.element || animationEntry.to.element)\n                  : animationEntry.element;\n\n              if (getRunner(targetElement)) {\n                var operation = invokeFirstDriver(animationEntry);\n                if (operation) {\n                  startAnimationFn = operation.start;\n                }\n              }\n\n              if (!startAnimationFn) {\n                closeFn();\n              } else {\n                var animationRunner = startAnimationFn();\n                animationRunner.done(function(status) {\n                  closeFn(!status);\n                });\n                updateAnimationRunners(animationEntry, animationRunner);\n              }\n            }\n          });\n        });\n\n        // we need to sort each of the animations in order of parent to child\n        // relationships. This ensures that the child classes are applied at the\n        // right time.\n        $$rAFScheduler(sortAnimations(toBeSortedAnimations));\n      });\n\n      return runner;\n\n      // TODO(matsko): change to reference nodes\n      function getAnchorNodes(node) {\n        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';\n        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)\n              ? [node]\n              : node.querySelectorAll(SELECTOR);\n        var anchors = [];\n        forEach(items, function(node) {\n          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);\n          if (attr && attr.length) {\n            anchors.push(node);\n          }\n        });\n        return anchors;\n      }\n\n      function groupAnimations(animations) {\n        var preparedAnimations = [];\n        var refLookup = {};\n        forEach(animations, function(animation, index) {\n          var element = animation.element;\n          var node = getDomNode(element);\n          var event = animation.event;\n          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;\n          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];\n\n          if (anchorNodes.length) {\n            var direction = enterOrMove ? 'to' : 'from';\n\n            forEach(anchorNodes, function(anchor) {\n              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);\n              refLookup[key] = refLookup[key] || {};\n              refLookup[key][direction] = {\n                animationID: index,\n                element: jqLite(anchor)\n              };\n            });\n          } else {\n            preparedAnimations.push(animation);\n          }\n        });\n\n        var usedIndicesLookup = {};\n        var anchorGroups = {};\n        forEach(refLookup, function(operations, key) {\n          var from = operations.from;\n          var to = operations.to;\n\n          if (!from || !to) {\n            // only one of these is set therefore we can't have an\n            // anchor animation since all three pieces are required\n            var index = from ? from.animationID : to.animationID;\n            var indexKey = index.toString();\n            if (!usedIndicesLookup[indexKey]) {\n              usedIndicesLookup[indexKey] = true;\n              preparedAnimations.push(animations[index]);\n            }\n            return;\n          }\n\n          var fromAnimation = animations[from.animationID];\n          var toAnimation = animations[to.animationID];\n          var lookupKey = from.animationID.toString();\n          if (!anchorGroups[lookupKey]) {\n            var group = anchorGroups[lookupKey] = {\n              structural: true,\n              beforeStart: function() {\n                fromAnimation.beforeStart();\n                toAnimation.beforeStart();\n              },\n              close: function() {\n                fromAnimation.close();\n                toAnimation.close();\n              },\n              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),\n              from: fromAnimation,\n              to: toAnimation,\n              anchors: [] // TODO(matsko): change to reference nodes\n            };\n\n            // the anchor animations require that the from and to elements both have at least\n            // one shared CSS class which effectively marries the two elements together to use\n            // the same animation driver and to properly sequence the anchor animation.\n            if (group.classes.length) {\n              preparedAnimations.push(group);\n            } else {\n              preparedAnimations.push(fromAnimation);\n              preparedAnimations.push(toAnimation);\n            }\n          }\n\n          anchorGroups[lookupKey].anchors.push({\n            'out': from.element, 'in': to.element\n          });\n        });\n\n        return preparedAnimations;\n      }\n\n      function cssClassesIntersection(a,b) {\n        a = a.split(' ');\n        b = b.split(' ');\n        var matches = [];\n\n        for (var i = 0; i < a.length; i++) {\n          var aa = a[i];\n          if (aa.substring(0,3) === 'ng-') continue;\n\n          for (var j = 0; j < b.length; j++) {\n            if (aa === b[j]) {\n              matches.push(aa);\n              break;\n            }\n          }\n        }\n\n        return matches.join(' ');\n      }\n\n      function invokeFirstDriver(animationDetails) {\n        // we loop in reverse order since the more general drivers (like CSS and JS)\n        // may attempt more elements, but custom drivers are more particular\n        for (var i = drivers.length - 1; i >= 0; i--) {\n          var driverName = drivers[i];\n          var factory = $injector.get(driverName);\n          var driver = factory(animationDetails);\n          if (driver) {\n            return driver;\n          }\n        }\n      }\n\n      function beforeStart() {\n        element.addClass(NG_ANIMATE_CLASSNAME);\n        if (tempClasses) {\n          $$jqLite.addClass(element, tempClasses);\n        }\n        if (prepareClassName) {\n          $$jqLite.removeClass(element, prepareClassName);\n          prepareClassName = null;\n        }\n      }\n\n      function updateAnimationRunners(animation, newRunner) {\n        if (animation.from && animation.to) {\n          update(animation.from.element);\n          update(animation.to.element);\n        } else {\n          update(animation.element);\n        }\n\n        function update(element) {\n          var runner = getRunner(element);\n          if (runner) runner.setHost(newRunner);\n        }\n      }\n\n      function handleDestroyedElement() {\n        var runner = getRunner(element);\n        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {\n          runner.end();\n        }\n      }\n\n      function close(rejected) {\n        element.off('$destroy', handleDestroyedElement);\n        removeRunner(element);\n\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n        options.domOperation();\n\n        if (tempClasses) {\n          $$jqLite.removeClass(element, tempClasses);\n        }\n\n        element.removeClass(NG_ANIMATE_CLASSNAME);\n        runner.complete(!rejected);\n      }\n    };\n  }];\n}];\n\n/**\n * @ngdoc directive\n * @name ngAnimateSwap\n * @restrict A\n * @scope\n *\n * @description\n *\n * ngAnimateSwap is a animation-oriented directive that allows for the container to\n * be removed and entered in whenever the associated expression changes. A\n * common usecase for this directive is a rotating banner or slider component which\n * contains one image being present at a time. When the active image changes\n * then the old image will perform a `leave` animation and the new element\n * will be inserted via an `enter` animation.\n *\n * @animations\n * | Animation                        | Occurs                               |\n * |----------------------------------|--------------------------------------|\n * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM  |\n * | {@link ng.$animate#leave leave}  | when the old element is removed from the DOM |\n *\n * @example\n * <example name=\"ngAnimateSwap-directive\" module=\"ngAnimateSwapExample\"\n *          deps=\"angular-animate.js\"\n *          animations=\"true\" fixBase=\"true\">\n *   <file name=\"index.html\">\n *     <div class=\"container\" ng-controller=\"AppCtrl\">\n *       <div ng-animate-swap=\"number\" class=\"cell swap-animation\" ng-class=\"colorClass(number)\">\n *         {{ number }}\n *       </div>\n *     </div>\n *   </file>\n *   <file name=\"script.js\">\n *     angular.module('ngAnimateSwapExample', ['ngAnimate'])\n *       .controller('AppCtrl', ['$scope', '$interval', function($scope, $interval) {\n *         $scope.number = 0;\n *         $interval(function() {\n *           $scope.number++;\n *         }, 1000);\n *\n *         var colors = ['red','blue','green','yellow','orange'];\n *         $scope.colorClass = function(number) {\n *           return colors[number % colors.length];\n *         };\n *       }]);\n *   </file>\n *  <file name=\"animations.css\">\n *  .container {\n *    height:250px;\n *    width:250px;\n *    position:relative;\n *    overflow:hidden;\n *    border:2px solid black;\n *  }\n *  .container .cell {\n *    font-size:150px;\n *    text-align:center;\n *    line-height:250px;\n *    position:absolute;\n *    top:0;\n *    left:0;\n *    right:0;\n *    border-bottom:2px solid black;\n *  }\n *  .swap-animation.ng-enter, .swap-animation.ng-leave {\n *    transition:0.5s linear all;\n *  }\n *  .swap-animation.ng-enter {\n *    top:-250px;\n *  }\n *  .swap-animation.ng-enter-active {\n *    top:0px;\n *  }\n *  .swap-animation.ng-leave {\n *    top:0px;\n *  }\n *  .swap-animation.ng-leave-active {\n *    top:250px;\n *  }\n *  .red { background:red; }\n *  .green { background:green; }\n *  .blue { background:blue; }\n *  .yellow { background:yellow; }\n *  .orange { background:orange; }\n *  </file>\n * </example>\n */\nvar ngAnimateSwapDirective = ['$animate', '$rootScope', function($animate, $rootScope) {\n  return {\n    restrict: 'A',\n    transclude: 'element',\n    terminal: true,\n    priority: 600, // we use 600 here to ensure that the directive is caught before others\n    link: function(scope, $element, attrs, ctrl, $transclude) {\n      var previousElement, previousScope;\n      scope.$watchCollection(attrs.ngAnimateSwap || attrs['for'], function(value) {\n        if (previousElement) {\n          $animate.leave(previousElement);\n        }\n        if (previousScope) {\n          previousScope.$destroy();\n          previousScope = null;\n        }\n        if (value || value === 0) {\n          previousScope = scope.$new();\n          $transclude(previousScope, function(element) {\n            previousElement = element;\n            $animate.enter(element, null, $element);\n          });\n        }\n      });\n    }\n  };\n}];\n\n/**\n * @ngdoc module\n * @name ngAnimate\n * @description\n *\n * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via\n * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an AngularJS app.\n *\n * ## Usage\n * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based\n * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For\n * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within\n * the HTML element that the animation will be triggered on.\n *\n * ## Directive Support\n * The following directives are \"animation aware\":\n *\n * | Directive                                                                                                | Supported Animations                                                     |\n * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|\n * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |\n * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |\n * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |\n * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |\n * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |\n * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |\n * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |\n * | {@link ng.directive:form#animations form} & {@link ng.directive:ngModel#animations ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |\n * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |\n * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |\n *\n * (More information can be found by visiting each the documentation associated with each directive.)\n *\n * ## CSS-based Animations\n *\n * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML\n * and CSS code we can create an animation that will be picked up by AngularJS when an underlying directive performs an operation.\n *\n * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:\n *\n * ```html\n * <div ng-if=\"bool\" class=\"fade\">\n *    Fade me in out\n * </div>\n * <button ng-click=\"bool=true\">Fade In!</button>\n * <button ng-click=\"bool=false\">Fade Out!</button>\n * ```\n *\n * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:\n *\n * ```css\n * /&#42; The starting CSS styles for the enter animation &#42;/\n * .fade.ng-enter {\n *   transition:0.5s linear all;\n *   opacity:0;\n * }\n *\n * /&#42; The finishing CSS styles for the enter animation &#42;/\n * .fade.ng-enter.ng-enter-active {\n *   opacity:1;\n * }\n * ```\n *\n * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two\n * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition\n * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.\n *\n * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:\n *\n * ```css\n * /&#42; now the element will fade out before it is removed from the DOM &#42;/\n * .fade.ng-leave {\n *   transition:0.5s linear all;\n *   opacity:1;\n * }\n * .fade.ng-leave.ng-leave-active {\n *   opacity:0;\n * }\n * ```\n *\n * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:\n *\n * ```css\n * /&#42; there is no need to define anything inside of the destination\n * CSS class since the keyframe will take charge of the animation &#42;/\n * .fade.ng-leave {\n *   animation: my_fade_animation 0.5s linear;\n *   -webkit-animation: my_fade_animation 0.5s linear;\n * }\n *\n * @keyframes my_fade_animation {\n *   from { opacity:1; }\n *   to { opacity:0; }\n * }\n *\n * @-webkit-keyframes my_fade_animation {\n *   from { opacity:1; }\n *   to { opacity:0; }\n * }\n * ```\n *\n * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.\n *\n * ### CSS Class-based Animations\n *\n * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different\n * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added\n * and removed.\n *\n * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:\n *\n * ```html\n * <div ng-show=\"bool\" class=\"fade\">\n *   Show and hide me\n * </div>\n * <button ng-click=\"bool=!bool\">Toggle</button>\n *\n * <style>\n * .fade.ng-hide {\n *   transition:0.5s linear all;\n *   opacity:0;\n * }\n * </style>\n * ```\n *\n * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since\n * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.\n *\n * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation\n * with CSS styles.\n *\n * ```html\n * <div ng-class=\"{on:onOff}\" class=\"highlight\">\n *   Highlight this box\n * </div>\n * <button ng-click=\"onOff=!onOff\">Toggle</button>\n *\n * <style>\n * .highlight {\n *   transition:0.5s linear all;\n * }\n * .highlight.on-add {\n *   background:white;\n * }\n * .highlight.on {\n *   background:yellow;\n * }\n * .highlight.on-remove {\n *   background:black;\n * }\n * </style>\n * ```\n *\n * We can also make use of CSS keyframes by placing them within the CSS classes.\n *\n *\n * ### CSS Staggering Animations\n * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a\n * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be\n * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for\n * the animation. The style property expected within the stagger class can either be a **transition-delay** or an\n * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).\n *\n * ```css\n * .my-animation.ng-enter {\n *   /&#42; standard transition code &#42;/\n *   transition: 1s linear all;\n *   opacity:0;\n * }\n * .my-animation.ng-enter-stagger {\n *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/\n *   transition-delay: 0.1s;\n *\n *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate\n *     to not accidentally inherit a delay property from another CSS class &#42;/\n *   transition-duration: 0s;\n *\n *   /&#42; if you are using animations instead of transitions you should configure as follows:\n *     animation-delay: 0.1s;\n *     animation-duration: 0s; &#42;/\n * }\n * .my-animation.ng-enter.ng-enter-active {\n *   /&#42; standard transition styles &#42;/\n *   opacity:1;\n * }\n * ```\n *\n * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations\n * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this\n * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation\n * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.\n *\n * The following code will issue the **ng-leave-stagger** event on the element provided:\n *\n * ```js\n * var kids = parent.children();\n *\n * $animate.leave(kids[0]); //stagger index=0\n * $animate.leave(kids[1]); //stagger index=1\n * $animate.leave(kids[2]); //stagger index=2\n * $animate.leave(kids[3]); //stagger index=3\n * $animate.leave(kids[4]); //stagger index=4\n *\n * window.requestAnimationFrame(function() {\n *   //stagger has reset itself\n *   $animate.leave(kids[5]); //stagger index=0\n *   $animate.leave(kids[6]); //stagger index=1\n *\n *   $scope.$digest();\n * });\n * ```\n *\n * Stagger animations are currently only supported within CSS-defined animations.\n *\n * ### The `ng-animate` CSS class\n *\n * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.\n * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).\n *\n * Therefore, animations can be applied to an element using this temporary class directly via CSS.\n *\n * ```css\n * .zipper.ng-animate {\n *   transition:0.5s linear all;\n * }\n * .zipper.ng-enter {\n *   opacity:0;\n * }\n * .zipper.ng-enter.ng-enter-active {\n *   opacity:1;\n * }\n * .zipper.ng-leave {\n *   opacity:1;\n * }\n * .zipper.ng-leave.ng-leave-active {\n *   opacity:0;\n * }\n * ```\n *\n * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove\n * the CSS class once an animation has completed.)\n *\n *\n * ### The `ng-[event]-prepare` class\n *\n * This is a special class that can be used to prevent unwanted flickering / flash of content before\n * the actual animation starts. The class is added as soon as an animation is initialized, but removed\n * before the actual animation starts (after waiting for a $digest).\n * It is also only added for *structural* animations (`enter`, `move`, and `leave`).\n *\n * In practice, flickering can appear when nesting elements with structural animations such as `ngIf`\n * into elements that have class-based animations such as `ngClass`.\n *\n * ```html\n * <div ng-class=\"{red: myProp}\">\n *   <div ng-class=\"{blue: myProp}\">\n *     <div class=\"message\" ng-if=\"myProp\"></div>\n *   </div>\n * </div>\n * ```\n *\n * It is possible that during the `enter` animation, the `.message` div will be briefly visible before it starts animating.\n * In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:\n *\n * ```css\n * .message.ng-enter-prepare {\n *   opacity: 0;\n * }\n *\n * ```\n *\n * ## JavaScript-based Animations\n *\n * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared\n * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the\n * `module.animation()` module function we can register the animation.\n *\n * Let's see an example of a enter/leave animation using `ngRepeat`:\n *\n * ```html\n * <div ng-repeat=\"item in items\" class=\"slide\">\n *   {{ item }}\n * </div>\n * ```\n *\n * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:\n *\n * ```js\n * myModule.animation('.slide', [function() {\n *   return {\n *     // make note that other events (like addClass/removeClass)\n *     // have different function input parameters\n *     enter: function(element, doneFn) {\n *       jQuery(element).fadeIn(1000, doneFn);\n *\n *       // remember to call doneFn so that AngularJS\n *       // knows that the animation has concluded\n *     },\n *\n *     move: function(element, doneFn) {\n *       jQuery(element).fadeIn(1000, doneFn);\n *     },\n *\n *     leave: function(element, doneFn) {\n *       jQuery(element).fadeOut(1000, doneFn);\n *     }\n *   }\n * }]);\n * ```\n *\n * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as\n * greensock.js and velocity.js.\n *\n * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define\n * our animations inside of the same registered animation, however, the function input arguments are a bit different:\n *\n * ```html\n * <div ng-class=\"color\" class=\"colorful\">\n *   this box is moody\n * </div>\n * <button ng-click=\"color='red'\">Change to red</button>\n * <button ng-click=\"color='blue'\">Change to blue</button>\n * <button ng-click=\"color='green'\">Change to green</button>\n * ```\n *\n * ```js\n * myModule.animation('.colorful', [function() {\n *   return {\n *     addClass: function(element, className, doneFn) {\n *       // do some cool animation and call the doneFn\n *     },\n *     removeClass: function(element, className, doneFn) {\n *       // do some cool animation and call the doneFn\n *     },\n *     setClass: function(element, addedClass, removedClass, doneFn) {\n *       // do some cool animation and call the doneFn\n *     }\n *   }\n * }]);\n * ```\n *\n * ## CSS + JS Animations Together\n *\n * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of AngularJS,\n * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking\n * charge of the animation**:\n *\n * ```html\n * <div ng-if=\"bool\" class=\"slide\">\n *   Slide in and out\n * </div>\n * ```\n *\n * ```js\n * myModule.animation('.slide', [function() {\n *   return {\n *     enter: function(element, doneFn) {\n *       jQuery(element).slideIn(1000, doneFn);\n *     }\n *   }\n * }]);\n * ```\n *\n * ```css\n * .slide.ng-enter {\n *   transition:0.5s linear all;\n *   transform:translateY(-100px);\n * }\n * .slide.ng-enter.ng-enter-active {\n *   transform:translateY(0);\n * }\n * ```\n *\n * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the\n * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from\n * our own JS-based animation code:\n *\n * ```js\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element) {\n*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.\n *       return $animateCss(element, {\n *         event: 'enter',\n *         structural: true\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.\n *\n * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or\n * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that\n * data into `$animateCss` directly:\n *\n * ```js\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element) {\n *       return $animateCss(element, {\n *         event: 'enter',\n *         structural: true,\n *         addClass: 'maroon-setting',\n *         from: { height:0 },\n *         to: { height: 200 }\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * Now we can fill in the rest via our transition CSS code:\n *\n * ```css\n * /&#42; the transition tells ngAnimate to make the animation happen &#42;/\n * .slide.ng-enter { transition:0.5s linear all; }\n *\n * /&#42; this extra CSS class will be absorbed into the transition\n * since the $animateCss code is adding the class &#42;/\n * .maroon-setting { background:red; }\n * ```\n *\n * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.\n *\n * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.\n *\n * ## Animation Anchoring (via `ng-animate-ref`)\n *\n * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between\n * structural areas of an application (like views) by pairing up elements using an attribute\n * called `ng-animate-ref`.\n *\n * Let's say for example we have two views that are managed by `ng-view` and we want to show\n * that there is a relationship between two components situated in within these views. By using the\n * `ng-animate-ref` attribute we can identify that the two components are paired together and we\n * can then attach an animation, which is triggered when the view changes.\n *\n * Say for example we have the following template code:\n *\n * ```html\n * <!-- index.html -->\n * <div ng-view class=\"view-animation\">\n * </div>\n *\n * <!-- home.html -->\n * <a href=\"#/banner-page\">\n *   <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\n * </a>\n *\n * <!-- banner-page.html -->\n * <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\n * ```\n *\n * Now, when the view changes (once the link is clicked), ngAnimate will examine the\n * HTML contents to see if there is a match reference between any components in the view\n * that is leaving and the view that is entering. It will scan both the view which is being\n * removed (leave) and inserted (enter) to see if there are any paired DOM elements that\n * contain a matching ref value.\n *\n * The two images match since they share the same ref value. ngAnimate will now create a\n * transport element (which is a clone of the first image element) and it will then attempt\n * to animate to the position of the second image element in the next view. For the animation to\n * work a special CSS class called `ng-anchor` will be added to the transported element.\n *\n * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then\n * ngAnimate will handle the entire transition for us as well as the addition and removal of\n * any changes of CSS classes between the elements:\n *\n * ```css\n * .banner.ng-anchor {\n *   /&#42; this animation will last for 1 second since there are\n *          two phases to the animation (an `in` and an `out` phase) &#42;/\n *   transition:0.5s linear all;\n * }\n * ```\n *\n * We also **must** include animations for the views that are being entered and removed\n * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).\n *\n * ```css\n * .view-animation.ng-enter, .view-animation.ng-leave {\n *   transition:0.5s linear all;\n *   position:fixed;\n *   left:0;\n *   top:0;\n *   width:100%;\n * }\n * .view-animation.ng-enter {\n *   transform:translateX(100%);\n * }\n * .view-animation.ng-leave,\n * .view-animation.ng-enter.ng-enter-active {\n *   transform:translateX(0%);\n * }\n * .view-animation.ng-leave.ng-leave-active {\n *   transform:translateX(-100%);\n * }\n * ```\n *\n * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:\n * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away\n * from its origin. Once that animation is over then the `in` stage occurs which animates the\n * element to its destination. The reason why there are two animations is to give enough time\n * for the enter animation on the new element to be ready.\n *\n * The example above sets up a transition for both the in and out phases, but we can also target the out or\n * in phases directly via `ng-anchor-out` and `ng-anchor-in`.\n *\n * ```css\n * .banner.ng-anchor-out {\n *   transition: 0.5s linear all;\n *\n *   /&#42; the scale will be applied during the out animation,\n *          but will be animated away when the in animation runs &#42;/\n *   transform: scale(1.2);\n * }\n *\n * .banner.ng-anchor-in {\n *   transition: 1s linear all;\n * }\n * ```\n *\n *\n *\n *\n * ### Anchoring Demo\n *\n  <example module=\"anchoringExample\"\n           name=\"anchoringExample\"\n           id=\"anchoringExample\"\n           deps=\"angular-animate.js;angular-route.js\"\n           animations=\"true\">\n    <file name=\"index.html\">\n      <a href=\"#!/\">Home</a>\n      <hr />\n      <div class=\"view-container\">\n        <div ng-view class=\"view\"></div>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])\n        .config(['$routeProvider', function($routeProvider) {\n          $routeProvider.when('/', {\n            templateUrl: 'home.html',\n            controller: 'HomeController as home'\n          });\n          $routeProvider.when('/profile/:id', {\n            templateUrl: 'profile.html',\n            controller: 'ProfileController as profile'\n          });\n        }])\n        .run(['$rootScope', function($rootScope) {\n          $rootScope.records = [\n            { id: 1, title: 'Miss Beulah Roob' },\n            { id: 2, title: 'Trent Morissette' },\n            { id: 3, title: 'Miss Ava Pouros' },\n            { id: 4, title: 'Rod Pouros' },\n            { id: 5, title: 'Abdul Rice' },\n            { id: 6, title: 'Laurie Rutherford Sr.' },\n            { id: 7, title: 'Nakia McLaughlin' },\n            { id: 8, title: 'Jordon Blanda DVM' },\n            { id: 9, title: 'Rhoda Hand' },\n            { id: 10, title: 'Alexandrea Sauer' }\n          ];\n        }])\n        .controller('HomeController', [function() {\n          //empty\n        }])\n        .controller('ProfileController', ['$rootScope', '$routeParams',\n            function ProfileController($rootScope, $routeParams) {\n          var index = parseInt($routeParams.id, 10);\n          var record = $rootScope.records[index - 1];\n\n          this.title = record.title;\n          this.id = record.id;\n        }]);\n    </file>\n    <file name=\"home.html\">\n      <h2>Welcome to the home page</h1>\n      <p>Please click on an element</p>\n      <a class=\"record\"\n         ng-href=\"#!/profile/{{ record.id }}\"\n         ng-animate-ref=\"{{ record.id }}\"\n         ng-repeat=\"record in records\">\n        {{ record.title }}\n      </a>\n    </file>\n    <file name=\"profile.html\">\n      <div class=\"profile record\" ng-animate-ref=\"{{ profile.id }}\">\n        {{ profile.title }}\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      .record {\n        display:block;\n        font-size:20px;\n      }\n      .profile {\n        background:black;\n        color:white;\n        font-size:100px;\n      }\n      .view-container {\n        position:relative;\n      }\n      .view-container > .view.ng-animate {\n        position:absolute;\n        top:0;\n        left:0;\n        width:100%;\n        min-height:500px;\n      }\n      .view.ng-enter, .view.ng-leave,\n      .record.ng-anchor {\n        transition:0.5s linear all;\n      }\n      .view.ng-enter {\n        transform:translateX(100%);\n      }\n      .view.ng-enter.ng-enter-active, .view.ng-leave {\n        transform:translateX(0%);\n      }\n      .view.ng-leave.ng-leave-active {\n        transform:translateX(-100%);\n      }\n      .record.ng-anchor-out {\n        background:red;\n      }\n    </file>\n  </example>\n *\n * ### How is the element transported?\n *\n * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting\n * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element\n * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The\n * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match\n * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied\n * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class\n * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element\n * will become visible since the shim class will be removed.\n *\n * ### How is the morphing handled?\n *\n * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out\n * what CSS classes differ between the starting element and the destination element. These different CSS classes\n * will be added/removed on the anchor element and a transition will be applied (the transition that is provided\n * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will\n * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that\n * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since\n * the cloned element is placed inside of root element which is likely close to the body element).\n *\n * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.\n *\n *\n * ## Using $animate in your directive code\n *\n * So far we've explored how to feed in animations into an AngularJS application, but how do we trigger animations within our own directives in our application?\n * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's\n * imagine we have a greeting box that shows and hides itself when the data changes\n *\n * ```html\n * <greeting-box active=\"onOrOff\">Hi there</greeting-box>\n * ```\n *\n * ```js\n * ngModule.directive('greetingBox', ['$animate', function($animate) {\n *   return function(scope, element, attrs) {\n *     attrs.$observe('active', function(value) {\n *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');\n *     });\n *   });\n * }]);\n * ```\n *\n * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element\n * in our HTML code then we can trigger a CSS or JS animation to happen.\n *\n * ```css\n * /&#42; normally we would create a CSS class to reference on the element &#42;/\n * greeting-box.on { transition:0.5s linear all; background:green; color:white; }\n * ```\n *\n * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's\n * possible be sure to visit the {@link ng.$animate $animate service API page}.\n *\n *\n * ## Callbacks and Promises\n *\n * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger\n * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has\n * ended by chaining onto the returned promise that animation method returns.\n *\n * ```js\n * // somewhere within the depths of the directive\n * $animate.enter(element, parent).then(function() {\n *   //the animation has completed\n * });\n * ```\n *\n * (Note that earlier versions of AngularJS prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case\n * anymore.)\n *\n * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering\n * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view\n * routing controller to hook into that:\n *\n * ```js\n * ngModule.controller('HomePageController', ['$animate', function($animate) {\n *   $animate.on('enter', ngViewElement, function(element) {\n *     // the animation for this route has completed\n *   }]);\n * }])\n * ```\n *\n * (Note that you will need to trigger a digest within the callback to get AngularJS to notice any scope-related changes.)\n */\n\nvar copy;\nvar extend;\nvar forEach;\nvar isArray;\nvar isDefined;\nvar isElement;\nvar isFunction;\nvar isObject;\nvar isString;\nvar isUndefined;\nvar jqLite;\nvar noop;\n\n/**\n * @ngdoc service\n * @name $animate\n * @kind object\n *\n * @description\n * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.\n *\n * Click here {@link ng.$animate to learn more about animations with `$animate`}.\n */\nangular.module('ngAnimate', [], function initAngularHelpers() {\n  // Access helpers from AngularJS core.\n  // Do it inside a `config` block to ensure `window.angular` is available.\n  noop        = angular.noop;\n  copy        = angular.copy;\n  extend      = angular.extend;\n  jqLite      = angular.element;\n  forEach     = angular.forEach;\n  isArray     = angular.isArray;\n  isString    = angular.isString;\n  isObject    = angular.isObject;\n  isUndefined = angular.isUndefined;\n  isDefined   = angular.isDefined;\n  isFunction  = angular.isFunction;\n  isElement   = angular.isElement;\n})\n  .info({ angularVersion: '1.6.9' })\n  .directive('ngAnimateSwap', ngAnimateSwapDirective)\n\n  .directive('ngAnimateChildren', $$AnimateChildrenDirective)\n  .factory('$$rAFScheduler', $$rAFSchedulerFactory)\n\n  .provider('$$animateQueue', $$AnimateQueueProvider)\n  .provider('$$animation', $$AnimationProvider)\n\n  .provider('$animateCss', $AnimateCssProvider)\n  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)\n\n  .provider('$$animateJs', $$AnimateJsProvider)\n  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);\n\n\n})(window, window.angular);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-animate/angular-animate.js\n// module id = 259\n// module chunks = 0 1","require('./angular-touch');\nmodule.exports = 'ngTouch';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-touch/index.js\n// module id = 260\n// module chunks = 0 1","/**\n * @license AngularJS v1.6.9\n * (c) 2010-2018 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\n/* global ngTouchClickDirectiveFactory: false */\n\n/**\n * @ngdoc module\n * @name ngTouch\n * @description\n *\n * The `ngTouch` module provides helpers for touch-enabled devices.\n * The implementation is based on jQuery Mobile touch event handling\n * ([jquerymobile.com](http://jquerymobile.com/)). *\n *\n * See {@link ngTouch.$swipe `$swipe`} for usage.\n *\n */\n\n// define ngTouch module\n/* global -ngTouch */\nvar ngTouch = angular.module('ngTouch', []);\n\nngTouch.info({ angularVersion: '1.6.9' });\n\nngTouch.provider('$touch', $TouchProvider);\n\nfunction nodeName_(element) {\n  return angular.lowercase(element.nodeName || (element[0] && element[0].nodeName));\n}\n\n/**\n * @ngdoc provider\n * @name $touchProvider\n *\n * @description\n * The `$touchProvider` allows enabling / disabling {@link ngTouch.ngClick ngTouch's ngClick directive}.\n */\n$TouchProvider.$inject = ['$provide', '$compileProvider'];\nfunction $TouchProvider($provide, $compileProvider) {\n\n  /**\n   * @ngdoc method\n   * @name  $touchProvider#ngClickOverrideEnabled\n   *\n   * @param {boolean=} enabled update the ngClickOverrideEnabled state if provided, otherwise just return the\n   * current ngClickOverrideEnabled state\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter\n   *\n   * @kind function\n   *\n   * @description\n   * Call this method to enable/disable {@link ngTouch.ngClick ngTouch's ngClick directive}. If enabled,\n   * the default ngClick directive will be replaced by a version that eliminates the 300ms delay for\n   * click events on browser for touch-devices.\n   *\n   * The default is `false`.\n   *\n   */\n  var ngClickOverrideEnabled = false;\n  var ngClickDirectiveAdded = false;\n  // eslint-disable-next-line no-invalid-this\n  this.ngClickOverrideEnabled = function(enabled) {\n    if (angular.isDefined(enabled)) {\n\n      if (enabled && !ngClickDirectiveAdded) {\n        ngClickDirectiveAdded = true;\n\n        // Use this to identify the correct directive in the delegate\n        ngTouchClickDirectiveFactory.$$moduleName = 'ngTouch';\n        $compileProvider.directive('ngClick', ngTouchClickDirectiveFactory);\n\n        $provide.decorator('ngClickDirective', ['$delegate', function($delegate) {\n          if (ngClickOverrideEnabled) {\n            // drop the default ngClick directive\n            $delegate.shift();\n          } else {\n            // drop the ngTouch ngClick directive if the override has been re-disabled (because\n            // we cannot de-register added directives)\n            var i = $delegate.length - 1;\n            while (i >= 0) {\n              if ($delegate[i].$$moduleName === 'ngTouch') {\n                $delegate.splice(i, 1);\n                break;\n              }\n              i--;\n            }\n          }\n\n          return $delegate;\n        }]);\n      }\n\n      ngClickOverrideEnabled = enabled;\n      return this;\n    }\n\n    return ngClickOverrideEnabled;\n  };\n\n  /**\n  * @ngdoc service\n  * @name $touch\n  * @kind object\n  *\n  * @description\n  * Provides the {@link ngTouch.$touch#ngClickOverrideEnabled `ngClickOverrideEnabled`} method.\n  *\n  */\n  // eslint-disable-next-line no-invalid-this\n  this.$get = function() {\n    return {\n      /**\n       * @ngdoc method\n       * @name  $touch#ngClickOverrideEnabled\n       *\n       * @returns {*} current value of `ngClickOverrideEnabled` set in the {@link ngTouch.$touchProvider $touchProvider},\n       * i.e. if {@link ngTouch.ngClick ngTouch's ngClick} directive is enabled.\n       *\n       * @kind function\n       */\n      ngClickOverrideEnabled: function() {\n        return ngClickOverrideEnabled;\n      }\n    };\n  };\n\n}\n\n/* global ngTouch: false */\n\n    /**\n     * @ngdoc service\n     * @name $swipe\n     *\n     * @description\n     * The `$swipe` service is a service that abstracts the messier details of hold-and-drag swipe\n     * behavior, to make implementing swipe-related directives more convenient.\n     *\n     * Requires the {@link ngTouch `ngTouch`} module to be installed.\n     *\n     * `$swipe` is used by the `ngSwipeLeft` and `ngSwipeRight` directives in `ngTouch`.\n     *\n     * # Usage\n     * The `$swipe` service is an object with a single method: `bind`. `bind` takes an element\n     * which is to be watched for swipes, and an object with four handler functions. See the\n     * documentation for `bind` below.\n     */\n\nngTouch.factory('$swipe', [function() {\n  // The total distance in any direction before we make the call on swipe vs. scroll.\n  var MOVE_BUFFER_RADIUS = 10;\n\n  var POINTER_EVENTS = {\n    'mouse': {\n      start: 'mousedown',\n      move: 'mousemove',\n      end: 'mouseup'\n    },\n    'touch': {\n      start: 'touchstart',\n      move: 'touchmove',\n      end: 'touchend',\n      cancel: 'touchcancel'\n    },\n    'pointer': {\n      start: 'pointerdown',\n      move: 'pointermove',\n      end: 'pointerup',\n      cancel: 'pointercancel'\n    }\n  };\n\n  function getCoordinates(event) {\n    var originalEvent = event.originalEvent || event;\n    var touches = originalEvent.touches && originalEvent.touches.length ? originalEvent.touches : [originalEvent];\n    var e = (originalEvent.changedTouches && originalEvent.changedTouches[0]) || touches[0];\n\n    return {\n      x: e.clientX,\n      y: e.clientY\n    };\n  }\n\n  function getEvents(pointerTypes, eventType) {\n    var res = [];\n    angular.forEach(pointerTypes, function(pointerType) {\n      var eventName = POINTER_EVENTS[pointerType][eventType];\n      if (eventName) {\n        res.push(eventName);\n      }\n    });\n    return res.join(' ');\n  }\n\n  return {\n    /**\n     * @ngdoc method\n     * @name $swipe#bind\n     *\n     * @description\n     * The main method of `$swipe`. It takes an element to be watched for swipe motions, and an\n     * object containing event handlers.\n     * The pointer types that should be used can be specified via the optional\n     * third argument, which is an array of strings `'mouse'`, `'touch'` and `'pointer'`. By default,\n     * `$swipe` will listen for `mouse`, `touch` and `pointer` events.\n     *\n     * The four events are `start`, `move`, `end`, and `cancel`. `start`, `move`, and `end`\n     * receive as a parameter a coordinates object of the form `{ x: 150, y: 310 }` and the raw\n     * `event`. `cancel` receives the raw `event` as its single parameter.\n     *\n     * `start` is called on either `mousedown`, `touchstart` or `pointerdown`. After this event, `$swipe` is\n     * watching for `touchmove`, `mousemove` or `pointermove` events. These events are ignored until the total\n     * distance moved in either dimension exceeds a small threshold.\n     *\n     * Once this threshold is exceeded, either the horizontal or vertical delta is greater.\n     * - If the horizontal distance is greater, this is a swipe and `move` and `end` events follow.\n     * - If the vertical distance is greater, this is a scroll, and we let the browser take over.\n     *   A `cancel` event is sent.\n     *\n     * `move` is called on `mousemove`, `touchmove` and `pointermove` after the above logic has determined that\n     * a swipe is in progress.\n     *\n     * `end` is called when a swipe is successfully completed with a `touchend`, `mouseup` or `pointerup`.\n     *\n     * `cancel` is called either on a `touchcancel` or `pointercancel`  from the browser, or when we begin scrolling\n     * as described above.\n     *\n     */\n    bind: function(element, eventHandlers, pointerTypes) {\n      // Absolute total movement, used to control swipe vs. scroll.\n      var totalX, totalY;\n      // Coordinates of the start position.\n      var startCoords;\n      // Last event's position.\n      var lastPos;\n      // Whether a swipe is active.\n      var active = false;\n\n      pointerTypes = pointerTypes || ['mouse', 'touch', 'pointer'];\n      element.on(getEvents(pointerTypes, 'start'), function(event) {\n        startCoords = getCoordinates(event);\n        active = true;\n        totalX = 0;\n        totalY = 0;\n        lastPos = startCoords;\n        if (eventHandlers['start']) {\n          eventHandlers['start'](startCoords, event);\n        }\n      });\n      var events = getEvents(pointerTypes, 'cancel');\n      if (events) {\n        element.on(events, function(event) {\n          active = false;\n          if (eventHandlers['cancel']) {\n            eventHandlers['cancel'](event);\n          }\n        });\n      }\n\n      element.on(getEvents(pointerTypes, 'move'), function(event) {\n        if (!active) return;\n\n        // Android will send a touchcancel if it thinks we're starting to scroll.\n        // So when the total distance (+ or - or both) exceeds 10px in either direction,\n        // we either:\n        // - On totalX > totalY, we send preventDefault() and treat this as a swipe.\n        // - On totalY > totalX, we let the browser handle it as a scroll.\n\n        if (!startCoords) return;\n        var coords = getCoordinates(event);\n\n        totalX += Math.abs(coords.x - lastPos.x);\n        totalY += Math.abs(coords.y - lastPos.y);\n\n        lastPos = coords;\n\n        if (totalX < MOVE_BUFFER_RADIUS && totalY < MOVE_BUFFER_RADIUS) {\n          return;\n        }\n\n        // One of totalX or totalY has exceeded the buffer, so decide on swipe vs. scroll.\n        if (totalY > totalX) {\n          // Allow native scrolling to take over.\n          active = false;\n          if (eventHandlers['cancel']) {\n            eventHandlers['cancel'](event);\n          }\n          return;\n        } else {\n          // Prevent the browser from scrolling.\n          event.preventDefault();\n          if (eventHandlers['move']) {\n            eventHandlers['move'](coords, event);\n          }\n        }\n      });\n\n      element.on(getEvents(pointerTypes, 'end'), function(event) {\n        if (!active) return;\n        active = false;\n        if (eventHandlers['end']) {\n          eventHandlers['end'](getCoordinates(event), event);\n        }\n      });\n    }\n  };\n}]);\n\n/* global ngTouch: false,\n  nodeName_: false\n*/\n\n/**\n * @ngdoc directive\n * @name ngClick\n * @deprecated\n * sinceVersion=\"v1.5.0\"\n * This directive is deprecated and **disabled** by default.\n * The directive will receive no further support and might be removed from future releases.\n * If you need the directive, you can enable it with the {@link ngTouch.$touchProvider $touchProvider#ngClickOverrideEnabled}\n * function. We also recommend that you migrate to [FastClick](https://github.com/ftlabs/fastclick).\n * To learn more about the 300ms delay, this [Telerik article](http://developer.telerik.com/featured/300-ms-click-delay-ios-8/)\n * gives a good overview.\n *\n * @description\n * A more powerful replacement for the default ngClick designed to be used on touchscreen\n * devices. Most mobile browsers wait about 300ms after a tap-and-release before sending\n * the click event. This version handles them immediately, and then prevents the\n * following click event from propagating.\n *\n * Requires the {@link ngTouch `ngTouch`} module to be installed.\n *\n * This directive can fall back to using an ordinary click event, and so works on desktop\n * browsers as well as mobile.\n *\n * This directive also sets the CSS class `ng-click-active` while the element is being held\n * down (by a mouse click or touch) so you can restyle the depressed element if you wish.\n *\n * @element ANY\n * @param {expression} ngClick {@link guide/expression Expression} to evaluate\n * upon tap. (Event object is available as `$event`)\n *\n * @example\n    <example module=\"ngClickExample\" deps=\"angular-touch.js\" name=\"ng-touch-ng-click\">\n      <file name=\"index.html\">\n        <button ng-click=\"count = count + 1\" ng-init=\"count=0\">\n          Increment\n        </button>\n        count: {{ count }}\n      </file>\n      <file name=\"script.js\">\n        angular.module('ngClickExample', ['ngTouch']);\n      </file>\n    </example>\n */\n\nvar ngTouchClickDirectiveFactory = ['$parse', '$timeout', '$rootElement',\n    function($parse, $timeout, $rootElement) {\n  var TAP_DURATION = 750; // Shorter than 750ms is a tap, longer is a taphold or drag.\n  var MOVE_TOLERANCE = 12; // 12px seems to work in most mobile browsers.\n  var PREVENT_DURATION = 2500; // 2.5 seconds maximum from preventGhostClick call to click\n  var CLICKBUSTER_THRESHOLD = 25; // 25 pixels in any dimension is the limit for busting clicks.\n\n  var ACTIVE_CLASS_NAME = 'ng-click-active';\n  var lastPreventedTime;\n  var touchCoordinates;\n  var lastLabelClickCoordinates;\n\n\n  // TAP EVENTS AND GHOST CLICKS\n  //\n  // Why tap events?\n  // Mobile browsers detect a tap, then wait a moment (usually ~300ms) to see if you're\n  // double-tapping, and then fire a click event.\n  //\n  // This delay sucks and makes mobile apps feel unresponsive.\n  // So we detect touchstart, touchcancel and touchend ourselves and determine when\n  // the user has tapped on something.\n  //\n  // What happens when the browser then generates a click event?\n  // The browser, of course, also detects the tap and fires a click after a delay. This results in\n  // tapping/clicking twice. We do \"clickbusting\" to prevent it.\n  //\n  // How does it work?\n  // We attach global touchstart and click handlers, that run during the capture (early) phase.\n  // So the sequence for a tap is:\n  // - global touchstart: Sets an \"allowable region\" at the point touched.\n  // - element's touchstart: Starts a touch\n  // (- touchcancel ends the touch, no click follows)\n  // - element's touchend: Determines if the tap is valid (didn't move too far away, didn't hold\n  //   too long) and fires the user's tap handler. The touchend also calls preventGhostClick().\n  // - preventGhostClick() removes the allowable region the global touchstart created.\n  // - The browser generates a click event.\n  // - The global click handler catches the click, and checks whether it was in an allowable region.\n  //     - If preventGhostClick was called, the region will have been removed, the click is busted.\n  //     - If the region is still there, the click proceeds normally. Therefore clicks on links and\n  //       other elements without ngTap on them work normally.\n  //\n  // This is an ugly, terrible hack!\n  // Yeah, tell me about it. The alternatives are using the slow click events, or making our users\n  // deal with the ghost clicks, so I consider this the least of evils. Fortunately AngularJS\n  // encapsulates this ugly logic away from the user.\n  //\n  // Why not just put click handlers on the element?\n  // We do that too, just to be sure. If the tap event caused the DOM to change,\n  // it is possible another element is now in that position. To take account for these possibly\n  // distinct elements, the handlers are global and care only about coordinates.\n\n  // Checks if the coordinates are close enough to be within the region.\n  function hit(x1, y1, x2, y2) {\n    return Math.abs(x1 - x2) < CLICKBUSTER_THRESHOLD && Math.abs(y1 - y2) < CLICKBUSTER_THRESHOLD;\n  }\n\n  // Checks a list of allowable regions against a click location.\n  // Returns true if the click should be allowed.\n  // Splices out the allowable region from the list after it has been used.\n  function checkAllowableRegions(touchCoordinates, x, y) {\n    for (var i = 0; i < touchCoordinates.length; i += 2) {\n      if (hit(touchCoordinates[i], touchCoordinates[i + 1], x, y)) {\n        touchCoordinates.splice(i, i + 2);\n        return true; // allowable region\n      }\n    }\n    return false; // No allowable region; bust it.\n  }\n\n  // Global click handler that prevents the click if it's in a bustable zone and preventGhostClick\n  // was called recently.\n  function onClick(event) {\n    if (Date.now() - lastPreventedTime > PREVENT_DURATION) {\n      return; // Too old.\n    }\n\n    var touches = event.touches && event.touches.length ? event.touches : [event];\n    var x = touches[0].clientX;\n    var y = touches[0].clientY;\n    // Work around desktop Webkit quirk where clicking a label will fire two clicks (on the label\n    // and on the input element). Depending on the exact browser, this second click we don't want\n    // to bust has either (0,0), negative coordinates, or coordinates equal to triggering label\n    // click event\n    if (x < 1 && y < 1) {\n      return; // offscreen\n    }\n    if (lastLabelClickCoordinates &&\n        lastLabelClickCoordinates[0] === x && lastLabelClickCoordinates[1] === y) {\n      return; // input click triggered by label click\n    }\n    // reset label click coordinates on first subsequent click\n    if (lastLabelClickCoordinates) {\n      lastLabelClickCoordinates = null;\n    }\n    // remember label click coordinates to prevent click busting of trigger click event on input\n    if (nodeName_(event.target) === 'label') {\n      lastLabelClickCoordinates = [x, y];\n    }\n\n    // Look for an allowable region containing this click.\n    // If we find one, that means it was created by touchstart and not removed by\n    // preventGhostClick, so we don't bust it.\n    if (checkAllowableRegions(touchCoordinates, x, y)) {\n      return;\n    }\n\n    // If we didn't find an allowable region, bust the click.\n    event.stopPropagation();\n    event.preventDefault();\n\n    // Blur focused form elements\n    if (event.target && event.target.blur) {\n      event.target.blur();\n    }\n  }\n\n\n  // Global touchstart handler that creates an allowable region for a click event.\n  // This allowable region can be removed by preventGhostClick if we want to bust it.\n  function onTouchStart(event) {\n    var touches = event.touches && event.touches.length ? event.touches : [event];\n    var x = touches[0].clientX;\n    var y = touches[0].clientY;\n    touchCoordinates.push(x, y);\n\n    $timeout(function() {\n      // Remove the allowable region.\n      for (var i = 0; i < touchCoordinates.length; i += 2) {\n        if (touchCoordinates[i] === x && touchCoordinates[i + 1] === y) {\n          touchCoordinates.splice(i, i + 2);\n          return;\n        }\n      }\n    }, PREVENT_DURATION, false);\n  }\n\n  // On the first call, attaches some event handlers. Then whenever it gets called, it creates a\n  // zone around the touchstart where clicks will get busted.\n  function preventGhostClick(x, y) {\n    if (!touchCoordinates) {\n      $rootElement[0].addEventListener('click', onClick, true);\n      $rootElement[0].addEventListener('touchstart', onTouchStart, true);\n      touchCoordinates = [];\n    }\n\n    lastPreventedTime = Date.now();\n\n    checkAllowableRegions(touchCoordinates, x, y);\n  }\n\n  // Actual linking function.\n  return function(scope, element, attr) {\n    var clickHandler = $parse(attr.ngClick),\n        tapping = false,\n        tapElement,  // Used to blur the element after a tap.\n        startTime,   // Used to check if the tap was held too long.\n        touchStartX,\n        touchStartY;\n\n    function resetState() {\n      tapping = false;\n      element.removeClass(ACTIVE_CLASS_NAME);\n    }\n\n    element.on('touchstart', function(event) {\n      tapping = true;\n      tapElement = event.target ? event.target : event.srcElement; // IE uses srcElement.\n      // Hack for Safari, which can target text nodes instead of containers.\n      if (tapElement.nodeType === 3) {\n        tapElement = tapElement.parentNode;\n      }\n\n      element.addClass(ACTIVE_CLASS_NAME);\n\n      startTime = Date.now();\n\n      // Use jQuery originalEvent\n      var originalEvent = event.originalEvent || event;\n      var touches = originalEvent.touches && originalEvent.touches.length ? originalEvent.touches : [originalEvent];\n      var e = touches[0];\n      touchStartX = e.clientX;\n      touchStartY = e.clientY;\n    });\n\n    element.on('touchcancel', function(event) {\n      resetState();\n    });\n\n    element.on('touchend', function(event) {\n      var diff = Date.now() - startTime;\n\n      // Use jQuery originalEvent\n      var originalEvent = event.originalEvent || event;\n      var touches = (originalEvent.changedTouches && originalEvent.changedTouches.length) ?\n          originalEvent.changedTouches :\n          ((originalEvent.touches && originalEvent.touches.length) ? originalEvent.touches : [originalEvent]);\n      var e = touches[0];\n      var x = e.clientX;\n      var y = e.clientY;\n      var dist = Math.sqrt(Math.pow(x - touchStartX, 2) + Math.pow(y - touchStartY, 2));\n\n      if (tapping && diff < TAP_DURATION && dist < MOVE_TOLERANCE) {\n        // Call preventGhostClick so the clickbuster will catch the corresponding click.\n        preventGhostClick(x, y);\n\n        // Blur the focused element (the button, probably) before firing the callback.\n        // This doesn't work perfectly on Android Chrome, but seems to work elsewhere.\n        // I couldn't get anything to work reliably on Android Chrome.\n        if (tapElement) {\n          tapElement.blur();\n        }\n\n        if (!angular.isDefined(attr.disabled) || attr.disabled === false) {\n          element.triggerHandler('click', [event]);\n        }\n      }\n\n      resetState();\n    });\n\n    // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click\n    // something else nearby.\n    element.onclick = function(event) { };\n\n    // Actual click handler.\n    // There are three different kinds of clicks, only two of which reach this point.\n    // - On desktop browsers without touch events, their clicks will always come here.\n    // - On mobile browsers, the simulated \"fast\" click will call this.\n    // - But the browser's follow-up slow click will be \"busted\" before it reaches this handler.\n    // Therefore it's safe to use this directive on both mobile and desktop.\n    element.on('click', function(event, touchend) {\n      scope.$apply(function() {\n        clickHandler(scope, {$event: (touchend || event)});\n      });\n    });\n\n    element.on('mousedown', function(event) {\n      element.addClass(ACTIVE_CLASS_NAME);\n    });\n\n    element.on('mousemove mouseup', function(event) {\n      element.removeClass(ACTIVE_CLASS_NAME);\n    });\n\n  };\n}];\n\n/* global ngTouch: false */\n\n/**\n * @ngdoc directive\n * @name ngSwipeLeft\n *\n * @description\n * Specify custom behavior when an element is swiped to the left on a touchscreen device.\n * A leftward swipe is a quick, right-to-left slide of the finger.\n * Though ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag\n * too.\n *\n * To disable the mouse click and drag functionality, add `ng-swipe-disable-mouse` to\n * the `ng-swipe-left` or `ng-swipe-right` DOM Element.\n *\n * Requires the {@link ngTouch `ngTouch`} module to be installed.\n *\n * @element ANY\n * @param {expression} ngSwipeLeft {@link guide/expression Expression} to evaluate\n * upon left swipe. (Event object is available as `$event`)\n *\n * @example\n    <example module=\"ngSwipeLeftExample\" deps=\"angular-touch.js\" name=\"ng-swipe-left\">\n      <file name=\"index.html\">\n        <div ng-show=\"!showActions\" ng-swipe-left=\"showActions = true\">\n          Some list content, like an email in the inbox\n        </div>\n        <div ng-show=\"showActions\" ng-swipe-right=\"showActions = false\">\n          <button ng-click=\"reply()\">Reply</button>\n          <button ng-click=\"delete()\">Delete</button>\n        </div>\n      </file>\n      <file name=\"script.js\">\n        angular.module('ngSwipeLeftExample', ['ngTouch']);\n      </file>\n    </example>\n */\n\n/**\n * @ngdoc directive\n * @name ngSwipeRight\n *\n * @description\n * Specify custom behavior when an element is swiped to the right on a touchscreen device.\n * A rightward swipe is a quick, left-to-right slide of the finger.\n * Though ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag\n * too.\n *\n * Requires the {@link ngTouch `ngTouch`} module to be installed.\n *\n * @element ANY\n * @param {expression} ngSwipeRight {@link guide/expression Expression} to evaluate\n * upon right swipe. (Event object is available as `$event`)\n *\n * @example\n    <example module=\"ngSwipeRightExample\" deps=\"angular-touch.js\" name=\"ng-swipe-right\">\n      <file name=\"index.html\">\n        <div ng-show=\"!showActions\" ng-swipe-left=\"showActions = true\">\n          Some list content, like an email in the inbox\n        </div>\n        <div ng-show=\"showActions\" ng-swipe-right=\"showActions = false\">\n          <button ng-click=\"reply()\">Reply</button>\n          <button ng-click=\"delete()\">Delete</button>\n        </div>\n      </file>\n      <file name=\"script.js\">\n        angular.module('ngSwipeRightExample', ['ngTouch']);\n      </file>\n    </example>\n */\n\nfunction makeSwipeDirective(directiveName, direction, eventName) {\n  ngTouch.directive(directiveName, ['$parse', '$swipe', function($parse, $swipe) {\n    // The maximum vertical delta for a swipe should be less than 75px.\n    var MAX_VERTICAL_DISTANCE = 75;\n    // Vertical distance should not be more than a fraction of the horizontal distance.\n    var MAX_VERTICAL_RATIO = 0.3;\n    // At least a 30px lateral motion is necessary for a swipe.\n    var MIN_HORIZONTAL_DISTANCE = 30;\n\n    return function(scope, element, attr) {\n      var swipeHandler = $parse(attr[directiveName]);\n\n      var startCoords, valid;\n\n      function validSwipe(coords) {\n        // Check that it's within the coordinates.\n        // Absolute vertical distance must be within tolerances.\n        // Horizontal distance, we take the current X - the starting X.\n        // This is negative for leftward swipes and positive for rightward swipes.\n        // After multiplying by the direction (-1 for left, +1 for right), legal swipes\n        // (ie. same direction as the directive wants) will have a positive delta and\n        // illegal ones a negative delta.\n        // Therefore this delta must be positive, and larger than the minimum.\n        if (!startCoords) return false;\n        var deltaY = Math.abs(coords.y - startCoords.y);\n        var deltaX = (coords.x - startCoords.x) * direction;\n        return valid && // Short circuit for already-invalidated swipes.\n            deltaY < MAX_VERTICAL_DISTANCE &&\n            deltaX > 0 &&\n            deltaX > MIN_HORIZONTAL_DISTANCE &&\n            deltaY / deltaX < MAX_VERTICAL_RATIO;\n      }\n\n      var pointerTypes = ['touch'];\n      if (!angular.isDefined(attr['ngSwipeDisableMouse'])) {\n        pointerTypes.push('mouse');\n      }\n      $swipe.bind(element, {\n        'start': function(coords, event) {\n          startCoords = coords;\n          valid = true;\n        },\n        'cancel': function(event) {\n          valid = false;\n        },\n        'end': function(coords, event) {\n          if (validSwipe(coords)) {\n            scope.$apply(function() {\n              element.triggerHandler(eventName);\n              swipeHandler(scope, {$event: event});\n            });\n          }\n        }\n      }, pointerTypes);\n    };\n  }]);\n}\n\n// Left is negative X-coordinate, right is positive.\nmakeSwipeDirective('ngSwipeLeft', -1, 'swipeleft');\nmakeSwipeDirective('ngSwipeRight', 1, 'swiperight');\n\n\n\n})(window, window.angular);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-touch/angular-touch.js\n// module id = 261\n// module chunks = 0 1","/**\n * @module gmfapp.wfspermalink\n */\nconst exports = {};\n\nimport './wfspermalink.css';\nimport './common_dependencies.js';\n/** @suppress {extraRequire} */\nimport gmfMapComponent from 'gmf/map/component.js';\n\n/** @suppress {extraRequire} */\nimport gmfQueryWindowComponent from 'gmf/query/windowComponent.js';\n\n/** @suppress {extraRequire} */\nimport ngeoProjEPSG21781 from 'ngeo/proj/EPSG21781.js';\n\nimport olMap from 'ol/Map.js';\nimport olView from 'ol/View.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport olSourceOSM from 'ol/source/OSM.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleCircle from 'ol/style/Circle.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('gmfapp', [\n  gmfMapComponent.name,\n  gmfQueryWindowComponent.name,\n]);\n\nexports.module.value('ngeoWfsPermalinkOptions',\n  /** @type {ngeox.WfsPermalinkOptions} */ ({\n    url: 'https://geomapfish-demo.camptocamp.net/2.2/wsgi/mapserv_proxy',\n    wfsTypes: [\n      {featureType: 'fuel', label: 'display_name'},\n      {featureType: 'osm_scale', label: 'display_name'}\n    ],\n    defaultFeatureNS: 'http://mapserver.gis.umn.edu/mapserver',\n    defaultFeaturePrefix: 'feature'\n  }));\n\nexports.constant('defaultTheme', 'Demo');\nexports.constant('angularLocaleScript', '../build/angular-locale_{{locale}}.js');\n\n\n/**\n * @constructor\n * @ngInject\n */\nexports.MainController = function() {\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map = new olMap({\n    layers: [\n      new olLayerTile({\n        source: new olSourceOSM()\n      })\n    ],\n    view: new olView({\n      projection: 'EPSG:21781',\n      resolutions: [200, 100, 50, 20, 10, 5, 2.5, 2, 1, 0.5],\n      center: [537635, 152640],\n      zoom: 3\n    })\n  });\n\n  const fill = new olStyleFill({color: [255, 170, 0, 0.6]});\n  const stroke = new olStyleStroke({color: [255, 170, 0, 1], width: 2});\n\n  /**\n   * FeatureStyle used by the gmf.query.windowComponent\n   * @type {ol.style.Style}\n   * @export\n   */\n  this.featureStyle = new olStyleStyle({\n    fill: fill,\n    image: new olStyleCircle({\n      fill: fill,\n      radius: 5,\n      stroke: stroke\n    }),\n    stroke: stroke\n  });\n};\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/examples/wfspermalink.js","/**\n * @module ol/source/XYZ\n */\nimport {inherits} from '../index.js';\nimport TileImage from '../source/TileImage.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case,\n * {@link ol.source.TileImage} can be used with a `tileUrlFunction`\n * such as:\n *\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *        coordinate[1] + '/' + coordinate[2] + '.png';\n *    }\n *\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.XYZOptions=} opt_options XYZ options.\n * @api\n */\nconst XYZ = function(opt_options) {\n  const options = opt_options || {};\n  const projection = options.projection !== undefined ?\n    options.projection : 'EPSG:3857';\n\n  const tileGrid = options.tileGrid !== undefined ? options.tileGrid :\n    _ol_tilegrid_.createXYZ({\n      extent: _ol_tilegrid_.extentFromProjection(projection),\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize\n    });\n\n  TileImage.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    opaque: options.opaque,\n    projection: projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileGrid: tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n};\n\ninherits(XYZ, TileImage);\nexport default XYZ;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/XYZ.js\n// module id = null\n// module chunks = ","/**\n * @module ol/source/OSM\n */\nimport {inherits} from '../index.js';\nimport XYZ from '../source/XYZ.js';\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n *\n * @constructor\n * @extends {ol.source.XYZ}\n * @param {olx.source.OSMOptions=} opt_options Open Street Map options.\n * @api\n */\nconst OSM = function(opt_options) {\n\n  const options = opt_options || {};\n\n  let attributions;\n  if (options.attributions !== undefined) {\n    attributions = options.attributions;\n  } else {\n    attributions = [OSM.ATTRIBUTION];\n  }\n\n  const crossOrigin = options.crossOrigin !== undefined ?\n    options.crossOrigin : 'anonymous';\n\n  const url = options.url !== undefined ?\n    options.url : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n  XYZ.call(this, {\n    attributions: attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: crossOrigin,\n    opaque: options.opaque !== undefined ? options.opaque : true,\n    maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileLoadFunction: options.tileLoadFunction,\n    url: url,\n    wrapX: options.wrapX\n  });\n\n};\n\ninherits(OSM, XYZ);\n\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nOSM.ATTRIBUTION = '&copy; ' +\n      '<a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> ' +\n      'contributors.';\nexport default OSM;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/OSM.js\n// module id = null\n// module chunks = "],"sourceRoot":""}