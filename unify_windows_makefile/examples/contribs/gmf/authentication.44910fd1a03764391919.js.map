{"version":3,"sources":["webpack:///./src/CustomEvent.js","webpack:///./contribs/gmf/src/authentication/Service.js","webpack:///./src/message/modalComponent.js","webpack:///./contribs/gmf/src/authentication/module.js","webpack:///./contribs/gmf/src/authentication/component.js","webpack:///./contribs/gmf/examples/authentication.js","webpack:///./src/message/Message.js","webpack:///./src/message/Notification.js"],"names":["olBase","__webpack_require__","_Event","exports","type","detail","arguments","length","undefined","_Event2","default","call","this","inherits","$http","authenticationBaseUrl","gmfUser","_classCallCheck","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","$http_","baseUrl_","replace","user_","load_","$inject","_inherits","_olEventsEventTarget","_createClass","key","value","url","RouteSuffix","IS_LOGGED_IN","get","withCredentials","then","handleLogin_","bind","oldPwd","newPwd","confPwd","CHANGE_PASSWORD","post","$","param","oldPassword","newPassword","confirmNewPassword","headers","Content-Type","login","pwd","LOGIN","password","LOGOUT","resetUser_","RESET_PASSWORD","successFn","resp","data","functionalities","role_id","checkingLoginStatus","respData","setUser_","event","_CustomEvent2","user","dispatchEvent","emitEvent","username","module","angular","service","_index2","requires","push","name","is_password_changed","role_name","component_","template","require","ngModel","transclude","controller","bindings","resizable","component","Controller_","_class","$scope","$element","$element_","$scope_","modal_","children","dialog","find","draggable","$render","modal","$viewValue","on","e","_asserts2","assert","$apply","$setViewValue","_component2","_Service2","_Notification2","_modalComponent2","gmfAuthenticationTemplateUrl","$attrs","gmfAuthenticationTemplateUrl_","element","attrs","templateUrl","baseModuleTemplateUrl","allowPasswordChange","forcePasswordChange","AuthenticationController_","gettextCatalog","gmfAuthenticationService","ngeoNotification","gmfAuthenticationService_","notification_","allowPasswordReset","changingPassword","changePasswordModalShown","resetPasswordModalShown","error","loginVal","pwdVal","oldPwdVal","newPwdVal","newPwdConfVal","_events2","listen","onLoginReady_","errors","getString","setError_","changePassword","changePasswordReset","resetError_","logout","resetPasswordSuccessFn","resetPassword","msg","notify","_Message2","Type","WARNING","container","Array","isArray","forEach","target","ERROR","clear","_module2","constant","MainController","prototype","showMessage","message","show","object","getMessageObjects","info","INFORMATION","success","SUCCESS","warn","opt_type","msgObjects","msgObject","defaultType","$timeout","timeout_","document","body","append","container_","cache_","DEFAULT_DELAY_","uid","clearMessageByCacheItem_","parseInt","assertString","classNames","el","join","html","addClass","delay","item","getUid","promise","alert","cancel"],"mappings":"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","file":"authentication.44910fd1a03764391919.js","sourcesContent":["/**\n * @module ngeo.CustomEvent\n */\nimport * as olBase from 'ol/index.js';\nimport olEventsEvent from 'ol/events/Event.js';\n\n/**\n * @constructor\n * @extends {ol.events.Event}\n * @param {string} type Event type.\n * @param {T} detail Event Detail.\n * @template T\n */\nconst exports = function(type, detail = {}) {\n\n  olEventsEvent.call(this, type);\n\n  /**\n   * @type {T}\n   */\n  this.detail = detail;\n\n};\n\nolBase.inherits(exports, olEventsEvent);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/CustomEvent.js","/**\n * @module gmf.authentication.Service\n */\nimport ngeoCustomEvent from 'ngeo/CustomEvent.js';\nimport gmfBase from 'gmf/index.js';\nimport * as olBase from 'ol/index.js';\nimport olEventsEventTarget from 'ol/events/EventTarget.js';\n\n/**\n * An \"authentication\" service for a GeoMapFish application. Upon loading, it\n * launches a request to determine whether a user is currently logged in or\n * not.\n *\n * The possible API requests it supports, which are all self-explanatory, are:\n *\n * - changePassword\n * - login\n * - logout\n * - resetPassword\n *\n * @extends {ol.events.EventTarget}\n */\nconst exports = class extends olEventsEventTarget {\n\n  /**\n   * @param {angular.$http} $http Angular http service.\n   * @param {string} authenticationBaseUrl URL to \"authentication\" web service.\n   * @param {gmfx.User} gmfUser User.\n   * @ngInject\n   */\n  constructor($http, authenticationBaseUrl, gmfUser) {\n\n    super();\n\n    /**\n     * @type {angular.$http}\n     * @private\n     */\n    this.$http_ = $http;\n\n    /**\n     * The authentication url without trailing slash\n     * @type {string}\n     * @private\n     */\n    this.baseUrl_ = authenticationBaseUrl.replace(/\\/$/, '');\n\n    /**\n     * @type {gmfx.User}\n     * @private\n     */\n    this.user_ = gmfUser;\n\n    this.load_();\n  }\n\n  /**\n   * Load the authentication service, which sends an asynch request to\n   * determine whether the user is currently connected or not.\n   * @private\n   */\n  load_() {\n    const url = `${this.baseUrl_}/${exports.RouteSuffix.IS_LOGGED_IN}`;\n    this.$http_.get(url, {withCredentials: true}).then(\n      this.handleLogin_.bind(this, true)\n    );\n  }\n\n  /**\n   * @param {string} oldPwd Old password.\n   * @param {string} newPwd New password.\n   * @param {string} confPwd New password confirmation.\n   * @return {angular.$q.Promise} Promise.\n   * @export\n   */\n  changePassword(oldPwd, newPwd, confPwd) {\n    const url = `${this.baseUrl_}/${exports.RouteSuffix.CHANGE_PASSWORD}`;\n\n    return this.$http_.post(url, $.param({\n      'oldPassword': oldPwd,\n      'newPassword': newPwd,\n      'confirmNewPassword': confPwd\n    }), {\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      withCredentials: true\n    });\n  }\n\n  /**\n   * @param {string} login Login name.\n   * @param {string} pwd Password.\n   * @return {angular.$q.Promise} Promise.\n   * @export\n   */\n  login(login, pwd) {\n    const url = `${this.baseUrl_}/${exports.RouteSuffix.LOGIN}`;\n\n    return this.$http_.post(url, $.param({'login': login, 'password': pwd}), {\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      withCredentials: true\n    }).then(\n      this.handleLogin_.bind(this, false));\n  }\n\n  /**\n   * @return {angular.$q.Promise} Promise.\n   * @export\n   */\n  logout() {\n    const url = `${this.baseUrl_}/${exports.RouteSuffix.LOGOUT}`;\n    return this.$http_.get(url, {withCredentials: true}).then(\n      this.resetUser_.bind(this));\n  }\n\n  /**\n   * @param {string} login Login name.\n   * @return {angular.$q.Promise} Promise.\n   * @export\n   */\n  resetPassword(login) {\n    const url = `${this.baseUrl_}/${exports.RouteSuffix.RESET_PASSWORD}`;\n\n    /**\n     * @param {angular.$http.Response} resp Ajax response.\n     * @return {gmfx.AuthenticationDefaultResponse} Response.\n     */\n    const successFn = function(resp) {\n      const respData = /** @type gmfx.AuthenticationDefaultResponse} */ (\n        resp.data);\n      return respData;\n    }.bind(this);\n\n    return this.$http_.post(url, $.param({'login': login}), {\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n    }).then(successFn);\n  }\n\n  /**\n   * @return {?gmfx.AuthenticationFunctionalities} The role functionalities.\n   */\n  getFunctionalities() {\n    return this.user_.functionalities;\n  }\n\n  /**\n   * @return {number|null} The role ID.\n   */\n  getRoleId() {\n    return this.user_.role_id;\n  }\n\n  /**\n   * @param {boolean} checkingLoginStatus Checking the login status?\n   * @param {angular.$http.Response} resp Ajax response.\n   * @return {angular.$http.Response} Response.\n   * @private\n   */\n  handleLogin_(checkingLoginStatus, resp) {\n    const respData = /** @type {gmfx.AuthenticationLoginResponse} */ (resp.data);\n    this.setUser_(respData, !checkingLoginStatus);\n    if (checkingLoginStatus) {\n      /** @type {gmfx.AuthenticationEvent} */\n      const event = new ngeoCustomEvent('ready', {user: this.user_});\n      this.dispatchEvent(event);\n    }\n    return resp;\n  }\n\n  /**\n   * @param {gmfx.AuthenticationLoginResponse} respData Response.\n   * @param {boolean} emitEvent Emit a login event?\n   * @private\n   */\n  setUser_(respData, emitEvent) {\n    for (const key in respData) {\n      this.user_[key] = respData[key];\n    }\n    if (emitEvent && respData.username !== undefined) {\n      /** @type {gmfx.AuthenticationEvent} */\n      const event = new ngeoCustomEvent('login', {user: this.user_});\n      this.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @private\n   */\n  resetUser_() {\n    for (const key in this.user_) {\n      this.user_[key] = null;\n    }\n    /** @type {gmfx.AuthenticationEvent} */\n    const event = new ngeoCustomEvent('logout', {user: this.user_});\n    this.dispatchEvent(event);\n    this.load_();\n  }\n};\n\n/**\n * @enum {string}\n */\nexports.RouteSuffix = {\n  CHANGE_PASSWORD: 'loginchange',\n  IS_LOGGED_IN: 'loginuser',\n  LOGIN: 'login',\n  LOGOUT: 'logout',\n  RESET_PASSWORD: 'loginresetpassword'\n};\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('gmfAuthenticationService', []);\nexports.module.service('gmfAuthenticationService', exports);\ngmfBase.module.requires.push(exports.module.name);\n\nexports.module.value('gmfUser', {\n  'functionalities': null,\n  'is_password_changed': null,\n  'role_id': null,\n  'role_name': null,\n  'username': null\n});\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/authentication/Service.js","/**\n * @module ngeo.message.modalComponent\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\n\n/**\n * @type {angular.Module}\n */\nconst exports = angular.module('ngeoModal', []);\n\nngeoBase.module.requires.push(exports.name);\n\n/**\n * Provides the \"ngeoModal\" component.\n *\n * This component shows a Bootstrap modal when the `ngModel` expression\n * evaluates to `true`, and it hides it when the `ngModel` expression\n * evaluates to `false`.\n *\n * The components also changes the `ngModel` value when the user manually\n * closes the modal.\n *\n * This component is based on Bootstrap's `modal` classes and associated\n * jQuery plugin.\n *\n *     <ngeo-modal ng-model=\"modalShown\">\n *       <div class=\"modal-header\">\n *         <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\n *                 aria-hidden=\"true\">&times;</button>\n *         <h4 class=\"modal-title\">The Title</h4>\n *       </div>\n *       <div class=\"modal-body\">Some content</div>\n *     </ngeo-modal>\n *\n * Note: for z-indexing purpose, the modal DOM element is automatically moved\n * to document body element.\n *\n * See our live example: [../examples/modal.html](../examples/modal.html)\n *\n * @htmlAttribute {boolean} ngeo-modal-resizable Whether the modal can be\n *     resized or not. Defaults to `false`.\n * @ngdoc component\n * @ngname ngeoModal\n * @type {!angular.Component}\n */\nexports.component_ = {\n  template: `<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\">\n        <ng-transclude></ng-transclude>\n      </div>\n    </div>\n  </div>`,\n  require: {\n    'ngModel': 'ngModel'\n  },\n  transclude: true,\n  controller: 'ngeoModalController',\n  bindings: {\n    'resizable': '<ngeoModalResizable'\n  }\n};\n\nexports.component('ngeoModal', exports.component_);\n\nexports.Controller_ = class {\n  /**\n   * @ngInject\n   * @param {!angular.Scope} $scope Scope.\n   * @param {!jQuery} $element Element.\n   */\n  constructor($scope, $element) {\n    /**\n     * @private\n     * @type {!jQuery}\n     */\n    this.$element_ = $element;\n\n    /**\n     * @private\n     * @type {!angular.Scope}\n     */\n    this.$scope_ = $scope;\n\n    /**\n     * @private\n     * @type {jQuery}\n     */\n    this.modal_;\n\n    /**\n     * @export\n     * @type {boolean}\n     */\n    this.resizable;\n\n    /**\n     * @export\n     * @type {angular.NgModelController|null}\n     */\n    this.ngModel;\n  }\n\n  $onInit() {\n    this.modal_ = this.$element_.children();\n\n    this.resizable = !!this.resizable;\n\n    const dialog = this.modal_.find('.modal-dialog');\n    dialog.draggable();\n    if (this.resizable) {\n      dialog.resizable();\n    }\n\n    this.ngModel.$render = () => {\n      this.modal_.modal(this.ngModel.$viewValue ? 'show' : 'hide');\n    };\n\n    this.modal_.on('shown.bs.modal hidden.bs.modal', (e) => {\n      const type = e.type;\n      googAsserts.assert(type == 'shown' || type == 'hidden');\n      this.$scope_.$apply(() => {\n        this.ngModel.$setViewValue(type == 'shown');\n      });\n    });\n  }\n\n  $onDestroy() {\n    const dialog = this.modal_.find('.modal-dialog');\n    dialog.draggable('destroy');\n    if (this.resizable) {\n      dialog.resizable('destroy');\n    }\n  }\n};\n\nexports.controller('ngeoModalController', exports.Controller_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/modalComponent.js","/**\n * @module gmf.authentication.module\n */\nimport gmfAuthenticationComponent from 'gmf/authentication/component.js';\n\n/** @suppress {extraRequire} */\nimport gmfAuthenticationService from 'gmf/authentication/Service.js';\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('gmfAuthenticationModule', [\n  gmfAuthenticationComponent.name,\n  gmfAuthenticationService.module.name\n]);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/authentication/module.js","/**\n * @module gmf.authentication.component\n */\nimport gmfBase from 'gmf/index.js';\nimport gmfAuthenticationService from 'gmf/authentication/Service.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoMessageMessage from 'ngeo/message/Message.js';\nimport ngeoMessageNotification from 'ngeo/message/Notification.js';\n\n/** @suppress {extraRequire} */\nimport ngeoMessageModalComponent from 'ngeo/message/modalComponent.js';\n\nimport olEvents from 'ol/events.js';\n\n/**\n * @type {angular.Module}\n */\nconst exports = angular.module('gmfAuthentication', [\n  gmfAuthenticationService.module.name,\n  ngeoMessageNotification.module.name,\n  ngeoMessageModalComponent.name,\n]);\n\ngmfBase.module.requires.push(exports.name);\n\n/**\n * @param {angular.JQLite} element Element.\n * @param {angular.Attributes} attrs Attributes.\n * @return {string} Template URL.\n */\nexports.gmfAuthenticationTemplateUrl_ = (element, attrs) => {\n  const templateUrl = attrs['gmfAuthenticationTemplateurl'];\n  return templateUrl !== undefined ? templateUrl :\n    `${gmfBase.baseModuleTemplateUrl}/authentication/component.html`;\n};\n\n\n/**\n * @param {!angular.JQLite} $element Element.\n * @param {!angular.Attributes} $attrs Attributes.\n * @param {!function(!angular.JQLite, !angular.Attributes): string} gmfAuthenticationTemplateUrl Template function.\n * @return {string} Template URL.\n * @ngInject\n */\nfunction gmfAuthenticationTemplateUrl($element, $attrs, gmfAuthenticationTemplateUrl) {\n  return gmfAuthenticationTemplateUrl($element, $attrs);\n}\n\n\n/**\n * An \"authentication\" component for a GeoMapFish application. With the\n * use of the \"authentication\" service, it features a complete interface\n * for the user to be able to login, logout, change or reset his or her\n * password.  The `gmfUser` angular value is also used to keep track of\n * the user information. When empty, that means that the user isn't connected\n * yet.\n *\n * While not logged in, the \"login\" form is shown, which allows the user to\n * either log in or ask for a password reset.\n *\n * Once logged in, the \"logout\" form is shown, which allows the user to either\n * log out or change his or her password.\n *\n * Example:\n *\n *      <gmf-authentication\n *        gmf-authentication-allow-password-change=\"::true\">\n *      </gmf-authentication>\n *\n * @htmlAttribute {boolean} gmf-authentication-allow-password-reset Whether to\n *     show the password forgotten link. Default to true.\n * @htmlAttribute {boolean} gmf-authentication-allow-password-change Whether to\n *     show the change password button. Default to true.\n * @htmlAttribute {boolean} gmf-authentication-force-password-change Force the\n *     user to change its password. Default to false. If you set it to true, you\n *     should also allow the user to change its password.\n * @ngdoc component\n * @ngname gmfAuthentication\n */\nexports.component_ = {\n  bindings: {\n    'allowPasswordChange': '<?gmfAuthenticationAllowPasswordChange',\n    'forcePasswordChange': '<?gmfAuthenticationForcePasswordChange'\n  },\n  controller: 'GmfAuthenticationController',\n  templateUrl: gmfAuthenticationTemplateUrl\n};\n\nexports.value('gmfAuthenticationTemplateUrl',\n  exports.gmfAuthenticationTemplateUrl_);\n\nexports.component('gmfAuthentication', exports.component_);\n\n\n/**\n * @private\n */\nexports.AuthenticationController_ = class {\n  /**\n   * @private\n   * @param {angularGettext.Catalog} gettextCatalog Gettext catalog.\n   * @param {angular.Scope} $scope The directive's scope.\n   * @param {gmf.authentication.Service} gmfAuthenticationService GMF Authentication service\n   * @param {gmfx.User} gmfUser User.\n   * @param {ngeo.message.Notification} ngeoNotification Ngeo notification service.\n   * @ngInject\n   * @ngdoc controller\n   * @ngname GmfAuthenticationController\n   */\n  constructor(gettextCatalog, $scope, gmfAuthenticationService, gmfUser, ngeoNotification) {\n\n    /**\n     * @type {gmfx.User}\n     * @export\n     */\n    this.gmfUser = gmfUser;\n\n    /**\n     * @type {angular.Scope}\n     * @private\n     */\n    this.$scope_ = $scope;\n\n    /**\n     * @type {angularGettext.Catalog}\n     * @private\n     */\n    this.gettextCatalog = gettextCatalog;\n\n    /**\n     * @type {gmf.authentication.Service}\n     * @private\n     */\n    this.gmfAuthenticationService_ = gmfAuthenticationService;\n\n    /**\n     * @type {ngeo.message.Notification}\n     * @private\n     */\n    this.notification_ = ngeoNotification;\n\n    /**\n     * @type {boolean}\n     * @export\n     */\n    this.allowPasswordReset;\n\n    /**\n     * @type {boolean}\n     * @export\n     */\n    this.allowPasswordChange;\n\n    /**\n     * @type {boolean}\n     * @export\n     */\n    this.forcePasswordChange;\n\n    /**\n     * @type {boolean}\n     * @export\n     */\n    this.changingPassword = false;\n\n    /**\n     * @type {boolean}\n     * @export\n     */\n    this.changePasswordModalShown = false;\n\n    /**\n     * @type {boolean}\n     * @export\n     */\n    this.resetPasswordModalShown = false;\n\n    /**\n     * @type {boolean}\n     * @export\n     */\n    this.error = false;\n\n    // LOGIN form values\n\n    /**\n     * @type {string}\n     * @export\n     */\n    this.loginVal = '';\n\n    /**\n     * @type {string}\n     * @export\n     */\n    this.pwdVal = '';\n\n    // CHANGE PASSWORD form values\n\n    /**\n     * @type {string}\n     * @export\n     */\n    this.oldPwdVal = '';\n\n    /**\n     * @type {string}\n     * @export\n     */\n    this.newPwdVal = '';\n\n    /**\n     * @type {string}\n     * @export\n     */\n    this.newPwdConfVal = '';\n\n    olEvents.listen(gmfAuthenticationService, 'ready', this.onLoginReady_.bind(this));\n  }\n\n  /**\n   * Initialise the controller.\n   */\n  $onInit() {\n    this.allowPasswordReset = this.allowPasswordReset !== false;\n    this.allowPasswordChange = this.allowPasswordChange !== false;\n    this.forcePasswordChange = this.forcePasswordChange === true;\n  }\n\n\n  // METHODS THAT CALL THE AUTHENTICATION SERVICE METHODS\n\n  /**\n   * Calls the authentication service changePassword method.\n   * @export\n   */\n  changePassword() {\n    const gettextCatalog = this.gettextCatalog;\n\n    const oldPwd = this.oldPwdVal;\n    const newPwd = this.newPwdVal;\n    const confPwd = this.newPwdConfVal;\n\n    const errors = [];\n    // (1) validation - passwords are required\n    if (oldPwd === '') {\n      errors.push(gettextCatalog.getString('The old password is required.'));\n    }\n    if (newPwd === '') {\n      errors.push(gettextCatalog.getString('The new password is required.'));\n    }\n    if (confPwd === '') {\n      errors.push(gettextCatalog.getString('The password confirmation is required.'));\n    }\n\n    if (errors.length) {\n      this.setError_(errors);\n    } else {\n      // (2) validation - passwords must be new and must also match\n      if (oldPwd === newPwd) {\n        errors.push(gettextCatalog.getString('The old and new passwords are the same.'));\n      }\n      if (newPwd !== confPwd) {\n        errors.push(gettextCatalog.getString('The passwords don\\'t match.'));\n      }\n\n      if (errors.length) {\n        this.setError_(errors);\n      } else {\n        // (3) send request with current credentials, which may fail if\n        //     the old password given is incorrect.\n        const error = gettextCatalog.getString('Incorrect old password.');\n        this.gmfAuthenticationService_.changePassword(oldPwd, newPwd, confPwd).then(\n          () => {\n            this.changePasswordModalShown = true;\n            this.changePasswordReset();\n          },\n          this.setError_.bind(this, error));\n      }\n    }\n  }\n\n  /**\n   * Calls the authentication service login method.\n   * @export\n   */\n  login() {\n    const gettextCatalog = this.gettextCatalog;\n\n    const errors = [];\n    if (this.loginVal === '') {\n      errors.push(gettextCatalog.getString('The username is required.'));\n    }\n    if (this.pwdVal === '') {\n      errors.push(gettextCatalog.getString('The password is required.'));\n    }\n    if (errors.length) {\n      this.setError_(errors);\n    } else {\n      const error = gettextCatalog.getString('Incorrect username or password.');\n      this.gmfAuthenticationService_.login(this.loginVal, this.pwdVal).then(\n        this.resetError_.bind(this),\n        this.setError_.bind(this, error));\n    }\n  }\n\n  /**\n   * Calls the authentication service logout method.\n   * @export\n   */\n  logout() {\n    const gettextCatalog = this.gettextCatalog;\n    const error = gettextCatalog.getString('Could not log out.');\n    this.gmfAuthenticationService_.logout().then(\n      this.resetError_.bind(this),\n      this.setError_.bind(this, error));\n  }\n\n  /**\n   * Calls the authentication service resetPassword method.\n   * @export\n   */\n  resetPassword() {\n    const gettextCatalog = this.gettextCatalog;\n\n    if (!this.loginVal) {\n      this.setError_(gettextCatalog.getString('Please, input a login...'));\n      return;\n    }\n\n    const error = gettextCatalog.getString('An error occured while reseting the password.');\n\n    /**\n     * @param {gmfx.AuthenticationDefaultResponse} respData Response.\n     */\n    const resetPasswordSuccessFn = function(respData) {\n      this.resetPasswordModalShown = true;\n      this.resetError_();\n    }.bind(this);\n\n    this.gmfAuthenticationService_.resetPassword(this.loginVal).then(\n      resetPasswordSuccessFn,\n      this.setError_.bind(this, error)\n    );\n  }\n\n\n  // OTHER METHODS\n\n  /**\n   * Reset the changePassword values and error.\n   * @export\n   */\n  changePasswordReset() {\n    this.resetError_();\n    this.changingPassword = false;\n    this.oldPwdVal = '';\n    this.newPwdVal = '';\n    this.newPwdConfVal = '';\n  }\n\n\n  /**\n   * @param {gmfx.AuthenticationEvent} e GMF Authentication event.\n   * @private\n   */\n  onLoginReady_(e) {\n    if (e.detail.user.is_password_changed === false && this.forcePasswordChange) {\n      const gettextCatalog = this.gettextCatalog;\n      const msg = gettextCatalog.getString('You must change your password.');\n      this.notification_.notify({\n        msg: msg,\n        type: ngeoMessageMessage.Type.WARNING\n      });\n    }\n  }\n\n\n  /**\n   * @param {string|Array.<string>} errors Errors.\n   * @private\n   */\n  setError_(errors) {\n    if (this.error) {\n      this.resetError_();\n    }\n\n    this.error = true;\n\n    const container = angular.element('.gmf-authentication-error');\n\n    if (!Array.isArray(errors)) {\n      errors = [errors];\n    }\n\n    errors.forEach(function(error) {\n      this.notification_.notify({\n        msg: error,\n        target: container,\n        type: ngeoMessageMessage.Type.ERROR\n      });\n    }, this);\n  }\n\n  /**\n   * @private\n   */\n  resetError_() {\n    this.notification_.clear();\n    this.error = false;\n  }\n};\n\nexports.controller('GmfAuthenticationController',\n  exports.AuthenticationController_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/authentication/component.js","/**\n * @module gmfapp.authentication\n */\nconst exports = {};\n\nimport './authentication.css';\nimport './common_dependencies.js';\nimport gmfBase from 'gmf/index.js';\n\nimport gmfAuthenticationModule from 'gmf/authentication/module.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('gmfapp', [\n  gmfBase.module.name,\n  gmfAuthenticationModule.name\n]);\n\n\nexports.module.value(\n  'authenticationBaseUrl',\n  'https://geomapfish-demo.camptocamp.net/2.2/wsgi');\n\nexports.module.constant('angularLocaleScript', '../build/angular-locale_{{locale}}.js');\n\n\n/**\n * @constructor\n * @ngInject\n */\nexports.MainController = function() {};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/examples/authentication.js","/**\n * @module ngeo.message.Message\n */\n/**\n * Abstract class for services that display messages.\n *\n * @constructor\n * @struct\n * @abstract\n */\nconst exports = function() {};\n\n\n/**\n * Show the message.\n *\n * @abstract\n * @param {ngeox.Message} message Message.\n * @protected\n */\nexports.prototype.showMessage = function(message) {};\n\n\n/**\n * Show disclaimer message string or object or list of disclame message\n * strings or objects.\n *\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @export\n */\nexports.prototype.show = function(object) {\n  const msgObjects = this.getMessageObjects(object);\n  msgObjects.forEach(this.showMessage, this);\n};\n\n\n/**\n * Display the given error message or list of error messages.\n *\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.error = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.ERROR));\n};\n\n\n/**\n * Display the given info message or list of info messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.info = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.INFORMATION));\n};\n\n\n/**\n * Display the given success message or list of success messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.success = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.SUCCESS));\n};\n\n\n/**\n * Display the given warning message or list of warning messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.warn = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.WARNING));\n};\n\n\n/**\n * Returns an array of message object from any given message string, list of\n * message strings, message object or list message objects. The type can be\n * overridden here as well OR defined (if the message(s) is/are string(s),\n * defaults to 'information').\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @param {string=} opt_type The type of message to override the messages with.\n * @return {Array.<ngeox.Message>} List of message objects.\n * @protected\n */\nexports.prototype.getMessageObjects = function(object, opt_type) {\n  const msgObjects = [];\n  let msgObject = null;\n  const defaultType = exports.Type.INFORMATION;\n\n  if (typeof object === 'string') {\n    msgObjects.push({\n      msg: object,\n      type: opt_type !== undefined ? opt_type : defaultType\n    });\n  } else if (Array.isArray(object)) {\n    object.forEach((msg) => {\n      if (typeof object === 'string') {\n        msgObject = {\n          msg: msg,\n          type: opt_type !== undefined ? opt_type : defaultType\n        };\n      } else {\n        msgObject = msg;\n        if (opt_type !== undefined) {\n          msgObject.type = opt_type;\n        }\n      }\n      msgObjects.push(msgObject);\n    }, this);\n  } else {\n    msgObject = object;\n    if (opt_type !== undefined) {\n      msgObject.type = opt_type;\n    }\n    if (msgObject.type === undefined) {\n      msgObject.type = defaultType;\n    }\n    msgObjects.push(msgObject);\n  }\n\n  return msgObjects;\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nexports.Type = {\n  /**\n   * @type {string}\n   * @export\n   */\n  ERROR: 'error',\n  /**\n   * @type {string}\n   * @export\n   */\n  INFORMATION: 'information',\n  /**\n   * @type {string}\n   * @export\n   */\n  SUCCESS: 'success',\n  /**\n   * @type {string}\n   * @export\n   */\n  WARNING: 'warning'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/Message.js","/**\n * @module ngeo.message.Notification\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoMessageMessage from 'ngeo/message/Message.js';\nimport * as olBase from 'ol/index.js';\n\n/**\n * Provides methods to display any sort of messages, notifications, errors,\n * etc. Requires Bootstrap library (both CSS and JS) to display the alerts\n * properly.\n *\n * @constructor\n * @struct\n * @extends {ngeo.message.Message}\n * @param {angular.$timeout} $timeout Angular timeout service.\n * @ngdoc service\n * @ngname ngeoNotification\n * @abstract\n * @ngInject\n */\nconst exports = function($timeout) {\n\n  ngeoMessageMessage.call(this);\n\n  /**\n   * @type {angular.$timeout}\n   * @private\n   */\n  this.timeout_ = $timeout;\n\n  const container = angular.element('<div class=\"ngeo-notification\"></div>');\n  angular.element(document.body).append(container);\n\n  /**\n   * @type {angular.JQLite}\n   * @private\n   */\n  this.container_ = container;\n\n  /**\n   * @type {Object.<number, ngeo.message.Notification.CacheItem>}\n   * @private\n   */\n  this.cache_ = {};\n\n};\n\nolBase.inherits(exports, ngeoMessageMessage);\n\n\n/**\n * Default delay (in milliseconds) a message should be displayed.\n * @type {number}\n * @private\n */\nexports.DEFAULT_DELAY_ = 7000;\n\n\n// MAIN API METHODS\n\n\n/**\n * Display the given message string or object or list of message strings or\n * objects.\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @export\n */\nexports.prototype.notify = function(object) {\n  this.show(object);\n};\n\n\n/**\n * Clears all messages that are currently being shown.\n * @export\n */\nexports.prototype.clear = function() {\n  for (const uid in this.cache_) {\n    this.clearMessageByCacheItem_(this.cache_[parseInt(uid, 10)]);\n  }\n};\n\n\n/**\n * @override\n */\nexports.prototype.showMessage = function(message) {\n  const type = message.type;\n  googAsserts.assertString(type, 'Type should be set.');\n\n  const classNames = ['alert', 'fade'];\n  switch (type) {\n    case ngeoMessageMessage.Type.ERROR:\n      classNames.push('alert-danger');\n      break;\n    case ngeoMessageMessage.Type.INFORMATION:\n      classNames.push('alert-info');\n      break;\n    case ngeoMessageMessage.Type.SUCCESS:\n      classNames.push('alert-success');\n      break;\n    case ngeoMessageMessage.Type.WARNING:\n      classNames.push('alert-warning');\n      break;\n    default:\n      break;\n  }\n\n  const el = angular.element(`<div class=\"${classNames.join(' ')}\"></div>`);\n  let container;\n\n  if (message.target) {\n    container = angular.element(message.target);\n  } else {\n    container = this.container_;\n  }\n\n  container.append(el);\n  el.html(message.msg).addClass('in');\n\n  const delay = message.delay !== undefined ? message.delay :\n    exports.DEFAULT_DELAY_;\n\n  const item = /** @type {ngeo.message.Notification.CacheItem} */ ({\n    el\n  });\n\n  // Keep a reference to the promise, in case we want to manually cancel it\n  // before the delay\n  const uid = olBase.getUid(el);\n  item.promise = this.timeout_(() => {\n    el.alert('close');\n    delete this.cache_[uid];\n  }, delay);\n\n  this.cache_[uid] = item;\n};\n\n\n/**\n * Clear a message using its cache item.\n * @param {ngeo.message.Notification.CacheItem} item Cache item.\n * @private\n */\nexports.prototype.clearMessageByCacheItem_ = function(item) {\n  const el = item.el;\n  const promise = item.promise;\n  const uid = olBase.getUid(el);\n\n  // Close the message\n  el.alert('close');\n\n  // Cancel timeout in case we want to stop before delay. If called by the\n  // timeout itself, then this has no consequence.\n  this.timeout_.cancel(promise);\n\n  // Delete the cache item\n  delete this.cache_[uid];\n};\n\n\n/**\n * @typedef {{\n *     el: angular.JQLite,\n *     promise: angular.$q.Promise\n * }}\n */\nexports.CacheItem;\n\n\n/**\n * @type {angular.Module}\n */\nexports.module = angular.module('ngeoNotification', [\n]);\n\nexports.module.service('ngeoNotification', exports);\n\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/Notification.js"],"sourceRoot":""}