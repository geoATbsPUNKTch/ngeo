{"version":3,"sources":["webpack:///./src/misc/Time.js","webpack:///./examples/datepicker.js","webpack:///./src/misc/datepickerComponent.js","webpack:///./src/goog.asserts.prod.js"],"names":["_ngeo","__webpack_require__","exports","prototype","getOptions","time","minDate","Date","minValue","maxDate","maxValue","minDefaultDate","minDefValue","maxDefaultDate","maxDefValue","defaultValues","mode","getTime","values","getUTCDate","localDate","getUTCFullYear","getUTCMonth","module","angular","service","_ngeo2","default","requires","push","name","e","Error","code","app","ngeo","_datepickerComponent2","_Time2","MainController","ngeoTime","this","ngeoTime_","timeRangeMode","widget","interval","timeValueMode","value","rangeValue","onDateSelected","date","onDateRangeSelected","controller","element","attrs","templateUrl","undefined","baseModuleTemplateUrl","component_","ngeoDatePickerTemplateUrl","$timeout","scope","bindToController","restrict","link","ctrl","init","lang","gettextCatalog_","getCurrentLanguage","$","sdateOptions","extend","onClose","selectedDate","find","datepicker","edateOptions","on","dp","css","stopPropagation","directive","Controller_","$scope","$injector","gettextCatalog","_this","isModeRange","initialMinDate","initialMaxDate","changeMonth","changeYear","sdate","edate","$watchGroup","newDates","oldDates","sDate","eDate","isDate","start","end","initialOptions_","_asserts2","assertArray","assertNumber","condition","opt_message","var_args","type"],"mappings":"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","file":"datepicker.min.js","sourcesContent":["/**\n * @module ngeo.misc.Time\n*/\nimport ngeoBase from 'ngeo';\n\n/**\n * ngeo - Time service\n * @constructor\n * @struct\n *//* @ngInject\n * @ngdoc service\n * @ngname ngeoTime\n */\nconst exports = function() {};\n\n\n/**\n * Get options regarding the time property of a node;\n *\n * @param {ngeox.TimeProperty} time the time property of a node\n * @return {{\n *  minDate : number,\n *  maxDate : number,\n *  values : (Array<number>|number)\n * }} - Configuration for the UI components\n * @export\n */\nexports.prototype.getOptions = function(time) {\n\n  const minDate = new Date(time.minValue);\n  const maxDate = new Date(time.maxValue);\n\n  const minDefaultDate = (time.minDefValue) ?\n    new Date(time.minDefValue) : minDate;\n  const maxDefaultDate = (time.maxDefValue) ?\n    new Date(time.maxDefValue) : maxDate;\n\n  const defaultValues = (time.mode === 'range') ?\n    [minDefaultDate.getTime(), maxDefaultDate.getTime()] :\n    minDefaultDate.getTime();\n\n  return {\n    minDate: minDate.getTime(),\n    maxDate: maxDate.getTime(),\n    values: defaultValues\n  };\n};\n\n\n/**\n * Time.prototype.getUTCDate - Get UTC date from a local date object\n *\n * @param  {Object} localDate loacl date object in\n * @return {Object} UTC date\n * @export\n */\nexports.prototype.getUTCDate = function(localDate) {\n  return new Date(\n    localDate.getUTCFullYear(),\n    localDate.getUTCMonth(),\n    localDate.getUTCDate());\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('ngeoTime', []);\nexports.module.service('ngeoTime', exports);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc/Time.js","/**\n * @module app.datepicker\n*/\nconst exports = {};\n\nimport 'examples/datepicker.css';\nimport './common_dependencies.js';\n/** @suppress {extraRequire} */\nimport ngeoMiscDatepickerComponent from 'ngeo/misc/datepickerComponent';\n\nimport ngeoMiscTime from 'ngeo/misc/Time';\n\n\n/** @type {!angular.Module} **/\napp.module = angular.module('app', [\n  ngeo.module.name,\n  ngeoMiscDatepickerComponent.name,\n  ngeoMiscTime.module.name,\n]);\n\n\n/**\n * @constructor\n * @param {!ngeo.misc.Time} ngeoTime time service.\n *//* @ngInject\n */\napp.MainController = function(ngeoTime) {\n\n  /**\n   * @type {ngeo.misc.Time}\n   * @private\n   */\n  this.ngeoTime_ = ngeoTime;\n\n  /**\n   * @type {ngeox.TimeProperty}\n   * @export\n   */\n  this.timeRangeMode = {\n    widget: /** @type {ngeox.TimePropertyWidgetEnum} */ ('datepicker'),\n    maxValue: '2013-12-31T00:00:00Z',\n    minValue: '2006-01-01T00:00:00Z',\n    maxDefValue: null,\n    minDefValue: null,\n    mode: /** @type {ngeox.TimePropertyModeEnum} */ ('range'),\n    interval: [0, 1, 0, 0]\n  };\n\n  /**\n   * @type {ngeox.TimeProperty}\n   * @export\n   */\n  this.timeValueMode = {\n    widget: /** @type {ngeox.TimePropertyWidgetEnum} */ ('datepicker'),\n    maxValue: '2015-12-31T00:00:00Z',\n    minValue: '2014-01-01T00:00:00Z',\n    maxDefValue: null,\n    minDefValue: null,\n    mode: /** @type {ngeox.TimePropertyModeEnum} */ ('value'),\n    interval: [0, 1, 0, 0]\n  };\n\n  /**\n   * @type {string}\n   * @export\n   */\n  this.value;\n\n  /**\n   * @type {string}\n   * @export\n   */\n  this.rangeValue;\n\n  this.onDateSelected = function(date) {\n    this.value = date;\n  };\n\n  this.onDateRangeSelected = function(date) {\n    this.rangeValue = date;\n  };\n\n};\n\n\napp.module.controller('MainController', app.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/datepicker.js","/**\n * @module ngeo.misc.datepickerComponent\n*/\nimport googAsserts from 'goog/asserts';\nimport ngeoBase from 'ngeo';\nimport ngeoMiscTime from 'ngeo/misc/Time';\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('ngeoDatePicker', [\n  ngeoMiscTime.module.name,\n]);\n\nngeoBase.module.requires.push(exports.name);\n\n\nexports.value('ngeoDatePickerTemplateUrl',\n  /**\n     * @param {angular.JQLite} element Element.\n     * @param {angular.Attributes} attrs Attributes.\n     * @return {string} Template URL.\n     */\n  (element, attrs) => {\n    const templateUrl = attrs['ngeoDatePickerTemplateUrl'];\n    return templateUrl !== undefined ? templateUrl :\n      `${ngeoBase.baseModuleTemplateUrl}/misc/datepickerComponent.html`;\n  });\n\n\n/**\n * Provide a directive to select a signle date or a range of dates. Requires\n * jQuery UI for the 'datepicker' widget.\n *\n * @param {string|function(!angular.JQLite=, !angular.Attributes=)}\n * ngeoDatePickerTemplateUrl Template for the directive.\n * @param  {angular.$timeout} $timeout angular timeout service\n * @return {angular.Directive} The directive specs.\n *//* @ngInject\n * @ngdoc directive\n * @ngname ngeoDatePicker\n */\nexports.component_ = function(ngeoDatePickerTemplateUrl,  $timeout) {\n  return {\n    scope: {\n      onDateSelected: '&',\n      time: '='\n    },\n    bindToController: true,\n    controller: 'ngeoDatePickerController as datepickerCtrl',\n    restrict: 'AE',\n    templateUrl: ngeoDatePickerTemplateUrl,\n    link: (scope, element, attrs, ctrl) => {\n      ctrl.init();\n\n      const lang =  ctrl.gettextCatalog_.getCurrentLanguage();\n      $['datepicker']['setDefaults']($['datepicker']['regional'][lang]);\n\n      ctrl.sdateOptions = angular.extend({}, ctrl.sdateOptions, {\n        'onClose': (selectedDate) => {\n          if (selectedDate) {\n            $(element[0]).find('input[name=\"edate\"]').datepicker('option', 'minDate', selectedDate);\n          }\n        }\n      });\n\n      ctrl.edateOptions = angular.extend({}, ctrl.edateOptions, {\n        'onClose': (selectedDate) => {\n          if (selectedDate) {\n            $(element[0]).find('input[name=\"sdate\"]').datepicker('option', 'maxDate', selectedDate);\n          }\n        }\n      });\n\n      angular.element('body').on('hidden.bs.popover', () => {\n        const dp = angular.element('#ui-datepicker-div');\n        if (dp && dp.css('display') === 'block') {\n          $(element[0]).find('input[name$=\"date\"]').datepicker('hide');\n        }\n      });\n\n      $timeout(() => {\n        angular.element('#ui-datepicker-div').on('mousedown', (e) => {\n          e.stopPropagation();\n        });\n      });\n    }\n  };\n};\n\nexports.directive('ngeoDatePicker', exports.component_);\n\n\n/**\n * DatePickerController - directive conttroller\n * @param {!angular.Scope} $scope Angular scope.\n * @param {!angular.$injector} $injector injector.\n * @param {!ngeo.misc.Time} ngeoTime time service.\n * @param {!angularGettext.Catalog} gettextCatalog service.\n * @constructor\n * @private\n * @struct\n *//* @ngInject\n * @ngdoc controller\n * @ngname ngeoDatePickerController\n */\nexports.Controller_ = function($scope, $injector,\n  ngeoTime, gettextCatalog) {\n\n  /**\n   * @type {!ngeo.misc.Time}\n   * @private\n   */\n  this.ngeoTime_ = ngeoTime;\n\n  /**\n   * @type {!ngeox.TimeProperty}\n   * @export\n   */\n  this.time;\n\n  /**\n   * The gettext catalog\n   * @type {!angularGettext.Catalog}\n   * @private\n   */\n  this.gettextCatalog_ = gettextCatalog;\n\n\n  /**\n   * If the component is used to select a date range\n   * @type {boolean}\n   * @export\n   */\n  this.isModeRange;\n\n\n  /**\n   * Function called after date(s) changed/selected\n   * @type {function({time: {start: number, end: number}})}\n   * @export\n   */\n  this.onDateSelected;\n\n\n  /**\n   * Initial min date for the datepicker\n   * @type {!Date}\n   */\n  this.initialMinDate;\n\n  /**\n   * Initial max date for the datepickeronDateSelected\n   * @type {!Date}\n   */\n  this.initialMaxDate;\n\n  /**\n   * Datepicker options for the second datepicker (only for range mode)\n   * @type {Object}\n   * @export\n   */\n  this.edateOptions = {\n    'minDate': this.initialMinDate,\n    'maxDate': this.initialMaxDate,\n    'changeMonth': true,\n    'changeYear': true\n  };\n\n  /**\n   * Datepicker options for the first datepicker\n   * @type {Object}\n   * @export\n   */\n  this.sdateOptions = {\n    'minDate': this.initialMinDate,\n    'maxDate': this.initialMaxDate,\n    'changeMonth': true,\n    'changeYear': true\n  };\n\n  /**\n   * Start date model for the first date picker\n   * @type {Date}\n   * @export\n   */\n  this.sdate;\n\n  /**\n   * End date model for the second datepicker (only for range mode)\n   * @type {Date}\n   * @export\n   */\n  this.edate;\n\n  $scope.$watchGroup(['datepickerCtrl.sdate', 'datepickerCtrl.edate'], (newDates, oldDates) => {\n    const sDate = newDates[0];\n    const eDate = newDates[1];\n\n    if (angular.isDate(sDate) && (!this.isModeRange || angular.isDate(eDate))) {\n      this.onDateSelected({\n        time: {\n          start: sDate.getTime(),\n          end: eDate ? eDate.getTime() : null\n        }\n      });\n    }\n  });\n};\n\n/**\n * Initialise the controller.\n */\nexports.Controller_.prototype.init = function() {\n  //fetch the initial options for the component\n  const initialOptions_ = this.ngeoTime_.getOptions(this.time);\n  this.initialMinDate = new Date(initialOptions_.minDate);\n  this.initialMaxDate = new Date(initialOptions_.maxDate);\n  this.isModeRange = this.time.mode === 'range';\n\n  if (this.isModeRange) {\n    googAsserts.assertArray(initialOptions_.values);\n    this.sdate = new Date(initialOptions_.values[0]);\n    this.edate = new Date(initialOptions_.values[1]);\n  } else {\n    googAsserts.assertNumber(initialOptions_.values);\n    this.sdate = new Date(initialOptions_.values);\n  }\n};\n\nexports.controller('ngeoDatePickerController',\n  exports.Controller_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc/datepickerComponent.js","const exports = {};\n\nexports.assert = function(condition, opt_message, var_args) {};\nexports.assertNumber = function(value, opt_message, var_args) {};\nexports.assertString = function(value, opt_message, var_args) {};\nexports.assertFunction = function(value, opt_message, var_args) {};\nexports.assertObject = function(value, opt_message, var_args) {};\nexports.assertArray = function(value, opt_message, var_args) {};\nexports.assertBoolean = function(value, opt_message, var_args) {};\nexports.assertElement = function(value, opt_message, var_args) {};\nexports.assertInstanceof = function(value, type, opt_message, var_args) {};\nexports.assertObjectPrototypeIsIntact = function() {};\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/goog.asserts.prod.js"],"sourceRoot":""}