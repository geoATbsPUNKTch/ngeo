{"version":3,"sources":["webpack:///./src/message/Message.js","webpack:///./src/message/Notification.js","webpack:///./src/goog.asserts.prod.js","webpack:///./examples/notification.js"],"names":["exports","prototype","showMessage","message","show","object","this","getMessageObjects","forEach","error","Type","ERROR","info","INFORMATION","success","SUCCESS","warn","WARNING","opt_type","msgObjects","msgObject","defaultType","push","msg","type","undefined","Array","isArray","__webpack_require__","$timeout","_Message2","default","call","timeout_","container","angular","element","document","body","append","container_","cache_","_ol2","inherits","DEFAULT_DELAY_","notify","clear","uid","clearMessageByCacheItem_","parseInt","_this","_asserts2","assertString","classNames","el","join","target","html","addClass","delay","item","getUid","promise","alert","cancel","module","service","_ngeo2","requires","name","condition","opt_message","var_args","value","e","Error","code","app","ngeo","_Notification2","MainController","ngeoNotification","notification","i_","$","tooltip","trigger","notifyMulti","notifyTarget","notifyQuick","controller"],"mappings":"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","file":"notification.min.js","sourcesContent":["/**\n * @module ngeo.message.Message\n*/\n/**\n * Abstract class for services that display messages.\n *\n * @constructor\n * @struct\n * @abstract\n */\nconst exports = function() {};\n\n\n/**\n * Show the message.\n *\n * @abstract\n * @param {ngeox.Message} message Message.\n * @protected\n */\nexports.prototype.showMessage = function(message) {};\n\n\n/**\n * Show disclaimer message string or object or list of disclame message\n * strings or objects.\n *\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @export\n */\nexports.prototype.show = function(object) {\n  const msgObjects = this.getMessageObjects(object);\n  msgObjects.forEach(this.showMessage, this);\n};\n\n\n/**\n * Display the given error message or list of error messages.\n *\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.error = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.ERROR));\n};\n\n\n/**\n * Display the given info message or list of info messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.info = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.INFORMATION));\n};\n\n\n/**\n * Display the given success message or list of success messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.success = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.SUCCESS));\n};\n\n\n/**\n * Display the given warning message or list of warning messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.warn = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.WARNING));\n};\n\n\n/**\n * Returns an array of message object from any given message string, list of\n * message strings, message object or list message objects. The type can be\n * overridden here as well OR defined (if the message(s) is/are string(s),\n * defaults to 'information').\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @param {string=} opt_type The type of message to override the messages with.\n * @return {Array.<ngeox.Message>} List of message objects.\n * @protected\n */\nexports.prototype.getMessageObjects = function(object, opt_type) {\n  const msgObjects = [];\n  let msgObject = null;\n  const defaultType = exports.Type.INFORMATION;\n\n  if (typeof object === 'string') {\n    msgObjects.push({\n      msg: object,\n      type: opt_type !== undefined ? opt_type : defaultType\n    });\n  } else if (Array.isArray(object)) {\n    object.forEach((msg) => {\n      if (typeof object === 'string') {\n        msgObject = {\n          msg: msg,\n          type: opt_type !== undefined ? opt_type : defaultType\n        };\n      } else {\n        msgObject = msg;\n        if (opt_type !== undefined) {\n          msgObject.type = opt_type;\n        }\n      }\n      msgObjects.push(msgObject);\n    }, this);\n  } else {\n    msgObject = object;\n    if (opt_type !== undefined) {\n      msgObject.type = opt_type;\n    }\n    if (msgObject.type === undefined) {\n      msgObject.type = defaultType;\n    }\n    msgObjects.push(msgObject);\n  }\n\n  return msgObjects;\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nexports.Type = {\n  /**\n   * @type {string}\n   * @export\n   */\n  ERROR: 'error',\n  /**\n   * @type {string}\n   * @export\n   */\n  INFORMATION: 'information',\n  /**\n   * @type {string}\n   * @export\n   */\n  SUCCESS: 'success',\n  /**\n   * @type {string}\n   * @export\n   */\n  WARNING: 'warning'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/Message.js","/**\n * @module ngeo.message.Notification\n*/\nimport googAsserts from 'goog/asserts';\nimport ngeoBase from 'ngeo';\nimport ngeoMessageMessage from 'ngeo/message/Message';\nimport olBase from 'ol';\n\n/**\n * Provides methods to display any sort of messages, notifications, errors,\n * etc. Requires Bootstrap library (both CSS and JS) to display the alerts\n * properly.\n *\n * @constructor\n * @struct\n * @extends {ngeo.message.Message}\n * @param {angular.$timeout} $timeout Angular timeout service.\n * @ngdoc service\n * @ngname ngeoNotification\n * @abstract\n *//* @ngInject\n */\nconst exports = function($timeout) {\n\n  ngeoMessageMessage.call(this);\n\n  /**\n   * @type {angular.$timeout}\n   * @private\n   */\n  this.timeout_ = $timeout;\n\n  const container = angular.element('<div class=\"ngeo-notification\"></div>');\n  angular.element(document.body).append(container);\n\n  /**\n   * @type {angular.JQLite}\n   * @private\n   */\n  this.container_ = container;\n\n  /**\n   * @type {Object.<number, ngeo.message.Notification.CacheItem>}\n   * @private\n   */\n  this.cache_ = {};\n\n};\n\nolBase.inherits(exports, ngeoMessageMessage);\n\n\n/**\n * Default delay (in milliseconds) a message should be displayed.\n * @type {number}\n * @private\n */\nexports.DEFAULT_DELAY_ = 7000;\n\n\n// MAIN API METHODS\n\n\n/**\n * Display the given message string or object or list of message strings or\n * objects.\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @export\n */\nexports.prototype.notify = function(object) {\n  this.show(object);\n};\n\n\n/**\n * Clears all messages that are currently being shown.\n * @export\n */\nexports.prototype.clear = function() {\n  for (const uid in this.cache_) {\n    this.clearMessageByCacheItem_(this.cache_[parseInt(uid, 10)]);\n  }\n};\n\n\n/**\n * @override\n */\nexports.prototype.showMessage = function(message) {\n  const type = message.type;\n  googAsserts.assertString(type, 'Type should be set.');\n\n  const classNames = ['alert', 'fade'];\n  switch (type) {\n    case ngeoMessageMessage.Type.ERROR:\n      classNames.push('alert-danger');\n      break;\n    case ngeoMessageMessage.Type.INFORMATION:\n      classNames.push('alert-info');\n      break;\n    case ngeoMessageMessage.Type.SUCCESS:\n      classNames.push('alert-success');\n      break;\n    case ngeoMessageMessage.Type.WARNING:\n      classNames.push('alert-warning');\n      break;\n    default:\n      break;\n  }\n\n  const el = angular.element(`<div class=\"${classNames.join(' ')}\"></div>`);\n  let container;\n\n  if (message.target) {\n    container = angular.element(message.target);\n  } else {\n    container = this.container_;\n  }\n\n  container.append(el);\n  el.html(message.msg).addClass('in');\n\n  const delay = message.delay !== undefined ? message.delay :\n    exports.DEFAULT_DELAY_;\n\n  const item = /** @type {ngeo.message.Notification.CacheItem} */ ({\n    el\n  });\n\n  // Keep a reference to the promise, in case we want to manually cancel it\n  // before the delay\n  const uid = olBase.getUid(el);\n  item.promise = this.timeout_(() => {\n    el.alert('close');\n    delete this.cache_[uid];\n  }, delay);\n\n  this.cache_[uid] = item;\n};\n\n\n/**\n * Clear a message using its cache item.\n * @param {ngeo.message.Notification.CacheItem} item Cache item.\n * @private\n */\nexports.prototype.clearMessageByCacheItem_ = function(item) {\n  const el = item.el;\n  const promise = item.promise;\n  const uid = olBase.getUid(el);\n\n  // Close the message\n  el.alert('close');\n\n  // Cancel timeout in case we want to stop before delay. If called by the\n  // timeout itself, then this has no consequence.\n  this.timeout_.cancel(promise);\n\n  // Delete the cache item\n  delete this.cache_[uid];\n};\n\n\n/**\n * @typedef {{\n *     el: angular.JQLite,\n *     promise: angular.$q.Promise\n * }}\n */\nexports.CacheItem;\n\n\n/**\n * @type {angular.Module}\n */\nexports.module = angular.module('ngeoNotification', [\n]);\n\nexports.module.service('ngeoNotification', exports);\n\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/Notification.js","const exports = {};\n\nexports.assert = function(condition, opt_message, var_args) {};\nexports.assertNumber = function(value, opt_message, var_args) {};\nexports.assertString = function(value, opt_message, var_args) {};\nexports.assertFunction = function(value, opt_message, var_args) {};\nexports.assertObject = function(value, opt_message, var_args) {};\nexports.assertArray = function(value, opt_message, var_args) {};\nexports.assertBoolean = function(value, opt_message, var_args) {};\nexports.assertElement = function(value, opt_message, var_args) {};\nexports.assertInstanceof = function(value, type, opt_message, var_args) {};\nexports.assertObjectPrototypeIsIntact = function() {};\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/goog.asserts.prod.js","/**\n * @module app.notification\n*/\nconst exports = {};\n\nimport 'examples/notification.css';\nimport './common_dependencies.js';\nimport ngeoMessageMessage from 'ngeo/message/Message';\n\nimport ngeoMessageNotification from 'ngeo/message/Notification';\n\n\n/** @type {!angular.Module} **/\napp.module = angular.module('app', [\n  ngeo.module.name,\n  ngeoMessageNotification.module.name,\n]);\n\n\n/**\n * @param {ngeo.message.Notification} ngeoNotification Ngeo notification service.\n *//* @ngInject\n * @constructor\n */\napp.MainController = function(ngeoNotification) {\n\n  /**\n   * @type {ngeo.message.Notification}\n   * @export\n   */\n  this.notification = ngeoNotification;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.i_ = 1;\n\n  // initialize tooltips\n  $('[data-toggle=\"tooltip\"]').tooltip({\n    container: 'body',\n    trigger: 'hover'\n  });\n\n};\n\n\n/**\n * Demonstrates how to display multiple messages at once with the notification\n * service.\n * @export\n */\napp.MainController.prototype.notifyMulti = function() {\n  this.notification.notify([{\n    msg: ['Error #', this.i_++].join(''),\n    type: ngeoMessageMessage.Type.ERROR\n  }, {\n    msg: ['Warning #', this.i_++].join(''),\n    type: ngeoMessageMessage.Type.WARNING\n  }, {\n    msg: ['Information #', this.i_++].join(''),\n    type: ngeoMessageMessage.Type.INFORMATION\n  }, {\n    msg: ['Success #', this.i_++].join(''),\n    type: ngeoMessageMessage.Type.SUCCESS\n  }]);\n};\n\n\n/**\n * Demonstrates how to display a message in an other target than the original\n * one defined by the notification service.\n * @export\n */\napp.MainController.prototype.notifyTarget = function() {\n  this.notification.notify({\n    msg: 'Error in an other target',\n    target: angular.element('#my-messages'),\n    type: ngeoMessageMessage.Type.ERROR\n  });\n};\n\n/**\n * Demonstrates how to display a message for a specific number of seconds.\n * @export\n */\napp.MainController.prototype.notifyQuick = function() {\n  this.notification.notify({\n    delay: 1000,\n    msg: 'Lasts one second',\n    type: ngeoMessageMessage.Type.SUCCESS\n  });\n};\n\n\napp.module.controller('MainController', app.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/notification.js"],"sourceRoot":""}