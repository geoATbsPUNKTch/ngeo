{"version":3,"sources":["webpack:///./src/filters.js","webpack:///./src/goog.asserts.js","webpack:///./examples/grid.js","webpack:///./src/grid/module.js","webpack:///./src/grid/component.js","webpack:///./src/grid/Config.js"],"names":["__webpack_require__","olMath","_index2","default","Scalify","$filter","numberFilter","filterFn","scale","text","module","filter","Number","$locale","formats","NUMBER_FORMATS","number","opt_precision","groupSep","GROUP_SEP","decimalSep","DECIMAL_SEP","undefined","Infinity","sign","Math","abs","nb_decimal","floor","log","factor","pow","round","decimal","unit","str_number","length","substring","groups","str_unit","index","unshift","join","UnitPrefix","standardPrefix","binaryPrefix","opt_unit","opt_type","divisor","prefix","index_max","postfix","space","NumberCoordinates","coordinates","opt_fractionDigits","opt_template","template","x","y","fractionDigits","parseInt","replace","DMSCoordinates","degreesToStringHDMS","degrees","hemispheres","normalizedDegrees","modulo","dms","d","m","s","_string2","padNumber","charAt","xdms","ydms","trustHtmlFilter","$sce","input","trustAsHtml","exports","defaultMessage","defaultArgs","givenMessage","givenArgs","message","args","e","AssertionError","errorHandler_","errorHandler","ENABLE_ASSERTS","condition","opt_message","var_args","doAssertFailure_","Array","prototype","slice","call","arguments","value","goog","isNumber","typeOf","isString","isFunction","isObject","isArray","isBoolean","nodeType","dom","NodeType","ELEMENT","type","getType_","key","Object","fail","Function","displayName","name","constructor","toString","_typeof","_module","angular","ngeo","_module2","MainController","this","gridConfig","grid","Config","display_name","timestamp","controller","_component2","_Config2","ngeoGridTemplateUrl","$element","$attrs","requires","push","templateUrl","baseModuleTemplateUrl","component_","bindings","configuration","component","Controller_","$scope","scope_","selectedRows","sortedBy","sortAscending","floatTheadConfig","scrollContainer","$table","closest","$onInit","sort","columnName","asc","data","attributes1","attributes2","clickRow","attributes","event","shiftKey","isShiftKeyOnly_","platformModifierKey","isPlatformModifierKeyOnly_","clickRow_","selectRange_","toggleRow","isSelected","isRowSelected","unselectAll","selectRow","targetUid","getRowUid","posClickedRow","posSelectedRows","i","currentRow","_asserts2","assert","distance","posClosestRow","j","currentPos","currentDistance","rangeEnd","l","preventTextSelection","preventDefault","altKey","_has2","MAC","metaKey","ctrlKey","olBase","columnDefs","getUid","getSelectedCount","keys","getSelectedRows","_this","row","uid","selectAll","_this2","forEach","rowId","invertSelection","_this3"],"mappings":"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","file":"grid.2e8a14a2352744c44eed.js","sourcesContent":["/**\n * @module ngeo.filters\n*/\nconst exports = {};\nimport ngeoBase from 'ngeo/index.js';\nimport * as olMath from 'ol/math.js';\nimport olString from 'ol/string.js';\n\n/**\n * Format a number as a localized scale.\n * For instance:\n *  - For 'fr-CH' the value 25000 will become '1 : 25 000'.\n *  - For 'en-US' the value 25000 will become '1 : 25,000'.\n *\n * Example:\n *\n *      <p>{{25000 | ngeoScalify}}</p>\n *\n *\n * @param {angular.$filter} $filter Angular filter\n * @return {function(number): string} A function to format number into a 'scale'\n *     string.\n *//* @ngInject\n * @ngdoc filter\n * @ngname ngeoScalify\n */\nngeoBase.Scalify = function($filter) {\n  const numberFilter = $filter('number');\n  const filterFn = function(scale) {\n    const text = numberFilter(scale, 0);\n    return text ? `1\\u00a0:\\u00a0${text}` : '';\n  };\n  filterFn['$stateful'] = true;\n  return filterFn;\n};\n\nngeoBase.module.filter('ngeoScalify', ngeoBase.Scalify);\n\n/**\n * A filter used to format a number with a precision, using the locale.\n *\n * Arguments:\n * - opt_precision: The used precision, default is 3.\n *\n * Examples:\n *\n *      {{0.1234 | ngeoNumber}} => 0.123\n *      {{1.234 | ngeoNumber}} => 1.23\n *      {{12.34 | ngeoNumber}} => 12.3\n *      {{123.4 | ngeoNumber}} => 123\n *      {{1234 | ngeoNumber}} => 1230\n *\n * @param {angular.$locale} $locale Angular locale\n * @return {ngeox.number} Function used to format number into a string.\n *//* @ngInject\n * @ngdoc filter\n * @ngname ngeoNumber\n */\nngeoBase.Number = function($locale) {\n  const formats = $locale.NUMBER_FORMATS;\n\n  /**\n   * @param {number} number The number to format.\n   * @param {number=} opt_precision The used precision, default is 3.\n   * @return {string} The formatted string.\n   */\n  const result = function(number, opt_precision) {\n    const groupSep = formats.GROUP_SEP;\n    const decimalSep = formats.DECIMAL_SEP;\n    if (opt_precision === undefined) {\n      opt_precision = 3;\n    }\n\n    if (number === Infinity) {\n      return '\\u221e';\n    } else if (number === -Infinity) {\n      return '-\\u221e';\n    } else if (number === 0) {\n      // 0 will creates infinity values\n      return '0';\n    }\n    const sign = number < 0;\n    number = Math.abs(number);\n\n    const nb_decimal = opt_precision - Math.floor(Math.log(number) / Math.log(10)) - 1;\n    const factor = Math.pow(10, nb_decimal);\n    number = Math.round(number * factor);\n    let decimal = '';\n    const unit = Math.floor(number / factor);\n\n    if (nb_decimal > 0) {\n      let str_number = `${number}`;\n      // 0 padding\n      while (str_number.length < nb_decimal) {\n        str_number = `0${str_number}`;\n      }\n      decimal = str_number.substring(str_number.length - nb_decimal);\n      while (decimal[decimal.length - 1] === '0') {\n        decimal = decimal.substring(0, decimal.length - 1);\n      }\n    }\n\n    const groups = [];\n    let str_unit = `${unit}`;\n    while (str_unit.length > 3) {\n      const index = str_unit.length - 3;\n      groups.unshift(str_unit.substring(index));\n      str_unit = str_unit.substring(0, index);\n    }\n    groups.unshift(str_unit);\n\n    return (sign ? '-' : '') + groups.join(groupSep) + (\n      decimal.length === 0 ? '' : decimalSep + decimal\n    );\n  };\n  return result;\n};\n\nngeoBase.module.filter('ngeoNumber', ngeoBase.Number);\n\n/**\n * A filter used to format a number with the prefix and unit\n *\n * Arguments:\n * - opt_unit: The unit to used, default is ''.\n * - opt_type: (unit|square|binary) the type of units, default is 'unit'.\n * - opt_precision: The used precision, default is 3.\n *\n * Examples:\n *\n *      {{25000 | ngeoUnitPrefix}} => 25 k\n *      {{25000 | ngeoUnitPrefix:'m'}} => 25 km\n *      {{25000000 | ngeoUnitPrefix:'m²':'square'}} => 25 km²\n *      {{2048 | ngeoUnitPrefix:'o':'binary'}} => 2 Kio\n *\n *\n * @param {angular.$filter} $filter Angular filter\n * @return {ngeox.unitPrefix} Function used to format number into a string.\n *//* @ngInject\n * @ngdoc filter\n * @ngname ngeoUnitPrefix\n */\nngeoBase.UnitPrefix = function($filter) {\n  const numberFilter = $filter('ngeoNumber');\n  const standardPrefix = ['', 'k', 'M', 'G', 'T', 'P'];\n  const binaryPrefix = ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi'];\n  /**\n   * @param {number} number The number to format.\n   * @param {string=} opt_unit The unit to used, default is ''.\n   * @param {string=} opt_type (unit|square|binary) the type of units, default is 'unit'.\n   * @param {number=} opt_precision The used precision, default is 3.\n   * @return {string} The formatted string.\n   */\n  const result = function(number, opt_unit, opt_type, opt_precision) {\n    if (opt_unit === undefined) {\n      opt_unit = '';\n    }\n    let divisor = 1000;\n    let prefix = standardPrefix;\n    if (opt_type === 'square') {\n      divisor = 1000000;\n    } else if (opt_type === 'binary') {\n      divisor = 1024;\n      prefix = binaryPrefix;\n    }\n\n    let index = 0;\n    const index_max = prefix.length - 1;\n    while (number >= divisor && index < index_max) {\n      number = number / divisor;\n      index++;\n    }\n\n    const postfix = prefix[index] + opt_unit;\n    const space = postfix.length == 0 ? '' : '\\u00a0';\n    return numberFilter(number, opt_precision) + space + postfix;\n  };\n  return result;\n};\n\nngeoBase.module.filter('ngeoUnitPrefix', ngeoBase.UnitPrefix);\n\n/**\n * Format a couple of numbers as number coordinates.\n *\n * Example without parameters (en-US localization):\n *\n *      <p>{{[7.1234, 46.9876] | ngeoNumberCoordinates}}</p>\n *      <!-- will Become 7 47 -->\n *\n * Example with defined fractionDigits and template (en-US localization):\n *\n *      <p>{{[7.1234, 46.9876] | ngeoNumberCoordinates:2:'co {x} E; {y} N'}}</p>\n *      <!-- will Become co 7.12 E; 46.99 N -->\n *\n * Example without fractionDigits but with defined template and localize:\n *\n *      <!-- With en-US localization (opt_localize can be true or undefined) -->\n *      <p>{{[2600000, 1600000] | ngeoNumberCoordinates:0:'{x}, {y}'}}</p>\n *      <!-- will Become 2,600,000, 1,600,000 -->\n *      <br/>\n *      <!-- With fr-CH localization (opt_localize can be true or undefined) -->\n *      <p>{{[2600000, 1600000] | ngeoNumberCoordinates:0:'{x}, {y}'}}</p>\n *      <!-- will Become 2'600'000, 1'600'000 -->\n *      <br/>\n *      <!-- With en-US localization but with localization to false -->\n *      <p>{{[2600000, 1600000] | ngeoNumberCoordinates:0:'{x}, {y}'}}</p>\n *      <!-- will Become 2'600'000, 1'600'000 -->\n *\n * @param {angular.$filter} $filter Angular filter\n * @return {ngeox.numberCoordinates} A function to format numbers into coordinates string.\n *//* @ngInject\n * @ngdoc filter\n * @ngname ngeoNumberCoordinates\n */\nngeoBase.NumberCoordinates = function($filter) {\n  /**\n   * @param {ol.Coordinate} coordinates Array of two numbers.\n   * @param {(number|string)=} opt_fractionDigits Optional number of digit.\n   *     Default to 0.\n   * @param {string=} opt_template Optional template. Default to '{x} {y}'.\n   *     Where \"{x}\" will be replaced by the easting coordinate and \"{y}\" by the\n   *     northing one. Note: Use a html entity to use the semicolon symbol\n   *     into a template.\n   * @return {string} Number formatted coordinates.\n   */\n  const filterFn = function(coordinates, opt_fractionDigits, opt_template) {\n    const template = opt_template ? opt_template : '{x} {y}';\n    let x = coordinates[0];\n    let y = coordinates[1];\n    const fractionDigits = parseInt(opt_fractionDigits, 10) | 0;\n    x = $filter('number')(x, fractionDigits);\n    y = $filter('number')(y, fractionDigits);\n    return template.replace('{x}', x).replace('{y}', y);\n  };\n  return filterFn;\n};\n\nngeoBase.module.filter('ngeoNumberCoordinates', ngeoBase.NumberCoordinates);\n\n\n/**\n * Format coordinates as DMS coordinates.\n *\n * Example without parameters:\n *\n *      <p>{{[7.1234, 46.9876] | ngeoDMSCoordinates}}</p>\n *      <!-- will Become  7° 07' 24'' E 46° 59' 15'' N-->\n *\n * Example with defined fractionDigits and a template.\n *\n *      <p>{{[7.1234, 46.9876] | ngeoDMSCoordinates:2:'[{y}; {x]'}}</p>\n *      <!-- will Become [46° 59' 15.36'' N; 7° 07' 24.24'' E] -->\n *\n * @return {ngeox.dmsCoordinates} A function to format numbers into a DMS coordinates string.\n *//* @ngInject\n * @ngdoc filter\n * @ngname ngeoDMSCoordinates\n */\nngeoBase.DMSCoordinates = function() {\n  const degreesToStringHDMS = function(degrees, hemispheres, fractionDigits) {\n    const normalizedDegrees = olMath.modulo(degrees + 180, 360) - 180;\n    const dms = Math.abs(3600 * normalizedDegrees);\n    const d = Math.floor(dms / 3600);\n    const m = Math.floor((dms / 60) % 60);\n    const s = (dms % 60);\n    return `${d}\\u00b0 ${\n      olString.padNumber(m, 2)}\\u2032 ${\n      olString.padNumber(s, 2, fractionDigits)}\\u2033 ${\n      hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0)}`;\n  };\n\n  /**\n   * @param {ol.Coordinate} coordinates Array of two numbers.\n   * @param {(number|string)=} opt_fractionDigits Optional number of digit.\n   *     Default to 0.\n   * @param {string=} opt_template Optional template. Default to\n   *     '{x} {y}'. Where \"{x}\" will be replaced by the easting\n   *     coordinate, {y} by the northing one. Note: Use a html entity to use the\n   *     semicolon symbol into a template.\n   * @return {string} DMS formatted coordinates.\n   */\n  const filterFn = function(coordinates, opt_fractionDigits, opt_template) {\n    const fractionDigits = parseInt(opt_fractionDigits, 10) | 0;\n\n    const template = opt_template ? opt_template : '{x} {y}';\n\n    const xdms = degreesToStringHDMS(coordinates[0], 'EW', fractionDigits);\n    const ydms = degreesToStringHDMS(coordinates[1], 'NS', fractionDigits);\n\n    return template.replace('{x}', xdms).replace('{y}', ydms);\n  };\n\n  return filterFn;\n};\n\nngeoBase.module.filter('ngeoDMSCoordinates', ngeoBase.DMSCoordinates);\n\n\n/**\n * A filter to mark a value as trusted HTML.\n *\n * Usage:\n *\n *    <p ng-bind-html=\"ctrl.someValue | ngeoTrustHtml\"></p>\n *\n * @return {function(?):string} The filter function.\n *//* @ngInject\n * @ngdoc filter\n * @param {angular.$sce} $sce Angular sce service.\n * @ngname ngeoTrustHtml\n */\nngeoBase.trustHtmlFilter = function($sce) {\n  return function(input) {\n    if (input !== undefined && input !== null) {\n      return $sce.trustAsHtml(`${input}`);\n    } else {\n      return $sce.trustAsHtml('&nbsp;');\n    }\n  };\n};\n\nngeoBase.module.filter('ngeoTrustHtml', ngeoBase.trustHtmlFilter);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/filters.js","/* eslint valid-jsdoc: 0, prefer-rest-params: 0,  */\n// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Utilities to check the preconditions, postconditions and\n * invariants runtime.\n *\n * Methods in this package should be given special treatment by the compiler\n * for type-inference. For example, <code>goog.asserts.assert(foo)</code>\n * will restrict <code>foo</code> to a truthy value.\n *\n * The compiler has an option to disable asserts. So code like:\n * <code>\n * var x = goog.asserts.assert(foo()); goog.asserts.assert(bar());\n * </code>\n * will be transformed into:\n * <code>\n * var x = foo();\n * </code>\n * The compiler will leave in foo() (because its return value is used),\n * but it will remove bar() because it assumes it does not have side-effects.\n *\n * @author agrieve@google.com (Andrew Grieve)\n */\n\nconst exports = {};\n\n/**\n * Throws an exception with the given message and \"Assertion failed\" prefixed\n * onto it.\n * @param {string} defaultMessage The message to use if givenMessage is empty.\n * @param {Array<*>} defaultArgs The substitution arguments for defaultMessage.\n * @param {string|undefined} givenMessage Message supplied by the caller.\n * @param {Array<*>} givenArgs The substitution arguments for givenMessage.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n * @private\n */\nexports.doAssertFailure_ = function(\n  defaultMessage, defaultArgs, givenMessage, givenArgs) {\n  let message = 'Assertion failed';\n  let args;\n  if (givenMessage) {\n    message += `: ${givenMessage}`;\n    args = givenArgs;\n  } else if (defaultMessage) {\n    message += `: ${defaultMessage}`;\n    args = defaultArgs;\n  }\n  // The '' + works around an Opera 10 bug in the unit tests. Without it,\n  // a stack trace is added to var message above. With this, a stack trace is\n  // not added until this line (it causes the extra garbage to be added after\n  // the assertion message instead of in the middle of it).\n  const e = new exports.AssertionError(`${message}`, args || []);\n  exports.errorHandler_(e);\n};\n\n\n/**\n * Sets a custom error handler that can be used to customize the behavior of\n * assertion failures, for example by turning all assertion failures into log\n * messages.\n * @param {function(!goog.asserts.AssertionError)} errorHandler\n */\nexports.setErrorHandler = function(errorHandler) {\n  if (exports.ENABLE_ASSERTS) {\n    exports.errorHandler_ = errorHandler;\n  }\n};\n\n\n/**\n * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS is\n * true.\n * @template T\n * @param {T} condition The condition to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {T} The value of the condition.\n * @throws {goog.asserts.AssertionError} When the condition evaluates to false.\n */\nexports.assert = function(condition, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !condition) {\n    exports.doAssertFailure_(\n      '', null, opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return condition;\n};\n\n\n/**\n * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case\n * when we want to add a check in the unreachable area like switch-case\n * statement:\n *\n * <pre>\n *  switch(type) {\n *    case FOO: doSomething(); break;\n *    case BAR: doSomethingElse(); break;\n *    default: goog.asserts.fail('Unrecognized type: ' + type);\n *      // We have only 2 types - \"default:\" section is unreachable code.\n *  }\n * </pre>\n *\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} Failure.\n */\nexports.fail = function(opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS) {\n    exports.errorHandler_(\n      new exports.AssertionError(\n        `Failure${opt_message ? `: ${opt_message}` : ''}`,\n        Array.prototype.slice.call(arguments, 1)));\n  }\n};\n\n\n/**\n * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {number} The value, guaranteed to be a number when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n */\nexports.assertNumber = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isNumber(value)) {\n    exports.doAssertFailure_(\n      'Expected number but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {number} */ (value);\n};\n\n\n/**\n * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {string} The value, guaranteed to be a string when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a string.\n */\nexports.assertString = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isString(value)) {\n    exports.doAssertFailure_(\n      'Expected string but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {string} */ (value);\n};\n\n\n/**\n * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Function} The value, guaranteed to be a function when asserts\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a function.\n */\nexports.assertFunction = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isFunction(value)) {\n    exports.doAssertFailure_(\n      'Expected function but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Function} */ (value);\n};\n\n\n/**\n * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Object} The value, guaranteed to be a non-null object.\n * @throws {goog.asserts.AssertionError} When the value is not an object.\n */\nexports.assertObject = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isObject(value)) {\n    exports.doAssertFailure_(\n      'Expected object but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Object} */ (value);\n};\n\n\n/**\n * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Array<?>} The value, guaranteed to be a non-null array.\n * @throws {goog.asserts.AssertionError} When the value is not an array.\n */\nexports.assertArray = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isArray(value)) {\n    exports.doAssertFailure_(\n      'Expected array but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Array<?>} */ (value);\n};\n\n\n/**\n * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {boolean} The value, guaranteed to be a boolean when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a boolean.\n */\nexports.assertBoolean = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isBoolean(value)) {\n    exports.doAssertFailure_(\n      'Expected boolean but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {boolean} */ (value);\n};\n\n\n/**\n * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Element} The value, likely to be a DOM Element when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not an Element.\n */\nexports.assertElement = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS &&\n      (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {\n    exports.doAssertFailure_(\n      'Expected Element but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Element} */ (value);\n};\n\n\n/**\n * Checks if the value is an instance of the user-defined type if\n * goog.asserts.ENABLE_ASSERTS is true.\n *\n * The compiler may tighten the type returned by this function.\n *\n * @param {?} value The value to check.\n * @param {function(new: T, ...)} type A user-defined constructor.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} When the value is not an instance of\n *     type.\n * @return {T}\n * @template T\n */\nexports.assertInstanceof = function(value, type, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !(value instanceof type)) {\n    exports.doAssertFailure_(\n      'Expected instanceof %s but got %s.',\n      [exports.getType_(type), exports.getType_(value)],\n      opt_message, Array.prototype.slice.call(arguments, 3));\n  }\n  return value;\n};\n\n\n/**\n * Checks that no enumerable keys are present in Object.prototype. Such keys\n * would break most code that use {@code for (var ... in ...)} loops.\n */\nexports.assertObjectPrototypeIsIntact = function() {\n  for (const key in Object.prototype) {\n    exports.fail(`${key} should not be enumerable in Object.prototype.`);\n  }\n};\n\n\n/**\n * Returns the type of a value. If a constructor is passed, and a suitable\n * string cannot be found, 'unknown type name' will be returned.\n * @param {*} value A constructor, object, or primitive.\n * @return {string} The best display name for the value, or 'unknown type name'.\n * @private\n */\nexports.getType_ = function(value) {\n  if (value instanceof Function) {\n    return value.displayName || value.name || 'unknown type name';\n  } else if (value instanceof Object) {\n    return value.constructor.displayName || value.constructor.name ||\n        Object.prototype.toString.call(value);\n  } else {\n    return value === null ? 'null' : typeof value;\n  }\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/goog.asserts.js","/**\n * @module app.grid\n*/\nconst exports = {};\n\nimport './grid.css';\nimport './common_dependencies.js';\nimport ngeoGridModule from 'ngeo/grid/module.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('app', [\n  ngeo.module.name,\n  ngeoGridModule.name\n]);\n\n\n/**\n * @constructor\n *//* @ngInject\n */\nexports.MainController = function() {\n\n  const data = [\n    {\n      'name': 'row_1',\n      'display_name': 'Row 1',\n      'type': 12,\n      'timestamp': '2010-11-09T22:56:26Z'\n    },\n    {\n      'name': 'row_2',\n      'display_name': 'Row 2',\n      'type': 121,\n      'timestamp': '2010-11-07T22:56:26Z'\n    },\n    {\n      'name': 'row_3',\n      'display_name': 'Row 3',\n      'type': 7,\n      'timestamp': '2010-11-03T22:56:26Z'\n    },\n    {\n      'name': 'row_4',\n      'display_name': 'Row 4',\n      'type': 5,\n      'timestamp': '2010-11-19T22:56:26Z'\n    },\n    {\n      'name': 'row_5',\n      'display_name': 'Row 5',\n      'type': 23,\n      'timestamp': '2010-11-23T22:56:26Z'\n    },\n    {\n      'name': 'row_6',\n      'display_name': 'Row 6',\n      'type': 111,\n      'timestamp': '2010-11-17T22:56:26Z'\n    }\n  ];\n\n  const columnDefs = [\n    {name: 'name'},\n    {name: 'display_name'},\n    {name: 'timestamp'},\n    {name: 'type'}\n  ];\n\n  /**\n   * @type {ngeo.grid.Config}\n   * @export\n   */\n  this.gridConfig = new ngeo.grid.Config(data, columnDefs);\n\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/grid.js","/**\n * @module ngeo.grid.module\n*/\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoGridComponent from 'ngeo/grid/component.js';\n\n/**\n * Also related to the grid but not included in the module:\n *  - ngeo.grid.Config (already required by ngeo.grid.component)\n *\n * @type {!angular.Module}\n */\nconst exports = angular.module('ngeoGridModule', [\n  ngeoBase.module.name, // Change me when all dependencies are in a module.\n  ngeoGridComponent.name\n]);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/grid/module.js","/**\n * @module ngeo.grid.component\n*/\nimport ngeoBase from 'ngeo/index.js';\nimport olHas from 'ol/has.js';\nimport googAsserts from 'goog/asserts.js';\n\n/** @suppress {extraRequire} */\nimport ngeoFilters from 'ngeo/filters.js';\n\nimport ngeoGridConfig from 'ngeo/grid/Config.js';\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('ngeoGrid', [\n  ngeoGridConfig.module.name\n]);\n\nngeoBase.module.requires.push(exports.name);\n\n\nexports.value('ngeoGridTemplateUrl',\n  /**\n     * @param {!angular.JQLite} $element Element.\n     * @param {!angular.Attributes} $attrs Attributes.\n     * @return {string} Template URL.\n     */\n  ($element, $attrs) => {\n    const templateUrl = $attrs['ngeoGridTemplateurl'];\n    return templateUrl !== undefined ? templateUrl :\n      `${ngeoBase.baseModuleTemplateUrl}/grid/component.html`;\n  }\n);\n\n\n/**\n * @param {!angular.JQLite} $element Element.\n * @param {!angular.Attributes} $attrs Attributes.\n * @param {!function(!angular.JQLite, !angular.Attributes): string} ngeoGridTemplateUrl Template function.\n * @return {string} Template URL.\n *//* @ngInject\n */\nfunction ngeoGridTemplateUrl($element, $attrs, ngeoGridTemplateUrl) {\n  return ngeoGridTemplateUrl($element, $attrs);\n}\n\n\n/**\n * A grid component for displaying tabular data. The columns of the grid\n * are sortable, rows can be selected with a single click (also in combination\n * with SHIFT and CTRL/Meta).\n *\n * Example:\n *\n *     <ngeo-grid\n *       ngeo-grid-configuration=\"::ctrl.gridConfiguration\"\n *     </ngeo-grid>\n *\n * @htmlAttribute {ngeo.grid.Config} ngeo-grid-configuration The\n * configuration to use.\n *\n * @ngdoc component\n * @ngname ngeoGrid\n */\nexports.component_ = {\n  controller: 'ngeoGridController as ctrl',\n  bindings: {\n    'configuration': '=ngeoGridConfiguration'\n  },\n  templateUrl: ngeoGridTemplateUrl\n};\n\nexports.component('ngeoGrid', exports.component_);\n\n\n/**\n * @param {!angular.Scope} $scope Angular scope.\n * @constructor\n * @private\n * @struct\n *//* @ngInject\n * @ngdoc controller\n * @ngname ngeoGridController\n */\nexports.Controller_ = function($scope) {\n\n  /**\n   * @type {!angular.Scope}\n   * @private\n   */\n  this.scope_ = $scope;\n\n  /**\n   * @type {ngeo.grid.Config}\n   * @export\n   */\n  this.configuration;\n\n  /**\n   * @type {Object.<string, Object>}\n   * @export\n   */\n  this.selectedRows;\n\n  /**\n   * The name of the column used to sort the grid.\n   * @type {string}\n   * @export\n   */\n  this.sortedBy;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.sortAscending = true;\n\n  /**\n   * Configuration object for float-thead.\n   * @type {Object}\n   * @export\n   */\n  this.floatTheadConfig = {\n    'scrollContainer': function($table) {\n      return $table.closest('.ngeo-grid-table-container');\n    }\n  };\n};\n\n\n/**\n * Init the controller\n */\nexports.Controller_.prototype.$onInit = function() {\n  this.selectedRows = this.configuration.selectedRows;\n};\n\n\n/**\n * Sort function that always puts undefined values to the bottom of the grid.\n * A new call will sort ascending. A next one will sort descending (and so\n * on).\n * @param {string} columnName The name of the column that should be used to\n *    sort the data.\n * @export\n */\nexports.Controller_.prototype.sort = function(columnName) {\n  this.sortAscending = this.sortedBy === columnName ? !this.sortAscending : true;\n  this.sortedBy = columnName;\n\n  const asc = this.sortAscending ? 1 : -1;\n  this.configuration.data.sort((attributes1, attributes2) => {\n    if (!attributes1[columnName]) {\n      return 1;\n    }\n    if (!attributes2[columnName]) {\n      return -1;\n    }\n    return attributes1[columnName] > attributes2[columnName] ? asc : -asc;\n  });\n};\n\n\n/**\n * Handler for clicks on a row.\n * @param {Object} attributes An entry/row.\n * @param {jQuery.Event} event Event.\n * @export\n */\nexports.Controller_.prototype.clickRow = function(attributes, event) {\n  const shiftKey = this.isShiftKeyOnly_(event);\n  const platformModifierKey = this.isPlatformModifierKeyOnly_(event);\n\n  this.clickRow_(attributes, shiftKey, platformModifierKey);\n};\n\n\n/**\n * @param {Object} attributes An entry/row.\n * @param {boolean} shiftKey Shift pressed?\n * @param {boolean} platformModifierKey CTRL/Meta pressed?\n * @private\n */\nexports.Controller_.prototype.clickRow_ = function(\n  attributes, shiftKey, platformModifierKey) {\n\n  if (shiftKey && !platformModifierKey) {\n    this.selectRange_(attributes);\n  } else if (!shiftKey && platformModifierKey) {\n    this.configuration.toggleRow(attributes);\n  } else {\n    const isSelected = this.configuration.isRowSelected(attributes);\n    this.configuration.unselectAll();\n    if (!isSelected) {\n      this.configuration.selectRow(attributes);\n    }\n  }\n};\n\n\n/**\n * Selects all rows between the given row and the closest already selected row.\n * @param {Object} attributes An entry/row.\n * @private\n */\nexports.Controller_.prototype.selectRange_ = function(attributes) {\n  const targetUid = ngeoGridConfig.getRowUid(attributes);\n  const data = this.configuration.data;\n\n  if (this.configuration.isRowSelected(attributes)) {\n    return;\n  }\n\n  // get the position of the clicked and all already selected rows\n  /** @type {number|undefined} */\n  let posClickedRow = undefined;\n  const posSelectedRows = [];\n  for (let i = 0; i < data.length; i++) {\n    const currentRow = data[i];\n    const currentUid = ngeoGridConfig.getRowUid(currentRow);\n\n    if (targetUid === currentUid) {\n      posClickedRow = i;\n    } else if (this.configuration.isRowSelected(currentRow)) {\n      posSelectedRows.push(i);\n    }\n  }\n  googAsserts.assert(posClickedRow !== undefined);\n\n  if (posSelectedRows.length == 0) {\n    // if no other row is selected, select the clicked one and stop\n    this.configuration.selectRow(attributes);\n  }\n\n  // find the selected row which is the closest to the clicked row\n  let distance = Infinity;\n  let posClosestRow = posSelectedRows[0];\n  for (let j = 0; j < posSelectedRows.length; j++) {\n    const currentPos = posSelectedRows[j];\n    const currentDistance = Math.abs(currentPos - posClickedRow);\n    if (distance > currentDistance) {\n      distance = currentDistance;\n      posClosestRow = currentPos;\n    }\n    // note: this could be optimized because `posSelectedRows` is ordered.\n  }\n\n  // then select all rows between the clicked one and the closest\n  const rangeStart = (posClickedRow < posClosestRow) ? posClickedRow : posClosestRow;\n  const rangeEnd = (posClickedRow > posClosestRow) ? posClickedRow : posClosestRow;\n\n  for (let l = rangeStart; l <= rangeEnd; l++) {\n    this.configuration.selectRow(data[l]);\n  }\n};\n\n\n/**\n * Prevent the default browser behaviour of selecting text\n * when selecting multiple rows with SHIFT or CTRL/Meta.\n * @param {jQuery.Event} event Event.\n * @export\n */\nexports.Controller_.prototype.preventTextSelection = function(event) {\n  const shiftKey = this.isShiftKeyOnly_(event);\n  const platformModifierKey = this.isPlatformModifierKeyOnly_(event);\n\n  if (shiftKey || platformModifierKey) {\n    event.preventDefault();\n  }\n};\n\n\n/**\n * Same as `ol.events.condition.platformModifierKeyOnly`.\n * @param {jQuery.Event} event Event.\n * @return {boolean} True if only the platform modifier key is pressed.\n * @private\n */\nexports.Controller_.prototype.isPlatformModifierKeyOnly_ = function(event) {\n  return !event.altKey &&\n    (olHas.MAC ? event.metaKey : event.ctrlKey) &&\n    !event.shiftKey;\n};\n\n\n/**\n * Same as `ol.events.condition.shiftKeyOnly`.\n * @param {jQuery.Event} event Event.\n * @return {boolean} True if only the shift key is pressed.\n * @private\n */\nexports.Controller_.prototype.isShiftKeyOnly_ = function(event) {\n  return (\n    !event.altKey &&\n      !(event.metaKey || event.ctrlKey) &&\n      event.shiftKey);\n};\n\n\nexports.controller('ngeoGridController', exports.Controller_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/grid/component.js","/**\n * @module ngeo.grid.Config\n*/\nimport * as olBase from 'ol/index.js';\n\n/**\n * @param {Array.<Object>|undefined} data Entries/objects to be shown in a grid.\n * @param {Array.<ngeox.GridColumnDef>|undefined} columnDefs Column definition of a grid.\n * @constructor\n * @struct\n * @export\n */\nconst exports = function(data, columnDefs) {\n  /**\n   * @type {Array.<Object>|undefined}\n   * @export\n   */\n  this.data = data;\n\n  /**\n   * @type {Array.<ngeox.GridColumnDef>|undefined}\n   * @export\n   */\n  this.columnDefs = columnDefs;\n\n  /**\n   * @type {!Object.<string, Object>}\n   * @export\n   */\n  this.selectedRows = {};\n};\n\n\n/**\n * Get an ID for a row.\n * @param {Object} attributes An entry/row.\n * @return {string} Unique id for this object.\n * @export\n */\nexports.getRowUid = function(attributes) {\n  return `${olBase.getUid(attributes)}`;\n};\n\n\n/**\n * Is the given row selected?\n * @param {Object} attributes An entry/row.\n * @return {boolean} True if already selected. False otherwise.\n * @export\n */\nexports.prototype.isRowSelected = function(attributes) {\n  return !!this.selectedRows[exports.getRowUid(attributes)];\n};\n\n\n/**\n * Returns the number of selected rows.\n * @return {number} Number of selected rows.\n * @export\n */\nexports.prototype.getSelectedCount = function() {\n  return Object.keys(this.selectedRows).length;\n};\n\n\n/**\n * Returns the selected rows.\n * @return {Array.<Object>} Selected rows in the current ordering.\n * @export\n */\nexports.prototype.getSelectedRows = function() {\n  return this.data.filter(row => this.isRowSelected(row));\n};\n\n\n/**\n * @param {Object} attributes An entry/row.\n * @public\n */\nexports.prototype.selectRow = function(attributes) {\n  const uid = exports.getRowUid(attributes);\n  this.selectedRows[uid] = attributes;\n};\n\n\n/**\n * @param {Object} attributes An entry/row.\n * @public\n */\nexports.prototype.toggleRow = function(attributes) {\n  const uid = exports.getRowUid(attributes);\n  const isSelected = this.isRowSelected(attributes);\n  if (isSelected) {\n    delete this.selectedRows[uid];\n  } else {\n    this.selectedRows[uid] = attributes;\n  }\n};\n\n\n/**\n * Select all rows.\n * @export\n */\nexports.prototype.selectAll = function() {\n  this.data.forEach((attributes) => {\n    this.selectRow(attributes);\n  });\n};\n\n\n/**\n * Unselect all rows.\n * @export\n */\nexports.prototype.unselectAll = function() {\n  for (const rowId in this.selectedRows) {\n    delete this.selectedRows[rowId];\n  }\n};\n\n\n/**\n * Invert selection.\n * @export\n */\nexports.prototype.invertSelection = function() {\n  this.data.forEach((attributes) => {\n    this.toggleRow(attributes);\n  });\n};\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('ngeoGridConfig', []);\nngeo.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/grid/Config.js"],"sourceRoot":""}