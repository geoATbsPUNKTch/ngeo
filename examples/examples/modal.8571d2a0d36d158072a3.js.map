{"version":3,"sources":["webpack:///./src/goog.asserts.js","webpack:///./examples/modal.js","webpack:///./src/message/modalComponent.js"],"names":["exports","defaultMessage","defaultArgs","givenMessage","givenArgs","message","args","e","AssertionError","errorHandler_","errorHandler","ENABLE_ASSERTS","condition","opt_message","var_args","doAssertFailure_","Array","prototype","slice","call","arguments","value","goog","isNumber","typeOf","isString","isFunction","isObject","isArray","isBoolean","nodeType","dom","NodeType","ELEMENT","type","getType_","key","Object","fail","Function","displayName","name","constructor","toString","_typeof","__webpack_require__","_modalComponent","module","angular","ngeo","_modalComponent2","default","MainController","this","modalShown","controller","_index2","requires","push","component_","template","require","ngModel","transclude","bindings","resizable","component","Controller_","_class","$scope","$element","_classCallCheck","$element_","$scope_","modal_","_createClass","_this","children","dialog","find","draggable","$render","modal","$viewValue","on","_asserts2","assert","$apply","$setViewValue"],"mappings":"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","file":"modal.8571d2a0d36d158072a3.js","sourcesContent":["/* eslint valid-jsdoc: 0, prefer-rest-params: 0,  */\n// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Utilities to check the preconditions, postconditions and\n * invariants runtime.\n *\n * Methods in this package should be given special treatment by the compiler\n * for type-inference. For example, <code>goog.asserts.assert(foo)</code>\n * will restrict <code>foo</code> to a truthy value.\n *\n * The compiler has an option to disable asserts. So code like:\n * <code>\n * var x = goog.asserts.assert(foo()); goog.asserts.assert(bar());\n * </code>\n * will be transformed into:\n * <code>\n * var x = foo();\n * </code>\n * The compiler will leave in foo() (because its return value is used),\n * but it will remove bar() because it assumes it does not have side-effects.\n *\n * @author agrieve@google.com (Andrew Grieve)\n */\n\nconst exports = {};\n\n/**\n * Throws an exception with the given message and \"Assertion failed\" prefixed\n * onto it.\n * @param {string} defaultMessage The message to use if givenMessage is empty.\n * @param {Array<*>} defaultArgs The substitution arguments for defaultMessage.\n * @param {string|undefined} givenMessage Message supplied by the caller.\n * @param {Array<*>} givenArgs The substitution arguments for givenMessage.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n * @private\n */\nexports.doAssertFailure_ = function(\n  defaultMessage, defaultArgs, givenMessage, givenArgs) {\n  let message = 'Assertion failed';\n  let args;\n  if (givenMessage) {\n    message += `: ${givenMessage}`;\n    args = givenArgs;\n  } else if (defaultMessage) {\n    message += `: ${defaultMessage}`;\n    args = defaultArgs;\n  }\n  // The '' + works around an Opera 10 bug in the unit tests. Without it,\n  // a stack trace is added to var message above. With this, a stack trace is\n  // not added until this line (it causes the extra garbage to be added after\n  // the assertion message instead of in the middle of it).\n  const e = new exports.AssertionError(`${message}`, args || []);\n  exports.errorHandler_(e);\n};\n\n\n/**\n * Sets a custom error handler that can be used to customize the behavior of\n * assertion failures, for example by turning all assertion failures into log\n * messages.\n * @param {function(!goog.asserts.AssertionError)} errorHandler\n */\nexports.setErrorHandler = function(errorHandler) {\n  if (exports.ENABLE_ASSERTS) {\n    exports.errorHandler_ = errorHandler;\n  }\n};\n\n\n/**\n * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS is\n * true.\n * @template T\n * @param {T} condition The condition to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {T} The value of the condition.\n * @throws {goog.asserts.AssertionError} When the condition evaluates to false.\n */\nexports.assert = function(condition, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !condition) {\n    exports.doAssertFailure_(\n      '', null, opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return condition;\n};\n\n\n/**\n * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case\n * when we want to add a check in the unreachable area like switch-case\n * statement:\n *\n * <pre>\n *  switch(type) {\n *    case FOO: doSomething(); break;\n *    case BAR: doSomethingElse(); break;\n *    default: goog.asserts.fail('Unrecognized type: ' + type);\n *      // We have only 2 types - \"default:\" section is unreachable code.\n *  }\n * </pre>\n *\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} Failure.\n */\nexports.fail = function(opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS) {\n    exports.errorHandler_(\n      new exports.AssertionError(\n        `Failure${opt_message ? `: ${opt_message}` : ''}`,\n        Array.prototype.slice.call(arguments, 1)));\n  }\n};\n\n\n/**\n * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {number} The value, guaranteed to be a number when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n */\nexports.assertNumber = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isNumber(value)) {\n    exports.doAssertFailure_(\n      'Expected number but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {number} */ (value);\n};\n\n\n/**\n * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {string} The value, guaranteed to be a string when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a string.\n */\nexports.assertString = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isString(value)) {\n    exports.doAssertFailure_(\n      'Expected string but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {string} */ (value);\n};\n\n\n/**\n * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Function} The value, guaranteed to be a function when asserts\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a function.\n */\nexports.assertFunction = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isFunction(value)) {\n    exports.doAssertFailure_(\n      'Expected function but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Function} */ (value);\n};\n\n\n/**\n * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Object} The value, guaranteed to be a non-null object.\n * @throws {goog.asserts.AssertionError} When the value is not an object.\n */\nexports.assertObject = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isObject(value)) {\n    exports.doAssertFailure_(\n      'Expected object but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Object} */ (value);\n};\n\n\n/**\n * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Array<?>} The value, guaranteed to be a non-null array.\n * @throws {goog.asserts.AssertionError} When the value is not an array.\n */\nexports.assertArray = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isArray(value)) {\n    exports.doAssertFailure_(\n      'Expected array but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Array<?>} */ (value);\n};\n\n\n/**\n * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {boolean} The value, guaranteed to be a boolean when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a boolean.\n */\nexports.assertBoolean = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isBoolean(value)) {\n    exports.doAssertFailure_(\n      'Expected boolean but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {boolean} */ (value);\n};\n\n\n/**\n * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Element} The value, likely to be a DOM Element when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not an Element.\n */\nexports.assertElement = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS &&\n      (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {\n    exports.doAssertFailure_(\n      'Expected Element but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Element} */ (value);\n};\n\n\n/**\n * Checks if the value is an instance of the user-defined type if\n * goog.asserts.ENABLE_ASSERTS is true.\n *\n * The compiler may tighten the type returned by this function.\n *\n * @param {?} value The value to check.\n * @param {function(new: T, ...)} type A user-defined constructor.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} When the value is not an instance of\n *     type.\n * @return {T}\n * @template T\n */\nexports.assertInstanceof = function(value, type, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !(value instanceof type)) {\n    exports.doAssertFailure_(\n      'Expected instanceof %s but got %s.',\n      [exports.getType_(type), exports.getType_(value)],\n      opt_message, Array.prototype.slice.call(arguments, 3));\n  }\n  return value;\n};\n\n\n/**\n * Checks that no enumerable keys are present in Object.prototype. Such keys\n * would break most code that use {@code for (var ... in ...)} loops.\n */\nexports.assertObjectPrototypeIsIntact = function() {\n  for (const key in Object.prototype) {\n    exports.fail(`${key} should not be enumerable in Object.prototype.`);\n  }\n};\n\n\n/**\n * Returns the type of a value. If a constructor is passed, and a suitable\n * string cannot be found, 'unknown type name' will be returned.\n * @param {*} value A constructor, object, or primitive.\n * @return {string} The best display name for the value, or 'unknown type name'.\n * @private\n */\nexports.getType_ = function(value) {\n  if (value instanceof Function) {\n    return value.displayName || value.name || 'unknown type name';\n  } else if (value instanceof Object) {\n    return value.constructor.displayName || value.constructor.name ||\n        Object.prototype.toString.call(value);\n  } else {\n    return value === null ? 'null' : typeof value;\n  }\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/goog.asserts.js","/**\n * @module app.modal\n*/\nconst exports = {};\n\nimport './modal.css';\nimport './common_dependencies.js';\n/** @suppress {extraRequire} */\nimport ngeoMessageModalComponent from 'ngeo/message/modalComponent.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('app', [\n  ngeo.module.name,\n  ngeoMessageModalComponent.name,\n]);\n\n\n/**\n * @constructor\n *//* @ngInject\n */\nexports.MainController = function() {\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.modalShown = false;\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/modal.js","/**\n * @module ngeo.message.modalComponent\n*/\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\n\n/**\n * @type {angular.Module}\n */\nconst exports = angular.module('ngeoModal', []);\n\nngeoBase.module.requires.push(exports.name);\n\n/**\n * Provides the \"ngeoModal\" component.\n *\n * This component shows a Bootstrap modal when the `ngModel` expression\n * evaluates to `true`, and it hides it when the `ngModel` expression\n * evaluates to `false`.\n *\n * The components also changes the `ngModel` value when the user manually\n * closes the modal.\n *\n * This component is based on Bootstrap's `modal` classes and associated\n * jQuery plugin.\n *\n *     <ngeo-modal ng-model=\"modalShown\">\n *       <div class=\"modal-header\">\n *         <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\n *                 aria-hidden=\"true\">&times;</button>\n *         <h4 class=\"modal-title\">The Title</h4>\n *       </div>\n *       <div class=\"modal-body\">Some content</div>\n *     </ngeo-modal>\n *\n * Note: for z-indexing purpose, the modal DOM element is automatically moved\n * to document body element.\n *\n * See our live example: [../examples/modal.html](../examples/modal.html)\n *\n * @htmlAttribute {boolean} ngeo-modal-resizable Whether the modal can be\n *     resized or not. Defaults to `false`.\n * @ngdoc component\n * @ngname ngeoModal\n * @type {!angular.Component}\n */\nexports.component_ = {\n  template: `<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\">\n        <ng-transclude></ng-transclude>\n      </div>\n    </div>\n  </div>`,\n  require: {\n    'ngModel': 'ngModel'\n  },\n  transclude: true,\n  controller: 'ngeoModalController',\n  bindings: {\n    'resizable': '<ngeoModalResizable'\n  }\n};\n\nexports.component('ngeoModal', exports.component_);\n\nexports.Controller_ = class {\n  /**\n   *//* @ngInject\n   * @param {!angular.Scope} $scope Scope.\n   * @param {!jQuery} $element Element.\n   */\n  constructor($scope, $element) {\n    /**\n     * @private\n     * @type {!jQuery}\n     */\n    this.$element_ = $element;\n\n    /**\n     * @private\n     * @type {!angular.Scope}\n     */\n    this.$scope_ = $scope;\n\n    /**\n     * @private\n     * @type {jQuery}\n     */\n    this.modal_;\n\n    /**\n     * @export\n     * @type {boolean}\n     */\n    this.resizable;\n\n    /**\n     * @export\n     * @type {angular.NgModelController|null}\n     */\n    this.ngModel;\n  }\n\n  $onInit() {\n    this.modal_ = this.$element_.children();\n\n    this.resizable = !!this.resizable;\n\n    const dialog = this.modal_.find('.modal-dialog');\n    dialog.draggable();\n    if (this.resizable) {\n      dialog.resizable();\n    }\n\n    this.ngModel.$render = () => {\n      this.modal_.modal(this.ngModel.$viewValue ? 'show' : 'hide');\n    };\n\n    this.modal_.on('shown.bs.modal hidden.bs.modal', (e) => {\n      const type = e.type;\n      googAsserts.assert(type == 'shown' || type == 'hidden');\n      this.$scope_.$apply(() => {\n        this.ngModel.$setViewValue(type == 'shown');\n      });\n    });\n  }\n\n  $onDestroy() {\n    const dialog = this.modal_.find('.modal-dialog');\n    dialog.draggable('destroy');\n    if (this.resizable) {\n      dialog.resizable('destroy');\n    }\n  }\n};\n\nexports.controller('ngeoModalController', exports.Controller_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/modalComponent.js"],"sourceRoot":""}