{"version":3,"sources":["webpack:///./src/misc/Time.js","webpack:///./src/goog.asserts.js","webpack:///./examples/datepicker.js","webpack:///./src/misc/datepickerComponent.js"],"names":["_index","__webpack_require__","exports","prototype","getOptions","time","minDate","Date","minValue","maxDate","maxValue","minDefaultDate","minDefValue","maxDefaultDate","maxDefValue","defaultValues","mode","getTime","values","getUTCDate","localDate","getUTCFullYear","getUTCMonth","module","angular","service","_index2","default","requires","push","name","defaultMessage","defaultArgs","givenMessage","givenArgs","message","args","e","AssertionError","errorHandler_","errorHandler","ENABLE_ASSERTS","condition","opt_message","var_args","doAssertFailure_","Array","slice","call","arguments","value","goog","isNumber","typeOf","isString","isFunction","isObject","isArray","isBoolean","nodeType","dom","NodeType","ELEMENT","type","getType_","key","Object","fail","Function","displayName","constructor","toString","_typeof","app","ngeo","_datepickerComponent2","_Time2","MainController","ngeoTime","this","ngeoTime_","timeRangeMode","widget","interval","timeValueMode","rangeValue","onDateSelected","date","onDateRangeSelected","controller","element","attrs","templateUrl","undefined","baseModuleTemplateUrl","component_","ngeoDatePickerTemplateUrl","$timeout","scope","bindToController","restrict","link","ctrl","init","lang","gettextCatalog_","getCurrentLanguage","$","sdateOptions","extend","onClose","selectedDate","find","datepicker","edateOptions","on","dp","css","stopPropagation","directive","Controller_","$scope","$injector","gettextCatalog","_this","isModeRange","initialMinDate","initialMaxDate","changeMonth","changeYear","sdate","edate","$watchGroup","newDates","oldDates","sDate","eDate","isDate","start","end","initialOptions_","_asserts2","assertArray","assertNumber"],"mappings":"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","file":"datepicker.min.js","sourcesContent":["/**\n * @module ngeo.misc.Time\n*/\nimport ngeoBase from 'ngeo/index.js';\n\n/**\n * ngeo - Time service\n * @constructor\n * @struct\n *//* @ngInject\n * @ngdoc service\n * @ngname ngeoTime\n */\nconst exports = function() {};\n\n\n/**\n * Get options regarding the time property of a node;\n *\n * @param {ngeox.TimeProperty} time the time property of a node\n * @return {{\n *  minDate : number,\n *  maxDate : number,\n *  values : (Array<number>|number)\n * }} - Configuration for the UI components\n * @export\n */\nexports.prototype.getOptions = function(time) {\n\n  const minDate = new Date(time.minValue);\n  const maxDate = new Date(time.maxValue);\n\n  const minDefaultDate = (time.minDefValue) ?\n    new Date(time.minDefValue) : minDate;\n  const maxDefaultDate = (time.maxDefValue) ?\n    new Date(time.maxDefValue) : maxDate;\n\n  const defaultValues = (time.mode === 'range') ?\n    [minDefaultDate.getTime(), maxDefaultDate.getTime()] :\n    minDefaultDate.getTime();\n\n  return {\n    minDate: minDate.getTime(),\n    maxDate: maxDate.getTime(),\n    values: defaultValues\n  };\n};\n\n\n/**\n * Time.prototype.getUTCDate - Get UTC date from a local date object\n *\n * @param  {Object} localDate loacl date object in\n * @return {Object} UTC date\n * @export\n */\nexports.prototype.getUTCDate = function(localDate) {\n  return new Date(\n    localDate.getUTCFullYear(),\n    localDate.getUTCMonth(),\n    localDate.getUTCDate());\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('ngeoTime', []);\nexports.module.service('ngeoTime', exports);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc/Time.js","/* eslint valid-jsdoc: 0, prefer-rest-params: 0,  */\n// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Utilities to check the preconditions, postconditions and\n * invariants runtime.\n *\n * Methods in this package should be given special treatment by the compiler\n * for type-inference. For example, <code>goog.asserts.assert(foo)</code>\n * will restrict <code>foo</code> to a truthy value.\n *\n * The compiler has an option to disable asserts. So code like:\n * <code>\n * var x = goog.asserts.assert(foo()); goog.asserts.assert(bar());\n * </code>\n * will be transformed into:\n * <code>\n * var x = foo();\n * </code>\n * The compiler will leave in foo() (because its return value is used),\n * but it will remove bar() because it assumes it does not have side-effects.\n *\n * @author agrieve@google.com (Andrew Grieve)\n */\n\nconst exports = {};\n\n/**\n * Throws an exception with the given message and \"Assertion failed\" prefixed\n * onto it.\n * @param {string} defaultMessage The message to use if givenMessage is empty.\n * @param {Array<*>} defaultArgs The substitution arguments for defaultMessage.\n * @param {string|undefined} givenMessage Message supplied by the caller.\n * @param {Array<*>} givenArgs The substitution arguments for givenMessage.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n * @private\n */\nexports.doAssertFailure_ = function(\n  defaultMessage, defaultArgs, givenMessage, givenArgs) {\n  let message = 'Assertion failed';\n  let args;\n  if (givenMessage) {\n    message += `: ${givenMessage}`;\n    args = givenArgs;\n  } else if (defaultMessage) {\n    message += `: ${defaultMessage}`;\n    args = defaultArgs;\n  }\n  // The '' + works around an Opera 10 bug in the unit tests. Without it,\n  // a stack trace is added to var message above. With this, a stack trace is\n  // not added until this line (it causes the extra garbage to be added after\n  // the assertion message instead of in the middle of it).\n  const e = new exports.AssertionError(`${message}`, args || []);\n  exports.errorHandler_(e);\n};\n\n\n/**\n * Sets a custom error handler that can be used to customize the behavior of\n * assertion failures, for example by turning all assertion failures into log\n * messages.\n * @param {function(!goog.asserts.AssertionError)} errorHandler\n */\nexports.setErrorHandler = function(errorHandler) {\n  if (exports.ENABLE_ASSERTS) {\n    exports.errorHandler_ = errorHandler;\n  }\n};\n\n\n/**\n * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS is\n * true.\n * @template T\n * @param {T} condition The condition to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {T} The value of the condition.\n * @throws {goog.asserts.AssertionError} When the condition evaluates to false.\n */\nexports.assert = function(condition, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !condition) {\n    exports.doAssertFailure_(\n      '', null, opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return condition;\n};\n\n\n/**\n * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case\n * when we want to add a check in the unreachable area like switch-case\n * statement:\n *\n * <pre>\n *  switch(type) {\n *    case FOO: doSomething(); break;\n *    case BAR: doSomethingElse(); break;\n *    default: goog.asserts.fail('Unrecognized type: ' + type);\n *      // We have only 2 types - \"default:\" section is unreachable code.\n *  }\n * </pre>\n *\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} Failure.\n */\nexports.fail = function(opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS) {\n    exports.errorHandler_(\n      new exports.AssertionError(\n        `Failure${opt_message ? `: ${opt_message}` : ''}`,\n        Array.prototype.slice.call(arguments, 1)));\n  }\n};\n\n\n/**\n * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {number} The value, guaranteed to be a number when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n */\nexports.assertNumber = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isNumber(value)) {\n    exports.doAssertFailure_(\n      'Expected number but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {number} */ (value);\n};\n\n\n/**\n * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {string} The value, guaranteed to be a string when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a string.\n */\nexports.assertString = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isString(value)) {\n    exports.doAssertFailure_(\n      'Expected string but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {string} */ (value);\n};\n\n\n/**\n * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Function} The value, guaranteed to be a function when asserts\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a function.\n */\nexports.assertFunction = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isFunction(value)) {\n    exports.doAssertFailure_(\n      'Expected function but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Function} */ (value);\n};\n\n\n/**\n * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Object} The value, guaranteed to be a non-null object.\n * @throws {goog.asserts.AssertionError} When the value is not an object.\n */\nexports.assertObject = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isObject(value)) {\n    exports.doAssertFailure_(\n      'Expected object but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Object} */ (value);\n};\n\n\n/**\n * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Array<?>} The value, guaranteed to be a non-null array.\n * @throws {goog.asserts.AssertionError} When the value is not an array.\n */\nexports.assertArray = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isArray(value)) {\n    exports.doAssertFailure_(\n      'Expected array but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Array<?>} */ (value);\n};\n\n\n/**\n * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {boolean} The value, guaranteed to be a boolean when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a boolean.\n */\nexports.assertBoolean = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isBoolean(value)) {\n    exports.doAssertFailure_(\n      'Expected boolean but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {boolean} */ (value);\n};\n\n\n/**\n * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Element} The value, likely to be a DOM Element when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not an Element.\n */\nexports.assertElement = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS &&\n      (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {\n    exports.doAssertFailure_(\n      'Expected Element but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Element} */ (value);\n};\n\n\n/**\n * Checks if the value is an instance of the user-defined type if\n * goog.asserts.ENABLE_ASSERTS is true.\n *\n * The compiler may tighten the type returned by this function.\n *\n * @param {?} value The value to check.\n * @param {function(new: T, ...)} type A user-defined constructor.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} When the value is not an instance of\n *     type.\n * @return {T}\n * @template T\n */\nexports.assertInstanceof = function(value, type, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !(value instanceof type)) {\n    exports.doAssertFailure_(\n      'Expected instanceof %s but got %s.',\n      [exports.getType_(type), exports.getType_(value)],\n      opt_message, Array.prototype.slice.call(arguments, 3));\n  }\n  return value;\n};\n\n\n/**\n * Checks that no enumerable keys are present in Object.prototype. Such keys\n * would break most code that use {@code for (var ... in ...)} loops.\n */\nexports.assertObjectPrototypeIsIntact = function() {\n  for (const key in Object.prototype) {\n    exports.fail(`${key} should not be enumerable in Object.prototype.`);\n  }\n};\n\n\n/**\n * Returns the type of a value. If a constructor is passed, and a suitable\n * string cannot be found, 'unknown type name' will be returned.\n * @param {*} value A constructor, object, or primitive.\n * @return {string} The best display name for the value, or 'unknown type name'.\n * @private\n */\nexports.getType_ = function(value) {\n  if (value instanceof Function) {\n    return value.displayName || value.name || 'unknown type name';\n  } else if (value instanceof Object) {\n    return value.constructor.displayName || value.constructor.name ||\n        Object.prototype.toString.call(value);\n  } else {\n    return value === null ? 'null' : typeof value;\n  }\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/goog.asserts.js","/**\n * @module app.datepicker\n*/\nconst exports = {};\n\nimport './datepicker.css';\nimport './common_dependencies.js';\n/** @suppress {extraRequire} */\nimport ngeoMiscDatepickerComponent from 'ngeo/misc/datepickerComponent.js';\n\nimport ngeoMiscTime from 'ngeo/misc/Time.js';\n\n\n/** @type {!angular.Module} **/\napp.module = angular.module('app', [\n  ngeo.module.name,\n  ngeoMiscDatepickerComponent.name,\n  ngeoMiscTime.module.name,\n]);\n\n\n/**\n * @constructor\n * @param {!ngeo.misc.Time} ngeoTime time service.\n *//* @ngInject\n */\napp.MainController = function(ngeoTime) {\n\n  /**\n   * @type {ngeo.misc.Time}\n   * @private\n   */\n  this.ngeoTime_ = ngeoTime;\n\n  /**\n   * @type {ngeox.TimeProperty}\n   * @export\n   */\n  this.timeRangeMode = {\n    widget: /** @type {ngeox.TimePropertyWidgetEnum} */ ('datepicker'),\n    maxValue: '2013-12-31T00:00:00Z',\n    minValue: '2006-01-01T00:00:00Z',\n    maxDefValue: null,\n    minDefValue: null,\n    mode: /** @type {ngeox.TimePropertyModeEnum} */ ('range'),\n    interval: [0, 1, 0, 0]\n  };\n\n  /**\n   * @type {ngeox.TimeProperty}\n   * @export\n   */\n  this.timeValueMode = {\n    widget: /** @type {ngeox.TimePropertyWidgetEnum} */ ('datepicker'),\n    maxValue: '2015-12-31T00:00:00Z',\n    minValue: '2014-01-01T00:00:00Z',\n    maxDefValue: null,\n    minDefValue: null,\n    mode: /** @type {ngeox.TimePropertyModeEnum} */ ('value'),\n    interval: [0, 1, 0, 0]\n  };\n\n  /**\n   * @type {string}\n   * @export\n   */\n  this.value;\n\n  /**\n   * @type {string}\n   * @export\n   */\n  this.rangeValue;\n\n  this.onDateSelected = function(date) {\n    this.value = date;\n  };\n\n  this.onDateRangeSelected = function(date) {\n    this.rangeValue = date;\n  };\n\n};\n\n\napp.module.controller('MainController', app.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/datepicker.js","/**\n * @module ngeo.misc.datepickerComponent\n*/\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoMiscTime from 'ngeo/misc/Time.js';\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('ngeoDatePicker', [\n  ngeoMiscTime.module.name,\n]);\n\nngeoBase.module.requires.push(exports.name);\n\n\nexports.value('ngeoDatePickerTemplateUrl',\n  /**\n     * @param {angular.JQLite} element Element.\n     * @param {angular.Attributes} attrs Attributes.\n     * @return {string} Template URL.\n     */\n  (element, attrs) => {\n    const templateUrl = attrs['ngeoDatePickerTemplateUrl'];\n    return templateUrl !== undefined ? templateUrl :\n      `${ngeoBase.baseModuleTemplateUrl}/misc/datepickerComponent.html`;\n  });\n\n\n/**\n * Provide a directive to select a signle date or a range of dates. Requires\n * jQuery UI for the 'datepicker' widget.\n *\n * @param {string|function(!angular.JQLite=, !angular.Attributes=)}\n * ngeoDatePickerTemplateUrl Template for the directive.\n * @param  {angular.$timeout} $timeout angular timeout service\n * @return {angular.Directive} The directive specs.\n *//* @ngInject\n * @ngdoc directive\n * @ngname ngeoDatePicker\n */\nexports.component_ = function(ngeoDatePickerTemplateUrl,  $timeout) {\n  return {\n    scope: {\n      onDateSelected: '&',\n      time: '='\n    },\n    bindToController: true,\n    controller: 'ngeoDatePickerController as datepickerCtrl',\n    restrict: 'AE',\n    templateUrl: ngeoDatePickerTemplateUrl,\n    link: (scope, element, attrs, ctrl) => {\n      ctrl.init();\n\n      const lang =  ctrl.gettextCatalog_.getCurrentLanguage();\n      $['datepicker']['setDefaults']($['datepicker']['regional'][lang]);\n\n      ctrl.sdateOptions = angular.extend({}, ctrl.sdateOptions, {\n        'onClose': (selectedDate) => {\n          if (selectedDate) {\n            $(element[0]).find('input[name=\"edate\"]').datepicker('option', 'minDate', selectedDate);\n          }\n        }\n      });\n\n      ctrl.edateOptions = angular.extend({}, ctrl.edateOptions, {\n        'onClose': (selectedDate) => {\n          if (selectedDate) {\n            $(element[0]).find('input[name=\"sdate\"]').datepicker('option', 'maxDate', selectedDate);\n          }\n        }\n      });\n\n      angular.element('body').on('hidden.bs.popover', () => {\n        const dp = angular.element('#ui-datepicker-div');\n        if (dp && dp.css('display') === 'block') {\n          $(element[0]).find('input[name$=\"date\"]').datepicker('hide');\n        }\n      });\n\n      $timeout(() => {\n        angular.element('#ui-datepicker-div').on('mousedown', (e) => {\n          e.stopPropagation();\n        });\n      });\n    }\n  };\n};\n\nexports.directive('ngeoDatePicker', exports.component_);\n\n\n/**\n * DatePickerController - directive conttroller\n * @param {!angular.Scope} $scope Angular scope.\n * @param {!angular.$injector} $injector injector.\n * @param {!ngeo.misc.Time} ngeoTime time service.\n * @param {!angularGettext.Catalog} gettextCatalog service.\n * @constructor\n * @private\n * @struct\n *//* @ngInject\n * @ngdoc controller\n * @ngname ngeoDatePickerController\n */\nexports.Controller_ = function($scope, $injector,\n  ngeoTime, gettextCatalog) {\n\n  /**\n   * @type {!ngeo.misc.Time}\n   * @private\n   */\n  this.ngeoTime_ = ngeoTime;\n\n  /**\n   * @type {!ngeox.TimeProperty}\n   * @export\n   */\n  this.time;\n\n  /**\n   * The gettext catalog\n   * @type {!angularGettext.Catalog}\n   * @private\n   */\n  this.gettextCatalog_ = gettextCatalog;\n\n\n  /**\n   * If the component is used to select a date range\n   * @type {boolean}\n   * @export\n   */\n  this.isModeRange;\n\n\n  /**\n   * Function called after date(s) changed/selected\n   * @type {function({time: {start: number, end: number}})}\n   * @export\n   */\n  this.onDateSelected;\n\n\n  /**\n   * Initial min date for the datepicker\n   * @type {!Date}\n   */\n  this.initialMinDate;\n\n  /**\n   * Initial max date for the datepickeronDateSelected\n   * @type {!Date}\n   */\n  this.initialMaxDate;\n\n  /**\n   * Datepicker options for the second datepicker (only for range mode)\n   * @type {Object}\n   * @export\n   */\n  this.edateOptions = {\n    'minDate': this.initialMinDate,\n    'maxDate': this.initialMaxDate,\n    'changeMonth': true,\n    'changeYear': true\n  };\n\n  /**\n   * Datepicker options for the first datepicker\n   * @type {Object}\n   * @export\n   */\n  this.sdateOptions = {\n    'minDate': this.initialMinDate,\n    'maxDate': this.initialMaxDate,\n    'changeMonth': true,\n    'changeYear': true\n  };\n\n  /**\n   * Start date model for the first date picker\n   * @type {Date}\n   * @export\n   */\n  this.sdate;\n\n  /**\n   * End date model for the second datepicker (only for range mode)\n   * @type {Date}\n   * @export\n   */\n  this.edate;\n\n  $scope.$watchGroup(['datepickerCtrl.sdate', 'datepickerCtrl.edate'], (newDates, oldDates) => {\n    const sDate = newDates[0];\n    const eDate = newDates[1];\n\n    if (angular.isDate(sDate) && (!this.isModeRange || angular.isDate(eDate))) {\n      this.onDateSelected({\n        time: {\n          start: sDate.getTime(),\n          end: eDate ? eDate.getTime() : null\n        }\n      });\n    }\n  });\n};\n\n/**\n * Initialise the controller.\n */\nexports.Controller_.prototype.init = function() {\n  //fetch the initial options for the component\n  const initialOptions_ = this.ngeoTime_.getOptions(this.time);\n  this.initialMinDate = new Date(initialOptions_.minDate);\n  this.initialMaxDate = new Date(initialOptions_.maxDate);\n  this.isModeRange = this.time.mode === 'range';\n\n  if (this.isModeRange) {\n    googAsserts.assertArray(initialOptions_.values);\n    this.sdate = new Date(initialOptions_.values[0]);\n    this.edate = new Date(initialOptions_.values[1]);\n  } else {\n    googAsserts.assertNumber(initialOptions_.values);\n    this.sdate = new Date(initialOptions_.values);\n  }\n};\n\nexports.controller('ngeoDatePickerController',\n  exports.Controller_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc/datepickerComponent.js"],"sourceRoot":""}