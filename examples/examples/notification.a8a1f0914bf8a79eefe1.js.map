{"version":3,"sources":["webpack:///./src/message/Message.js","webpack:///./src/message/Notification.js","webpack:///./src/goog.asserts.js","webpack:///./examples/notification.js"],"names":["exports","prototype","showMessage","message","show","object","this","getMessageObjects","forEach","error","Type","ERROR","info","INFORMATION","success","SUCCESS","warn","WARNING","opt_type","msgObjects","msgObject","defaultType","push","msg","type","undefined","Array","isArray","__webpack_require__","olBase","$timeout","_Message2","default","call","timeout_","container","angular","element","document","body","append","container_","cache_","inherits","DEFAULT_DELAY_","notify","clear","uid","clearMessageByCacheItem_","parseInt","_this","_asserts2","assertString","classNames","el","join","target","html","addClass","delay","item","getUid","promise","alert","cancel","module","service","_index2","requires","name","defaultMessage","defaultArgs","givenMessage","givenArgs","args","e","AssertionError","errorHandler_","errorHandler","ENABLE_ASSERTS","condition","opt_message","var_args","doAssertFailure_","slice","arguments","value","goog","isNumber","typeOf","isString","isFunction","isObject","isBoolean","nodeType","dom","NodeType","ELEMENT","getType_","key","Object","fail","Function","displayName","constructor","toString","_typeof","ngeo","_Notification2","MainController","ngeoNotification","notification","i_","$","tooltip","trigger","notifyMulti","notifyTarget","notifyQuick","controller"],"mappings":"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","file":"notification.a8a1f0914bf8a79eefe1.js","sourcesContent":["/**\n * @module ngeo.message.Message\n*/\n/**\n * Abstract class for services that display messages.\n *\n * @constructor\n * @struct\n * @abstract\n */\nconst exports = function() {};\n\n\n/**\n * Show the message.\n *\n * @abstract\n * @param {ngeox.Message} message Message.\n * @protected\n */\nexports.prototype.showMessage = function(message) {};\n\n\n/**\n * Show disclaimer message string or object or list of disclame message\n * strings or objects.\n *\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @export\n */\nexports.prototype.show = function(object) {\n  const msgObjects = this.getMessageObjects(object);\n  msgObjects.forEach(this.showMessage, this);\n};\n\n\n/**\n * Display the given error message or list of error messages.\n *\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.error = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.ERROR));\n};\n\n\n/**\n * Display the given info message or list of info messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.info = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.INFORMATION));\n};\n\n\n/**\n * Display the given success message or list of success messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.success = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.SUCCESS));\n};\n\n\n/**\n * Display the given warning message or list of warning messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.warn = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.WARNING));\n};\n\n\n/**\n * Returns an array of message object from any given message string, list of\n * message strings, message object or list message objects. The type can be\n * overridden here as well OR defined (if the message(s) is/are string(s),\n * defaults to 'information').\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @param {string=} opt_type The type of message to override the messages with.\n * @return {Array.<ngeox.Message>} List of message objects.\n * @protected\n */\nexports.prototype.getMessageObjects = function(object, opt_type) {\n  const msgObjects = [];\n  let msgObject = null;\n  const defaultType = exports.Type.INFORMATION;\n\n  if (typeof object === 'string') {\n    msgObjects.push({\n      msg: object,\n      type: opt_type !== undefined ? opt_type : defaultType\n    });\n  } else if (Array.isArray(object)) {\n    object.forEach((msg) => {\n      if (typeof object === 'string') {\n        msgObject = {\n          msg: msg,\n          type: opt_type !== undefined ? opt_type : defaultType\n        };\n      } else {\n        msgObject = msg;\n        if (opt_type !== undefined) {\n          msgObject.type = opt_type;\n        }\n      }\n      msgObjects.push(msgObject);\n    }, this);\n  } else {\n    msgObject = object;\n    if (opt_type !== undefined) {\n      msgObject.type = opt_type;\n    }\n    if (msgObject.type === undefined) {\n      msgObject.type = defaultType;\n    }\n    msgObjects.push(msgObject);\n  }\n\n  return msgObjects;\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nexports.Type = {\n  /**\n   * @type {string}\n   * @export\n   */\n  ERROR: 'error',\n  /**\n   * @type {string}\n   * @export\n   */\n  INFORMATION: 'information',\n  /**\n   * @type {string}\n   * @export\n   */\n  SUCCESS: 'success',\n  /**\n   * @type {string}\n   * @export\n   */\n  WARNING: 'warning'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/Message.js","/**\n * @module ngeo.message.Notification\n*/\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoMessageMessage from 'ngeo/message/Message.js';\nimport * as olBase from 'ol/index.js';\n\n/**\n * Provides methods to display any sort of messages, notifications, errors,\n * etc. Requires Bootstrap library (both CSS and JS) to display the alerts\n * properly.\n *\n * @constructor\n * @struct\n * @extends {ngeo.message.Message}\n * @param {angular.$timeout} $timeout Angular timeout service.\n * @ngdoc service\n * @ngname ngeoNotification\n * @abstract\n *//* @ngInject\n */\nconst exports = function($timeout) {\n\n  ngeoMessageMessage.call(this);\n\n  /**\n   * @type {angular.$timeout}\n   * @private\n   */\n  this.timeout_ = $timeout;\n\n  const container = angular.element('<div class=\"ngeo-notification\"></div>');\n  angular.element(document.body).append(container);\n\n  /**\n   * @type {angular.JQLite}\n   * @private\n   */\n  this.container_ = container;\n\n  /**\n   * @type {Object.<number, ngeo.message.Notification.CacheItem>}\n   * @private\n   */\n  this.cache_ = {};\n\n};\n\nolBase.inherits(exports, ngeoMessageMessage);\n\n\n/**\n * Default delay (in milliseconds) a message should be displayed.\n * @type {number}\n * @private\n */\nexports.DEFAULT_DELAY_ = 7000;\n\n\n// MAIN API METHODS\n\n\n/**\n * Display the given message string or object or list of message strings or\n * objects.\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @export\n */\nexports.prototype.notify = function(object) {\n  this.show(object);\n};\n\n\n/**\n * Clears all messages that are currently being shown.\n * @export\n */\nexports.prototype.clear = function() {\n  for (const uid in this.cache_) {\n    this.clearMessageByCacheItem_(this.cache_[parseInt(uid, 10)]);\n  }\n};\n\n\n/**\n * @override\n */\nexports.prototype.showMessage = function(message) {\n  const type = message.type;\n  googAsserts.assertString(type, 'Type should be set.');\n\n  const classNames = ['alert', 'fade'];\n  switch (type) {\n    case ngeoMessageMessage.Type.ERROR:\n      classNames.push('alert-danger');\n      break;\n    case ngeoMessageMessage.Type.INFORMATION:\n      classNames.push('alert-info');\n      break;\n    case ngeoMessageMessage.Type.SUCCESS:\n      classNames.push('alert-success');\n      break;\n    case ngeoMessageMessage.Type.WARNING:\n      classNames.push('alert-warning');\n      break;\n    default:\n      break;\n  }\n\n  const el = angular.element(`<div class=\"${classNames.join(' ')}\"></div>`);\n  let container;\n\n  if (message.target) {\n    container = angular.element(message.target);\n  } else {\n    container = this.container_;\n  }\n\n  container.append(el);\n  el.html(message.msg).addClass('in');\n\n  const delay = message.delay !== undefined ? message.delay :\n    exports.DEFAULT_DELAY_;\n\n  const item = /** @type {ngeo.message.Notification.CacheItem} */ ({\n    el\n  });\n\n  // Keep a reference to the promise, in case we want to manually cancel it\n  // before the delay\n  const uid = olBase.getUid(el);\n  item.promise = this.timeout_(() => {\n    el.alert('close');\n    delete this.cache_[uid];\n  }, delay);\n\n  this.cache_[uid] = item;\n};\n\n\n/**\n * Clear a message using its cache item.\n * @param {ngeo.message.Notification.CacheItem} item Cache item.\n * @private\n */\nexports.prototype.clearMessageByCacheItem_ = function(item) {\n  const el = item.el;\n  const promise = item.promise;\n  const uid = olBase.getUid(el);\n\n  // Close the message\n  el.alert('close');\n\n  // Cancel timeout in case we want to stop before delay. If called by the\n  // timeout itself, then this has no consequence.\n  this.timeout_.cancel(promise);\n\n  // Delete the cache item\n  delete this.cache_[uid];\n};\n\n\n/**\n * @typedef {{\n *     el: angular.JQLite,\n *     promise: angular.$q.Promise\n * }}\n */\nexports.CacheItem;\n\n\n/**\n * @type {angular.Module}\n */\nexports.module = angular.module('ngeoNotification', [\n]);\n\nexports.module.service('ngeoNotification', exports);\n\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/Notification.js","/* eslint valid-jsdoc: 0, prefer-rest-params: 0,  */\n// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Utilities to check the preconditions, postconditions and\n * invariants runtime.\n *\n * Methods in this package should be given special treatment by the compiler\n * for type-inference. For example, <code>goog.asserts.assert(foo)</code>\n * will restrict <code>foo</code> to a truthy value.\n *\n * The compiler has an option to disable asserts. So code like:\n * <code>\n * var x = goog.asserts.assert(foo()); goog.asserts.assert(bar());\n * </code>\n * will be transformed into:\n * <code>\n * var x = foo();\n * </code>\n * The compiler will leave in foo() (because its return value is used),\n * but it will remove bar() because it assumes it does not have side-effects.\n *\n * @author agrieve@google.com (Andrew Grieve)\n */\n\nconst exports = {};\n\n/**\n * Throws an exception with the given message and \"Assertion failed\" prefixed\n * onto it.\n * @param {string} defaultMessage The message to use if givenMessage is empty.\n * @param {Array<*>} defaultArgs The substitution arguments for defaultMessage.\n * @param {string|undefined} givenMessage Message supplied by the caller.\n * @param {Array<*>} givenArgs The substitution arguments for givenMessage.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n * @private\n */\nexports.doAssertFailure_ = function(\n  defaultMessage, defaultArgs, givenMessage, givenArgs) {\n  let message = 'Assertion failed';\n  let args;\n  if (givenMessage) {\n    message += `: ${givenMessage}`;\n    args = givenArgs;\n  } else if (defaultMessage) {\n    message += `: ${defaultMessage}`;\n    args = defaultArgs;\n  }\n  // The '' + works around an Opera 10 bug in the unit tests. Without it,\n  // a stack trace is added to var message above. With this, a stack trace is\n  // not added until this line (it causes the extra garbage to be added after\n  // the assertion message instead of in the middle of it).\n  const e = new exports.AssertionError(`${message}`, args || []);\n  exports.errorHandler_(e);\n};\n\n\n/**\n * Sets a custom error handler that can be used to customize the behavior of\n * assertion failures, for example by turning all assertion failures into log\n * messages.\n * @param {function(!goog.asserts.AssertionError)} errorHandler\n */\nexports.setErrorHandler = function(errorHandler) {\n  if (exports.ENABLE_ASSERTS) {\n    exports.errorHandler_ = errorHandler;\n  }\n};\n\n\n/**\n * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS is\n * true.\n * @template T\n * @param {T} condition The condition to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {T} The value of the condition.\n * @throws {goog.asserts.AssertionError} When the condition evaluates to false.\n */\nexports.assert = function(condition, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !condition) {\n    exports.doAssertFailure_(\n      '', null, opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return condition;\n};\n\n\n/**\n * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case\n * when we want to add a check in the unreachable area like switch-case\n * statement:\n *\n * <pre>\n *  switch(type) {\n *    case FOO: doSomething(); break;\n *    case BAR: doSomethingElse(); break;\n *    default: goog.asserts.fail('Unrecognized type: ' + type);\n *      // We have only 2 types - \"default:\" section is unreachable code.\n *  }\n * </pre>\n *\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} Failure.\n */\nexports.fail = function(opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS) {\n    exports.errorHandler_(\n      new exports.AssertionError(\n        `Failure${opt_message ? `: ${opt_message}` : ''}`,\n        Array.prototype.slice.call(arguments, 1)));\n  }\n};\n\n\n/**\n * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {number} The value, guaranteed to be a number when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n */\nexports.assertNumber = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isNumber(value)) {\n    exports.doAssertFailure_(\n      'Expected number but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {number} */ (value);\n};\n\n\n/**\n * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {string} The value, guaranteed to be a string when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a string.\n */\nexports.assertString = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isString(value)) {\n    exports.doAssertFailure_(\n      'Expected string but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {string} */ (value);\n};\n\n\n/**\n * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Function} The value, guaranteed to be a function when asserts\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a function.\n */\nexports.assertFunction = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isFunction(value)) {\n    exports.doAssertFailure_(\n      'Expected function but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Function} */ (value);\n};\n\n\n/**\n * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Object} The value, guaranteed to be a non-null object.\n * @throws {goog.asserts.AssertionError} When the value is not an object.\n */\nexports.assertObject = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isObject(value)) {\n    exports.doAssertFailure_(\n      'Expected object but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Object} */ (value);\n};\n\n\n/**\n * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Array<?>} The value, guaranteed to be a non-null array.\n * @throws {goog.asserts.AssertionError} When the value is not an array.\n */\nexports.assertArray = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isArray(value)) {\n    exports.doAssertFailure_(\n      'Expected array but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Array<?>} */ (value);\n};\n\n\n/**\n * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {boolean} The value, guaranteed to be a boolean when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a boolean.\n */\nexports.assertBoolean = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isBoolean(value)) {\n    exports.doAssertFailure_(\n      'Expected boolean but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {boolean} */ (value);\n};\n\n\n/**\n * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Element} The value, likely to be a DOM Element when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not an Element.\n */\nexports.assertElement = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS &&\n      (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {\n    exports.doAssertFailure_(\n      'Expected Element but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Element} */ (value);\n};\n\n\n/**\n * Checks if the value is an instance of the user-defined type if\n * goog.asserts.ENABLE_ASSERTS is true.\n *\n * The compiler may tighten the type returned by this function.\n *\n * @param {?} value The value to check.\n * @param {function(new: T, ...)} type A user-defined constructor.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} When the value is not an instance of\n *     type.\n * @return {T}\n * @template T\n */\nexports.assertInstanceof = function(value, type, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !(value instanceof type)) {\n    exports.doAssertFailure_(\n      'Expected instanceof %s but got %s.',\n      [exports.getType_(type), exports.getType_(value)],\n      opt_message, Array.prototype.slice.call(arguments, 3));\n  }\n  return value;\n};\n\n\n/**\n * Checks that no enumerable keys are present in Object.prototype. Such keys\n * would break most code that use {@code for (var ... in ...)} loops.\n */\nexports.assertObjectPrototypeIsIntact = function() {\n  for (const key in Object.prototype) {\n    exports.fail(`${key} should not be enumerable in Object.prototype.`);\n  }\n};\n\n\n/**\n * Returns the type of a value. If a constructor is passed, and a suitable\n * string cannot be found, 'unknown type name' will be returned.\n * @param {*} value A constructor, object, or primitive.\n * @return {string} The best display name for the value, or 'unknown type name'.\n * @private\n */\nexports.getType_ = function(value) {\n  if (value instanceof Function) {\n    return value.displayName || value.name || 'unknown type name';\n  } else if (value instanceof Object) {\n    return value.constructor.displayName || value.constructor.name ||\n        Object.prototype.toString.call(value);\n  } else {\n    return value === null ? 'null' : typeof value;\n  }\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/goog.asserts.js","/**\n * @module app.notification\n*/\nconst exports = {};\n\nimport './notification.css';\nimport './common_dependencies.js';\nimport ngeoMessageMessage from 'ngeo/message/Message.js';\n\nimport ngeoMessageNotification from 'ngeo/message/Notification.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('app', [\n  ngeo.module.name,\n  ngeoMessageNotification.module.name,\n]);\n\n\n/**\n * @param {ngeo.message.Notification} ngeoNotification Ngeo notification service.\n *//* @ngInject\n * @constructor\n */\nexports.MainController = function(ngeoNotification) {\n\n  /**\n   * @type {ngeo.message.Notification}\n   * @export\n   */\n  this.notification = ngeoNotification;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.i_ = 1;\n\n  // initialize tooltips\n  $('[data-toggle=\"tooltip\"]').tooltip({\n    container: 'body',\n    trigger: 'hover'\n  });\n\n};\n\n\n/**\n * Demonstrates how to display multiple messages at once with the notification\n * service.\n * @export\n */\nexports.MainController.prototype.notifyMulti = function() {\n  this.notification.notify([{\n    msg: ['Error #', this.i_++].join(''),\n    type: ngeoMessageMessage.Type.ERROR\n  }, {\n    msg: ['Warning #', this.i_++].join(''),\n    type: ngeoMessageMessage.Type.WARNING\n  }, {\n    msg: ['Information #', this.i_++].join(''),\n    type: ngeoMessageMessage.Type.INFORMATION\n  }, {\n    msg: ['Success #', this.i_++].join(''),\n    type: ngeoMessageMessage.Type.SUCCESS\n  }]);\n};\n\n\n/**\n * Demonstrates how to display a message in an other target than the original\n * one defined by the notification service.\n * @export\n */\nexports.MainController.prototype.notifyTarget = function() {\n  this.notification.notify({\n    msg: 'Error in an other target',\n    target: angular.element('#my-messages'),\n    type: ngeoMessageMessage.Type.ERROR\n  });\n};\n\n/**\n * Demonstrates how to display a message for a specific number of seconds.\n * @export\n */\nexports.MainController.prototype.notifyQuick = function() {\n  this.notification.notify({\n    delay: 1000,\n    msg: 'Lasts one second',\n    type: ngeoMessageMessage.Type.SUCCESS\n  });\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/notification.js"],"sourceRoot":""}