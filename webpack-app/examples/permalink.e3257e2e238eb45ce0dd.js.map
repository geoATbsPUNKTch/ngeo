{"version":3,"sources":["webpack:///./node_modules/openlayers/src/ol/source/OSM.js","webpack:///./examples/permalink.js","webpack:///./src/format/FeatureHash.js","webpack:///./src/format/FeatureHashStyleType.js","webpack:///./node_modules/openlayers/src/ol/format/TextFeature.js","webpack:///./node_modules/openlayers/src/ol/source/XYZ.js"],"names":["__WEBPACK_IMPORTED_MODULE_1__source_XYZ_js__","__webpack_require__","OSM","opt_options","options","attributions","undefined","ATTRIBUTION","crossOrigin","url","call","this","cacheSize","opaque","maxZoom","reprojectionErrorThreshold","tileLoadFunction","wrapX","Object","__WEBPACK_IMPORTED_MODULE_0__index_js__","__webpack_exports__","e","Error","code","exports","module","angular","_module2","default","name","_debounce2","_module4","mapComponent","controller","bindings","map","template","component","MapComponentController","ngeoLocation","ngeoDebounce","ngeoLocation_","ngeoDebounce_","prototype","$onInit","_this","view","getView","zoom","getParam","x","y","center","setCenter","setZoom","updateParams","z","Math","round","on","getCenter","params","getZoom","drawComponent","layer","DrawComponentController","$scope","scope_","featureSeq_","interaction","_this2","vectorSource","getSource","_Draw2","type","source","setActive","addInteraction","_decorate2","feature","set","fhFormat","_FeatureHash2","setStyle","_Style2","stroke","_Stroke2","color","width","features","getFeatures","encodedFeatures","writeFeatures","$applyAsync","readFeatures","length","addFeatures","clearLayer","clear","deleteParam","MainController","_Map2","layers","_Tile2","_OSM2","_Vector4","vectorLayer","_Vector2","setMap","olBase","olColor","olArray","olFormatFeature","_TextFeature2","accuracy_","accuracy","ACCURACY_","encodeStyles_","encodeStyles","propertiesFunction_","properties","defaultPropertiesFunction_","setStyle_","prevX_","prevY_","LegacyProperties_","propertiesType","inherits","StyleTypes_","LineString","_FeatureHashStyleType2","LINE_STRING","Point","POINT","Polygon","POLYGON","MultiLineString","MultiPoint","MultiPolygon","readFeature","readGeometry","writeFeature","writeGeometry","CHAR64_","getProperties","encodeSignedNumber_","num","signedNum","encodeNumber_","encodedNumber","charAt","styles","geometryType","encodedStyles","styleType","_asserts2","assert","i","style","fillStyle","getFill","imageStyle","getImage","strokeStyle","getStroke","textStyle","getText","encodeStylePolygon_","encodeStyleLine_","encodeStylePoint_","encodeStyleText_","encodeStyleStroke_","radius","getRadius","push","encodeURIComponent","encodeStyleFill_","opt_propertyName","propertyName","fillColor","getColor","Array","isArray","fillColorRgba","asArray","fillColorHex","_utils2","rgbArrayToHex","strokeColor","strokeColorRgba","strokeColorHex","strokeWidth","getWidth","fontStyle","getFont","font","split","readLineStringGeometry_","text","substring","flatCoordinates","decodeCoordinates_","lineString","_LineString2","setFlatCoordinates","_GeometryLayout2","XY","readMultiLineStringGeometry_","ends","lineStrings","ii","multiLineString","_MultiLineString2","readPointGeometry_","point","_Point2","readMultiPointGeometry_","multiPoint","_MultiPoint2","readPolygonGeometry_","rings","end","polygon","_Polygon2","readMultiPolygonGeometry_","endss","polygons","j","jj","multipolygon","_MultiPolygon2","setStyleInFeature_","getStyleProperties_","fontSize","fontColor","pointRadius","_Fill2","_Circle2","fill","_Text2","image","setStyleProperties_","geometry","getGeometry","_FeatureProperties2","IS_TEXT","parseFloat","indexOf","clone","key","value","setProperties","castValue_","numProperties","ANGLE","OPACITY","SIZE","STROKE","boolProperties","IS_CIRCLE","IS_RECTANGLE","SHOW_MEASURE","SHOW_LABEL","includes","parts","keyVal","decodeURIComponent","val","writeLineStringGeometry_","assertInstanceof","getFlatCoordinates","stride","getStride","encodeCoordinates_","writeMultiLineStringGeometry_","getEnds","lineStringCount","offset","textArray","join","writePointGeometry_","writeMultiPointGeometry_","encodeRings_","linearRingCount","writePolygonGeometry_","writeMultiPolygonGeometry_","getEndss","polygonCount","GEOMETRY_READERS_","P","L","A","l","p","a","GEOMETRY_WRITERS_","opt_flatCoordinates","len","index","b","shift","result","dx","dy","encodedCoordinates","floor","readFeatureFromText","splitIndex","geometryText","readGeometryFromText","_Feature2","attributesAndStylesText","attributesText","stylesText","readFeaturesFromText","geometryReader","writeFeatureText","encodedParts","encodedGeometry","writeGeometryText","encodedProperties","propFunction","getGeometryName","encoded","replace","toString","apply","styleFunction","getStyleFunction","getType","writeFeaturesText","geometryWriter","transformedGeometry","transformWithOptions","__WEBPACK_IMPORTED_MODULE_2__format_FormatType_js__","TextFeature","__WEBPACK_IMPORTED_MODULE_1__format_Feature_js__","TEXT","adaptOptions","readProjection","readProjectionFromText","defaultDataProjection","__WEBPACK_IMPORTED_MODULE_2__tilegrid_js__","XYZ","projection","tileGrid","createXYZ","extent","extentFromProjection","minZoom","tileSize","__WEBPACK_IMPORTED_MODULE_1__source_TileImage_js__","tilePixelRatio","tileUrlFunction","urls","transition"],"mappings":"6GAAAA,EAAAC,EAAA,GAeA,MAAAC,EAAA,SAAAC,GAEA,MAAAC,EAAAD,MAEA,IAAAE,EAEAA,OADAC,IAAAF,EAAAC,aACAD,EAAAC,cAEAH,EAAAK,aAGA,MAAAC,OAAAF,IAAAF,EAAAI,YACAJ,EAAAI,YAAA,YAEAC,OAAAH,IAAAF,EAAAK,IACAL,EAAAK,IAAA,uDAEAT,EAAA,EAAAU,KAAAC,MACAN,eACAO,UAAAR,EAAAQ,UACAJ,cACAK,YAAAP,IAAAF,EAAAS,QAAAT,EAAAS,OACAC,aAAAR,IAAAF,EAAAU,QAAAV,EAAAU,QAAA,GACAC,2BAAAX,EAAAW,2BACAC,iBAAAZ,EAAAY,iBACAP,MACAQ,MAAAb,EAAAa,SAKAC,OAAAC,EAAA,SAAAD,CAAAhB,EAAAF,EAAA,GAUAE,EAAAK,YAAA,2FAGAa,EAAA,0ICpDAnB,GAAA,eAAAoB,EAAA,IAAAC,MAAA,4CAAAD,EAAAE,KAAA,mBAAAF,EAAA,aAEApB,EAAA,UACAA,EAAA,SACAA,EAAA,UACAA,EAAA,SACAA,EAAA,UACAA,EAAA,SACAA,EAAA,OACAA,EAAA,UACAA,EAAA,SACAA,EAAA,SACAA,EAAA,QACAA,EAAA,SACAA,EAAA,SACAA,EAAA,wDAnBA,IAAIuB,KAuBJA,EAAQC,OAASC,QAAQD,OAAO,OAC9BE,EAAAC,QAAcC,KACdC,EAAAF,QAAiBC,KACjBE,EAAAH,QAAuBC,OAazBL,EAAQQ,cACNC,WAAY,2BACZC,UACEC,IAAO,WAETC,SAAU,iCAIZZ,EAAQC,OAAOY,UAAU,SAAUb,EAAQQ,cAS3CR,EAAQc,uBAAyB,SAASC,EAAcC,GAKtD7B,KAAKwB,IAMLxB,KAAK8B,cAAgBF,EAMrB5B,KAAK+B,cAAgBF,GAjBvBhB,EAAQc,+DAoBRd,EAAQC,OAAOQ,WAAW,mBAAoBT,EAAQc,wBAEtDd,EAAQc,uBAAuBK,UAAUC,QAAU,WAAW,IAAAC,EAAAlC,KACtDmC,EAAOnC,KAAKwB,IAAIY,UAElBC,EAAOrC,KAAK8B,cAAcQ,SAAS,KACvCD,OAAgB1C,IAAT0C,GAAsBA,EAAO,EAEpC,IAAME,EAAIvC,KAAK8B,cAAcQ,SAAS,KAChCE,EAAIxC,KAAK8B,cAAcQ,SAAS,KAChCG,OAAgB9C,IAAN4C,QAA2B5C,IAAN6C,IACjCD,GAAIC,IAAM,EAAG,GAEjBL,EAAKO,UAAUD,GACfN,EAAKQ,QAAQN,GAEbrC,KAAK8B,cAAcc,cACjBC,EAAKR,EACLE,EAAKO,KAAKC,MAAMN,EAAO,IACvBD,EAAKM,KAAKC,MAAMN,EAAO,MAGzBN,EAAKa,GAAG,iBACNhD,KAAK+B,cAIH,SAACrB,GACC,IAAM+B,EAASN,EAAKc,YACdC,GACJL,EAAKV,EAAKgB,UACVZ,EAAKO,KAAKC,MAAMN,EAAO,IACvBD,EAAKM,KAAKC,MAAMN,EAAO,KAEzBP,EAAKJ,cAAcc,aAAaM,IAC/B,KAAuB,KAQhCrC,EAAQuC,eACN9B,WAAY,4BACZC,UACEC,IAAO,cACP6B,MAAS,iBAEX5B,SACI,2JAONZ,EAAQC,OAAOY,UAAU,UAAWb,EAAQuC,eAU5CvC,EAAQyC,wBAA0B,SAASC,EAAQ3B,GAMjD5B,KAAKwB,IAKLxB,KAAKqD,MAMLrD,KAAK8B,cAAgBF,EAMrB5B,KAAKwD,OAASD,EAMdvD,KAAKyD,YAAc,EAMnBzD,KAAK0D,aAnCP7C,EAAQyC,0DAsCRzC,EAAQyC,wBAAwBtB,UAAUC,QAAU,WAAW,IAAA0B,EAAA3D,KACvD4D,EAAe5D,KAAKqD,MAAMQ,YAEhC7D,KAAK0D,YAAc,IAAAI,EAAA7C,SACjB8C,KAA2C,aAC3CC,OAAQJ,IAGV5D,KAAK0D,YAAYO,WAAU,GAC3BjE,KAAKwB,IAAI0C,eAAelE,KAAK0D,aAC7BS,EAAAlD,QAAiByC,YAAY1D,KAAK0D,aAElC1D,KAAK0D,YAAYV,GAAG,UAAW,SAAStC,GACtCA,EAAE0D,QAAQC,IAAI,OAAQrE,KAAKyD,cAC1BzD,MAIH,IAAMsE,EAAW,IAAAC,EAAAtD,QAEjB2C,EAAaZ,GAAG,aAAc,SAACtC,GACbA,EAAE0D,QACVI,SAAS,IAAAC,EAAAxD,SACfyD,OAAQ,IAAAC,EAAA1D,SACN2D,OAAQ,IAAK,EAAG,EAAG,GACnBC,MAAO,OAGX,IAAMC,EAAWlB,EAAamB,cACxBC,EAAkBV,EAASW,cAAcH,GAC/CnB,EAAKH,OAAO0B,YAAY,WACtBvB,EAAK7B,cAAcc,cAAckC,SAAYE,QAIjD,IAAMA,EAAkBhF,KAAK8B,cAAcQ,SAAS,YACpD,QAAwB3C,IAApBqF,EAA+B,CACjC,IAAMF,EAAWR,EAASa,aAAaH,GACvChF,KAAKyD,YAAcqB,EAASM,OAC5BxB,EAAayB,YAAYP,KAS7BjE,EAAQyC,wBAAwBtB,UAAUsD,WAAa,WACrDtF,KAAKqD,MAAMQ,YAAY0B,OAAM,GAC7BvF,KAAKyD,YAAc,EACnBzD,KAAK8B,cAAc0D,YAAY,aAGjC3E,EAAQC,OAAOQ,WAAW,oBAAqBT,EAAQyC,yBAMvDzC,EAAQ4E,eAAiB,WAMvBzF,KAAKwB,IAAM,IAAAkE,EAAAzE,SACT0E,QACE,IAAAC,EAAA3E,SACE+C,OAAQ,IAAA6B,EAAA5E,aAMd,IAAM2C,EAAe,IAAAkC,EAAA7E,QAMrBjB,KAAK+F,YAAc,IAAAC,EAAA/E,SACjB+C,OAAQJ,IAKV5D,KAAK+F,YAAYE,OAAOjG,KAAKwB,MAK/BX,EAAQC,OAAOQ,WAAW,iBAAkBT,EAAQ4E,0BAGrC5E,qFCrRf,QAAAvB,GAAA,eAAAoB,EAAA,IAAAC,MAAA,8CAAAD,EAAAE,KAAA,mBAAAF,EAAA,SACApB,EAAA,SACAA,EAAA,UACAA,EAAA,KACY4G,IAAZ5G,EAAA,QACAA,EAAA,KACY6G,IAAZ7G,EAAA,KACY8G,IAAZ9G,EAAA,IACY+G,IAAZ/G,EAAA,SACAA,EAAA,UACAA,EAAA,UACAA,EAAA,OACAA,EAAA,UACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,iNA0BA,IAAMuB,EAAU,SAAVA,EAAmBrB,GAEvB8G,EAAArF,QAAoBlB,KAAKC,MAEzB,IAAMP,OAA0BE,IAAhBH,EAA4BA,KAM5CQ,KAAKuG,eAAiC5G,IAArBF,EAAQ+G,SACvB/G,EAAQ+G,SAAW3F,EAAQ4F,UAM7BzG,KAAK0G,mBAAyC/G,IAAzBF,EAAQkH,cAC3BlH,EAAQkH,aAMV3G,KAAK4G,yBAA6CjH,IAAvBF,EAAQoH,WACjCpH,EAAQoH,WAAahG,EAAQiG,2BAM/B9G,KAAK+G,eAAiCpH,IAArBF,EAAQ+E,UAAyB/E,EAAQ+E,SAM1DxE,KAAKgH,OAAS,EAMdhH,KAAKiH,OAAS,EAMdpG,EAAQqG,uBAAgDvH,IAA3BF,EAAQ0H,gBAAkC1H,EAAQ0H,gBAIjFjB,EAAOkB,SAASvG,EAAhByF,EAAArF,SAOAJ,EAAQwG,aACNC,WAAcC,EAAAtG,QAA+BuG,YAC7CC,MAASF,EAAAtG,QAA+ByG,MACxCC,QAAWJ,EAAAtG,QAA+B2G,QAC1CC,gBAAmBN,EAAAtG,QAA+BuG,YAClDM,WAAcP,EAAAtG,QAA+ByG,MAC7CK,aAAgBR,EAAAtG,QAA+B2G,SAOjD/G,EAAQqG,qBAMRrG,EAAQmB,UAAUgG,YAMlBnH,EAAQmB,UAAUmD,aAMlBtE,EAAQmB,UAAUiG,aAMlBpH,EAAQmB,UAAUkG,aAMlBrH,EAAQmB,UAAUiD,cAMlBpE,EAAQmB,UAAUmG,cAUlBtH,EAAQuH,QACJ,mEAOJvH,EAAQ4F,UAAY,GAUpB5F,EAAQiG,2BAA6B,SAAS1C,GAC5C,OAAOA,EAAQiE,iBAUjBxH,EAAQyH,oBAAsB,SAASC,GACrC,IAAIC,EAAYD,GAAO,EAIvB,OAHIA,EAAM,IACRC,GAAcA,GAET3H,EAAQ4H,cAAcD,IAU/B3H,EAAQ4H,cAAgB,SAASF,GAE/B,IADA,IAAIG,EAAgB,GACbH,GAAO,IACZG,GAAiB7H,EAAQuH,QAAQO,OAC/B,GAAc,GAANJ,GACVA,IAAQ,EAGV,OADAG,GAAiB7H,EAAQuH,QAAQO,OAAOJ,IAc1C1H,EAAQ6F,cAAgB,SAASkC,EAAQC,EAAcC,GACrD,IAAMC,EAAYlI,EAAQwG,YAAYwB,GACtCG,EAAA/H,QAAYgI,YAAqBtJ,IAAdoJ,GACnB,IAAK,IAAIG,EAAI,EAAGA,EAAIN,EAAOxD,SAAU8D,EAAG,CACtC,IAAMC,EAAQP,EAAOM,GACfE,EAAYD,EAAME,UAClBC,EAAaH,EAAMI,WACnBC,EAAcL,EAAMM,YACpBC,EAAYP,EAAMQ,UACpBZ,GAAaxB,EAAAtG,QAA+B2G,QAC5B,OAAdwB,GACFvI,EAAQ+I,oBACNR,EAAWI,EAAaV,GAEnBC,GAAaxB,EAAAtG,QAA+BuG,YACjC,OAAhBgC,GACF3I,EAAQgJ,iBAAiBL,EAAaV,GAE/BC,GAAaxB,EAAAtG,QAA+ByG,OAClC,OAAf4B,GACFzI,EAAQiJ,kBAAkBR,EAAYR,GAGxB,OAAdY,GACF7I,EAAQkJ,iBAAiBL,EAAWZ,KAa1CjI,EAAQgJ,iBAAmB,SAASL,EAAaV,GAC/CjI,EAAQmJ,mBAAmBR,EAAaV,IAW1CjI,EAAQiJ,kBAAoB,SAASR,EAAYR,GAC/C,GAAIQ,uBAAqC,CACvC,IAAMW,EAASX,EAAWY,YACtBpB,EAAc1D,OAAS,GACzB0D,EAAcqB,KAAK,KAErBrB,EAAcqB,KAAKC,kCAAkCH,IACrD,IAAMb,EAAYE,EAAWD,UACX,OAAdD,GACFvI,EAAQwJ,iBAAiBjB,EAAWN,GAEtC,IAAMU,EAAcF,EAAWG,YACX,OAAhBD,GACF3I,EAAQmJ,mBAAmBR,EAAaV,KAe9CjI,EAAQ+I,oBAAsB,SAASR,EAAWI,EAAaV,GAC7DjI,EAAQwJ,iBAAiBjB,EAAWN,GAChB,OAAhBU,GACF3I,EAAQmJ,mBAAmBR,EAAaV,IAc5CjI,EAAQwJ,iBAAmB,SAASjB,EAAWN,EAAewB,GAC5D,IAAMC,OAAoC5K,IAArB2K,EACnBA,EAAmB,YACfE,EAAYpB,EAAUqB,WAC5B,GAAkB,OAAdD,EAAoB,CACtBxB,EAAA/H,QAAYgI,OAAOyB,MAAMC,QAAQH,GAAY,+BAC7C,IAAMI,EAAgBzE,EAAQ0E,QAAQL,GACtCxB,EAAA/H,QAAYgI,OAAOyB,MAAMC,QAAQC,GAAgB,+BACjD,IAAME,EAAeC,EAAA9J,QAAU+J,cAAcJ,GACzC9B,EAAc1D,OAAS,GACzB0D,EAAcqB,KAAK,KAErBrB,EAAcqB,KACZC,mBAAsBG,EAAtB,IAAsCO,MAY5CjK,EAAQmJ,mBAAqB,SAASR,EAAaV,GACjD,IAAMmC,EAAczB,EAAYiB,WAChC,GAAoB,OAAhBQ,EAAsB,CACxBjC,EAAA/H,QAAYgI,OAAOyB,MAAMC,QAAQM,IACjC,IAAMC,EAAkB/E,EAAQ0E,QAAQI,GACxCjC,EAAA/H,QAAYgI,OAAOyB,MAAMC,QAAQO,GAAkB,iCACnD,IAAMC,EAAiBJ,EAAA9J,QAAU+J,cAAcE,GAC3CpC,EAAc1D,OAAS,GACzB0D,EAAcqB,KAAK,KAErBrB,EAAcqB,KAAKC,kCAAkCe,IAEvD,IAAMC,EAAc5B,EAAY6B,gBACZ1L,IAAhByL,IACEtC,EAAc1D,OAAS,GACzB0D,EAAcqB,KAAK,KAErBrB,EAAcqB,KAAKC,kCAAkCgB,MAYzDvK,EAAQkJ,iBAAmB,SAASL,EAAWZ,GAC7C,IAAMwC,EAAY5B,EAAU6B,UAC5B,QAAkB5L,IAAd2L,EAAyB,CAC3B,IAAME,EAAOF,EAAUG,MAAM,KACzBD,EAAKpG,QAAU,IACb0D,EAAc1D,OAAS,GACzB0D,EAAcqB,KAAK,KAErBrB,EAAcqB,KAAKC,+BAA+BoB,EAAK,MAG3D,IAAMpC,EAAYM,EAAUL,UACV,OAAdD,GACFvI,EAAQwJ,iBACNjB,EAAWN,EAAe,cAahCjI,EAAQ6K,wBAA0B,SAASC,GACzC3C,EAAA/H,QAAYgI,OAAgC,OAAzB0C,EAAKC,UAAU,EAAG,IACrC5C,EAAA/H,QAAYgI,OAAgC,KAAzB0C,EAAKA,EAAKvG,OAAS,IACtCuG,EAAOA,EAAKC,UAAU,EAAGD,EAAKvG,OAAS,GACvC,IAAMyG,EAAkB7L,KAAK8L,mBAAmBH,GAC1CI,EAAa,IAAAC,EAAA/K,QAAqB,MAExC,OADA8K,EAAWE,mBAAmBC,EAAAjL,QAAqBkL,GAAIN,GAChDE,GAYTlL,EAAQuL,6BAA+B,SAAST,GAC9C3C,EAAA/H,QAAYgI,OAAgC,OAAzB0C,EAAKC,UAAU,EAAG,IACrC5C,EAAA/H,QAAYgI,OAAgC,KAAzB0C,EAAKA,EAAKvG,OAAS,IAKtC,IAHA,IAAIyG,KACEQ,KACAC,GAHNX,EAAOA,EAAKC,UAAU,EAAGD,EAAKvG,OAAS,IAGdqG,MAAM,KACtBvC,EAAI,EAAGqD,EAAKD,EAAYlH,OAAQ8D,EAAIqD,IAAMrD,EACjD2C,EAAkB7L,KAAK8L,mBAAmBQ,EAAYpD,GAAI2C,GAC1DQ,EAAKnD,GAAK2C,EAAgBzG,OAE5B,IAAMoH,EAAkB,IAAAC,EAAAxL,QAA0B,MAGlD,OAFAuL,EAAgBP,mBACdC,EAAAjL,QAAqBkL,GAAIN,EAAiBQ,GACrCG,GAYT3L,EAAQ6L,mBAAqB,SAASf,GACpC3C,EAAA/H,QAAYgI,OAAgC,OAAzB0C,EAAKC,UAAU,EAAG,IACrC5C,EAAA/H,QAAYgI,OAAgC,KAAzB0C,EAAKA,EAAKvG,OAAS,IACtCuG,EAAOA,EAAKC,UAAU,EAAGD,EAAKvG,OAAS,GACvC,IAAMyG,EAAkB7L,KAAK8L,mBAAmBH,GAChD3C,EAAA/H,QAAYgI,OAAkC,IAA3B4C,EAAgBzG,QACnC,IAAMuH,EAAQ,IAAAC,EAAA3L,QAAgB,MAE9B,OADA0L,EAAMV,mBAAmBC,EAAAjL,QAAqBkL,GAAIN,GAC3Cc,GAYT9L,EAAQgM,wBAA0B,SAASlB,GACzC3C,EAAA/H,QAAYgI,OAAgC,OAAzB0C,EAAKC,UAAU,EAAG,IACrC5C,EAAA/H,QAAYgI,OAAgC,KAAzB0C,EAAKA,EAAKvG,OAAS,IACtCuG,EAAOA,EAAKC,UAAU,EAAGD,EAAKvG,OAAS,GACvC,IAAMyG,EAAkB7L,KAAK8L,mBAAmBH,GAC1CmB,EAAa,IAAAC,EAAA9L,QAAqB,MAExC,OADA6L,EAAWb,mBAAmBC,EAAAjL,QAAqBkL,GAAIN,GAChDiB,GAYTjM,EAAQmM,qBAAuB,SAASrB,GACtC3C,EAAA/H,QAAYgI,OAAgC,OAAzB0C,EAAKC,UAAU,EAAG,IACrC5C,EAAA/H,QAAYgI,OAAgC,KAAzB0C,EAAKA,EAAKvG,OAAS,IAKtC,IAHA,IAAIyG,KACEQ,KACAY,GAHNtB,EAAOA,EAAKC,UAAU,EAAGD,EAAKvG,OAAS,IAGpBqG,MAAM,KAChBvC,EAAI,EAAGqD,EAAKU,EAAM7H,OAAQ8D,EAAIqD,IAAMrD,EAAG,CAE9C,IAAIgE,GADJrB,EAAkB7L,KAAK8L,mBAAmBmB,EAAM/D,GAAI2C,IAC1BzG,OAChB,IAAN8D,GACF2C,EAAgBqB,KAASrB,EAAgB,GACzCA,EAAgBqB,KAASrB,EAAgB,KAEzCA,EAAgBqB,KAASrB,EAAgBQ,EAAKnD,EAAI,IAClD2C,EAAgBqB,KAASrB,EAAgBQ,EAAKnD,EAAI,GAAK,IAEzDmD,EAAKnD,GAAKgE,EAEZ,IAAMC,EAAU,IAAAC,EAAAnM,QAAkB,MAElC,OADAkM,EAAQlB,mBAAmBC,EAAAjL,QAAqBkL,GAAIN,EAAiBQ,GAC9Dc,GAYTtM,EAAQwM,0BAA4B,SAAS1B,GAC3C3C,EAAA/H,QAAYgI,OAAgC,OAAzB0C,EAAKC,UAAU,EAAG,IACrC5C,EAAA/H,QAAYgI,OAAgC,KAAzB0C,EAAKA,EAAKvG,OAAS,IAKtC,IAHA,IAAIyG,KACEyB,KACAC,GAHN5B,EAAOA,EAAKC,UAAU,EAAGD,EAAKvG,OAAS,IAGjBqG,MAAM,MACnBvC,EAAI,EAAGqD,EAAKgB,EAASnI,OAAQ8D,EAAIqD,IAAMrD,EAG9C,IAFA,IAAM+D,EAAQM,EAASrE,GAAGuC,MAAM,KAC1BY,EAAOiB,EAAMpE,MACVsE,EAAI,EAAGC,EAAKR,EAAM7H,OAAQoI,EAAIC,IAAMD,EAAG,CAE9C,IAAIN,GADJrB,EAAkB7L,KAAK8L,mBAAmBmB,EAAMO,GAAI3B,IAC1BzG,OAChB,IAANoI,GACF3B,EAAgBqB,KAASrB,EAAgB,GACzCA,EAAgBqB,KAASrB,EAAgB,KAEzCA,EAAgBqB,KAASrB,EAAgBQ,EAAKmB,EAAI,IAClD3B,EAAgBqB,KAASrB,EAAgBQ,EAAKmB,EAAI,GAAK,IAEzDnB,EAAKmB,GAAKN,EAGd,IAAMQ,EAAe,IAAAC,EAAA1M,QAAuB,MAG5C,OAFAyM,EAAazB,mBACXC,EAAAjL,QAAqBkL,GAAIN,EAAiByB,GACrCI,GAcT7M,EAAQ+M,mBAAqB,SAASjC,EAAMvH,GAC1C,GAAY,IAARuH,EAAJ,CAGA,IAAM9E,EAAahG,EAAQgN,oBAAoBlC,EAAMvH,GAC/CoG,EAAY3D,EAAA,UACZiH,EAAWjH,EAAA,SACXkH,EAAYlH,EAAA,UACZmH,EAAcnH,EAAA,YACdoE,EAAcpE,EAAA,YACduE,EAAcvE,EAAA,YAEhBuC,EAAY,UACEzJ,IAAd6K,IACFpB,EAAY,IAAA6E,EAAAhN,SACV2D,MAA4C4F,KAGhD,IAAIhB,EAAc,UACE7J,IAAhBsL,QAA6CtL,IAAhByL,IAC/B5B,EAAc,IAAA7E,EAAA1D,SACZ2D,MAA4CqG,EAC5CpG,MAA8BuG,KAGlC,IAAI9B,EAAa,UACG3J,IAAhBqO,IACF1E,EAAa,IAAA4E,EAAAjN,SACXgJ,OAA+B+D,EAC/BG,KAAM/E,EACN1E,OAAQ8E,IAEVJ,EAAYI,EAAc,MAE5B,IAAIE,EAAY,UACC/J,IAAbmO,QAAwCnO,IAAdoO,IAC5BrE,EAAY,IAAA0E,EAAAnN,SACVuK,KAASsC,EAAT,cACAK,KAAM,IAAAF,EAAAhN,SACJ2D,MAA4CmJ,OAIlD,IAAM5E,EAAQ,IAAA1E,EAAAxD,SACZkN,KAAM/E,EACNiF,MAAO/E,EACP5E,OAAQ8E,EACRmC,KAAMjC,IAERtF,EAAQI,SAAS2E,KAYnBtI,EAAQyN,oBAAsB,SAAS3C,EAAMvH,GAE3C,IAAMyC,EAAahG,EAAQgN,oBAAoBlC,EAAMvH,GAC/CmK,EAAWnK,EAAQoK,cAsBzB,GAnBID,uBACE1H,EAAA,SACAA,EAAW4H,EAAAxN,QAA4ByN,iBAClC7H,EAAA,mBACAA,EAAA,mBAEAA,EAAA,iBACAA,EAAA,kBAGFA,EAAA,UAEH0H,gCACK1H,EAAA,iBACAA,EAAA,cAKPA,EAAA,SAAwB,CAC1B,IAAIiH,EAAWa,WAAW9H,EAAA,WACoB,IAA1CA,EAAA,SAAuB+H,QAAQ,QACjCd,EAAWhL,KAAKC,MAAM+K,EAAW,WAEnCjH,EAAA,SAAyBiH,EAI3B,IAAMe,KACN,IAAK,IAAMC,KAAOjI,EAAY,CAC5B,IAAMkI,EAAQlI,EAAWiI,GACrBjO,EAAQqG,kBAAkB4H,GAC5BD,EAAMhO,EAAQqG,kBAAkB4H,IAAQC,EAExCF,EAAMC,GAAOC,EAIjB3K,EAAQ4K,cAAcH,IAWxBhO,EAAQoO,WAAa,SAASH,EAAKC,GACjC,IAAMG,GACJT,EAAAxN,QAA4BkO,MAC5BV,EAAAxN,QAA4BmO,QAC5BX,EAAAxN,QAA4BoO,KAC5BZ,EAAAxN,QAA4BqO,OAC5B,cACA,eAEIC,GACJd,EAAAxN,QAA4BuO,UAC5Bf,EAAAxN,QAA4BwO,aAC5BhB,EAAAxN,QAA4ByN,QAC5BD,EAAAxN,QAA4ByO,aAC5BjB,EAAAxN,QAA4B0O,WAC5B,WACA,cACA,UACA,cACA,aAGF,OAAIvJ,EAAQwJ,SAASV,EAAeJ,IAC1BC,EACC3I,EAAQwJ,SAASL,EAAgBT,GACxB,SAAVC,EAEDA,GAgBXlO,EAAQgN,oBAAsB,SAASlC,EAAMvH,GAI3C,IAHA,IAAMyL,EAAQlE,EAAKF,MAAM,KACnB5E,KAEGqC,EAAI,EAAGA,EAAI2G,EAAMzK,SAAU8D,EAAG,CACrC,IACM4G,EADOC,mBAAmBF,EAAM3G,IAClBuC,MAAM,KAC1BzC,EAAA/H,QAAYgI,OAAyB,IAAlB6G,EAAO1K,QAC1B,IAAM0J,EAAMgB,EAAO,GACbE,EAAMF,EAAO,GAEnBjJ,EAAWiI,GAAOjO,EAAQoO,WAAWH,EAAKkB,GAG5C,OAAOnJ,GAYThG,EAAQoP,yBAA2B,SAAS1B,GAC1CvF,EAAA/H,QAAYiP,iBAAiB3B,EAA7BvC,EAAA/K,SACA,IAAM4K,EAAkB0C,EAAS4B,qBAC3BC,EAAS7B,EAAS8B,YAClBnD,EAAMrB,EAAgBzG,OAC5B,WAAYpF,KAAKsQ,mBAAmBzE,EAAiBuE,EAAQ,EAAGlD,GAAhE,KAYFrM,EAAQ0P,8BAAgC,SAAShC,GAC/CvF,EAAA/H,QAAYiP,iBAAiB3B,EAA7B9B,EAAAxL,SAOA,IANA,IAAMoL,EAAOkC,EAASiC,UAChBC,EAAkBpE,EAAKjH,OACvByG,EAAkB0C,EAAS4B,qBAC3BC,EAAS7B,EAAS8B,YACpBK,EAAS,EACPC,GAAa,MACVzH,EAAI,EAAGA,EAAIuH,IAAmBvH,EAAG,CACxC,IAAMgE,EAAMb,EAAKnD,GACXyC,EAAO3L,KAAKsQ,mBAAmBzE,EAAiBuE,EAAQM,EAAQxD,GAC5D,IAANhE,GACFyH,EAAUxG,KAAK,KAEjBwG,EAAUxG,KAAKwB,GACf+E,EAASxD,EAGX,OADAyD,EAAUxG,KAAK,KACRwG,EAAUC,KAAK,KAYxB/P,EAAQgQ,oBAAsB,SAAStC,GACrCvF,EAAA/H,QAAYiP,iBAAiB3B,EAA7B3B,EAAA3L,SACA,IAAM4K,EAAkB0C,EAAS4B,qBAC3BC,EAAS7B,EAAS8B,YAClBnD,EAAMrB,EAAgBzG,OAC5B,WAAYpF,KAAKsQ,mBAAmBzE,EAAiBuE,EAAQ,EAAGlD,GAAhE,KAYFrM,EAAQiQ,yBAA2B,SAASvC,GAC1CvF,EAAA/H,QAAYiP,iBAAiB3B,EAA7BxB,EAAA9L,SACA,IAAM4K,EAAkB0C,EAAS4B,qBAC3BC,EAAS7B,EAAS8B,YAClBnD,EAAMrB,EAAgBzG,OAC5B,WAAYpF,KAAKsQ,mBAAmBzE,EAAiBuE,EAAQ,EAAGlD,GAAhE,KAeFrM,EAAQkQ,aAAe,SAASlF,EAAiBuE,EAAQM,EAAQrE,EAAMsE,GAErE,IADA,IAAMK,EAAkB3E,EAAKjH,OACpB8D,EAAI,EAAGA,EAAI8H,IAAmB9H,EAAG,CAExC,IAAMgE,EAAMb,EAAKnD,GAAKkH,EAChBzE,EAAO3L,KAAKsQ,mBAAmBzE,EAAiBuE,EAAQM,EAAQxD,GAC5D,IAANhE,GACFyH,EAAUxG,KAAK,KAEjBwG,EAAUxG,KAAKwB,GACf+E,EAASrE,EAAKnD,GAEhB,OAAOwH,GAYT7P,EAAQoQ,sBAAwB,SAAS1C,GACvCvF,EAAA/H,QAAYiP,iBAAiB3B,EAA7BnB,EAAAnM,SACA,IAAM4K,EAAkB0C,EAAS4B,qBAC3BC,EAAS7B,EAAS8B,YAClBhE,EAAOkC,EAASiC,UAEhBG,GAAa,MAInB,OAHA9P,EAAQkQ,aAAahR,KAAKC,KACxB6L,EAAiBuE,EAHJ,EAGoB/D,EAAMsE,GACzCA,EAAUxG,KAAK,KACRwG,EAAUC,KAAK,KAYxB/P,EAAQqQ,2BAA6B,SAAS3C,GAC5CvF,EAAA/H,QAAYiP,iBAAiB3B,EAA7BZ,EAAA1M,SAOA,IANA,IAAM4K,EAAkB0C,EAAS4B,qBAC3BC,EAAS7B,EAAS8B,YAClB/C,EAAQiB,EAAS4C,WACjBC,EAAe9D,EAAMlI,OACvBsL,EAAS,EACPC,GAAa,KACVzH,EAAI,EAAGA,EAAIkI,IAAgBlI,EAAG,CACrC,IAAMmD,EAAOiB,EAAMpE,GACnByH,EAAUxG,KAAK,KACfuG,EAAS7P,EAAQkQ,aAAahR,KAAKC,KACjC6L,EAAiBuE,EAAQM,EAAQrE,EAAMsE,GACzCA,EAAUxG,KAAK,KAEjB,OAAOwG,EAAUC,KAAK,KASxB/P,EAAQwQ,mBACNC,EAAKzQ,EAAQgM,wBACb0E,EAAK1Q,EAAQuL,6BACboF,EAAK3Q,EAAQwM,0BACboE,EAAK5Q,EAAQ6K,wBACbgG,EAAK7Q,EAAQ6L,mBACbiF,EAAK9Q,EAAQmM,sBASfnM,EAAQ+Q,mBACN/J,gBAAmBhH,EAAQ0P,8BAC3BzI,WAAcjH,EAAQiQ,yBACtB/I,aAAgBlH,EAAQqQ,2BACxB5J,WAAczG,EAAQoP,yBACtBxI,MAAS5G,EAAQgQ,oBACjBlJ,QAAW9G,EAAQoQ,uBAcrBpQ,EAAQmB,UAAU8J,mBAAqB,SAASH,EAAMkG,GAMpD,IALA,IAAMC,EAAMnG,EAAKvG,OACb2M,EAAQ,EACNlG,OAA0ClM,IAAxBkS,EACtBA,KACE3I,EAAI2C,EAAgBzG,OACjB2M,EAAQD,GAAK,CAClB,IAAIE,SACAC,EAAQ,EACRC,EAAS,EACb,GAEEA,IAAe,IADfF,EAAInR,EAAQuH,QAAQwG,QAAQjD,EAAKhD,OAAOoJ,SAChBE,EACxBA,GAAS,QACFD,GAAK,IACd,IAAMG,EAAgB,EAATD,IAAgBA,GAAU,GAAMA,GAAU,EACvDlS,KAAKgH,QAAUmL,EACfF,EAAQ,EACRC,EAAS,EACT,GAEEA,IAAe,IADfF,EAAInR,EAAQuH,QAAQwG,QAAQjD,EAAKhD,OAAOoJ,SAChBE,EACxBA,GAAS,QACFD,GAAK,IACd,IAAMI,EAAgB,EAATF,IAAgBA,GAAU,GAAMA,GAAU,EACvDlS,KAAKiH,QAAUmL,EACfvG,EAAgB3C,KAAOlJ,KAAKgH,OAAShH,KAAKuG,UAC1CsF,EAAgB3C,KAAOlJ,KAAKiH,OAASjH,KAAKuG,UAE5C,OAAOsF,GAeThL,EAAQmB,UAAUsO,mBAAqB,SAASzE,EAAiBuE,EAAQM,EAAQxD,GAE/E,IADA,IAAImF,EAAqB,GAChBnJ,EAAIwH,EAAQxH,EAAIgE,EAAKhE,GAAKkH,EAAQ,CACzC,IAAI7N,EAAIsJ,EAAgB3C,GACpB1G,EAAIqJ,EAAgB3C,EAAI,GAC5B3G,EAAIO,KAAKwP,MAAM/P,EAAIvC,KAAKuG,WACxB/D,EAAIM,KAAKwP,MAAM9P,EAAIxC,KAAKuG,WACxB,IAAM4L,EAAK5P,EAAIvC,KAAKgH,OACdoL,EAAK5P,EAAIxC,KAAKiH,OACpBjH,KAAKgH,OAASzE,EACdvC,KAAKiH,OAASzE,EACd6P,GAAsBxR,EAAQyH,oBAAoB6J,GAC9CtR,EAAQyH,oBAAoB8J,GAElC,OAAOC,GAYTxR,EAAQmB,UAAUuQ,oBAAsB,SAAS5G,EAAMnM,GACrDwJ,EAAA/H,QAAYgI,OAAO0C,EAAKvG,OAAS,GACjC4D,EAAA/H,QAAYgI,OAAmB,MAAZ0C,EAAK,IACxB3C,EAAA/H,QAAYgI,OAAiC,MAA1B0C,EAAKA,EAAKvG,OAAS,IACtC,IAAIoN,EAAa7G,EAAKiD,QAAQ,KACxB6D,EAAeD,GAAc,EAC9B7G,EAAKC,UAAU,EAAG4G,GADF,IACmB7G,EAClC4C,EAAWvO,KAAK0S,qBAAqBD,EAAcjT,GACnD4E,EAAU,IAAAuO,EAAA1R,QAAcsN,GAC9B,GAAIiE,GAAc,EAAG,CACnB,IAAMI,EAA0BjH,EAAKC,UACnC4G,EAAa,EAAG7G,EAAKvG,OAAS,GAE1ByN,GADNL,EAAaI,EAAwBhE,QAAQ,OACR,EACnCgE,EAAwBhH,UAAU,EAAG4G,GACrCI,EACF,GAAsB,IAAlBC,EAEF,IADA,IAAMhD,EAAQgD,EAAepH,MAAM,KAC1BvC,EAAI,EAAGA,EAAI2G,EAAMzK,SAAU8D,EAAG,CACrC,IACM4G,EADOC,mBAAmBF,EAAM3G,IAClBuC,MAAM,KAC1BzC,EAAA/H,QAAYgI,OAAyB,IAAlB6G,EAAO1K,QAC1B,IAAI0J,EAAMgB,EAAO,GACXf,EAAQe,EAAO,IAChB9P,KAAK+G,WAAalG,EAAQqG,kBAAkB4H,KAC/CA,EAAMjO,EAAQqG,kBAAkB4H,IAElC1K,EAAQC,IAAIyK,EAAKjO,EAAQoO,WAAWH,EAAKC,IAG7C,GAAIyD,GAAc,EAAG,CACnB,IAAMM,EAAaF,EAAwBhH,UAAU4G,EAAa,GAC9DxS,KAAK+G,UACPlG,EAAQ+M,mBAAmBkF,EAAY1O,GAEvCvD,EAAQyN,oBAAoBwE,EAAY1O,IAI9C,OAAOA,GAYTvD,EAAQmB,UAAU+Q,qBAAuB,SAASpH,EAAMnM,GACtDwJ,EAAA/H,QAAYgI,OAAmB,MAAZ0C,EAAK,IAExB,IAAM7G,KAEN,IADA6G,EAAOA,EAAKC,UAAU,GACfD,EAAKvG,OAAS,GAAG,CACtB,IAAM2M,EAAQpG,EAAKiD,QAAQ,KAC3B5F,EAAA/H,QAAYgI,OAAO8I,GAAS,GAC5B,IAAM3N,EAAUpE,KAAKuS,oBACnB5G,EAAKC,UAAU,EAAGmG,EAAQ,GAAIvS,GAChCsF,EAASqF,KAAK/F,GACduH,EAAOA,EAAKC,UAAUmG,EAAQ,GAEhC,OAAOjN,GAYTjE,EAAQmB,UAAU0Q,qBAAuB,SAAS/G,EAAMnM,GACtD,IAAMwT,EAAiBnS,EAAQwQ,kBAAkB1F,EAAK,IAItD,OAHA3C,EAAA/H,QAAYgI,YAA0BtJ,IAAnBqT,GACnBhT,KAAKgH,OAAS,EACdhH,KAAKiH,OAAS,EACP+L,EAAejT,KAAKC,KAAM2L,IAYnC9K,EAAQmB,UAAUiR,iBAAmB,SAAS7O,EAAS5E,GACrD,IAAoC0T,KAIhCC,EAAkB,GAChB5E,EAAWnK,EAAQoK,cACrBD,IACF4E,EAAkBnT,KAAKoT,kBAAkB7E,EAAU/O,IAGjD2T,EAAgB/N,OAAS,IAE3B4D,EAAA/H,QAAYgI,OAAuD,MAAhDkK,EAAgBA,EAAgB/N,OAAS,IAC5D+N,EAAkBA,EAAgBvH,UAAU,EAAGuH,EAAgB/N,OAAS,GACxE8N,EAAa/I,KAAKgJ,IAKpB,IAAoCE,KAC9BC,EAAetT,KAAK4G,oBAAoBxC,GAC9C,IAAK,IAAM0K,KAAOwE,EAAc,CAC9B,IAAMvE,EAAQuE,EAAaxE,GAC3B,QAAcnP,IAAVoP,GAAiC,OAAVA,GAAkBD,IAAQ1K,EAAQmP,kBAAmB,CAC7C,IAA7BF,EAAkBjO,QACpBiO,EAAkBlJ,KAAK,KAEzB,IAAMqJ,EAAUpJ,mBACX0E,EAAI2E,QAAQ,UAAW,KADZ,IAEZ1E,EAAM2E,WAAWD,QAAQ,UAAW,MACxCJ,EAAkBlJ,KAAKqJ,IAW3B,GAPIH,EAAkBjO,OAAS,IAC7B8N,EAAa/I,KAAK,KAClBO,MAAM1I,UAAUmI,KAAKwJ,MAAMT,EAAcG,IAKvCrT,KAAK0G,cAAe,CACtB,IAAMkN,EAAgBxP,EAAQyP,mBAC9B,QAAsBlU,IAAlBiU,EAA6B,CAC/B,IAAIhL,EAASgL,EAAc7T,KAAKqE,EAAS,GACzC,GAAe,OAAXwE,EAAiB,CACnB,IAAME,KACNF,EAAS8B,MAAMC,QAAQ/B,GAAUA,GAAUA,GAC3C/H,EAAQ6F,cACNkC,EAAQ2F,EAASuF,UAAWhL,GAC1BA,EAAc1D,OAAS,IACzB8N,EAAa/I,KAAK,KAClBO,MAAM1I,UAAUmI,KAAKwJ,MAAMT,EAAcpK,MASjD,OADAoK,EAAa/I,KAAK,KACX+I,EAAatC,KAAK,KAY3B/P,EAAQmB,UAAU+R,kBAAoB,SAASjP,EAAUtF,GACvD,IAAMmR,KACN,GAAI7L,EAASM,OAAS,EAAG,CACvBuL,EAAUxG,KAAK,KACf,IAAK,IAAIjB,EAAI,EAAGqD,EAAKzH,EAASM,OAAQ8D,EAAIqD,IAAMrD,EAC9CyH,EAAUxG,KAAKnK,KAAKiT,iBAAiBnO,EAASoE,GAAI1J,IAGtD,OAAOmR,EAAUC,KAAK,KAYxB/P,EAAQmB,UAAUoR,kBAAoB,SAAS7E,EAAU/O,GACvD,IAAMwU,EAAiBnT,EAAQ+Q,kBAC7BrD,EAASuF,WACX9K,EAAA/H,QAAYgI,YAA0BtJ,IAAnBqU,GACnB,IAAMC,EACD5N,EAAgB6N,qBAAqB3F,GAAU,EAAM/O,GAG1D,OAFAQ,KAAKgH,OAAS,EACdhH,KAAKiH,OAAS,EACP+M,EAAejU,KAAKC,KAAMiU,cAIpBpT,gGClrCb2G,YAAa,aACbE,MAAO,QACPE,QAAS,iHCVXuM,EAAA7U,EAAA,KAiBA,MAAA8U,EAAA,WACAC,EAAA,QAAAtU,KAAAC,OAUA,SAAA2J,EAAA3F,GACA,uBAAAA,EACAA,EAEA,GAXAzD,OAAAC,EAAA,SAAAD,CAAA6T,EAAAC,EAAA,SAmBAD,EAAApS,UAAA8R,QAAA,WACA,OAAAK,EAAA,EAAAG,MAOAF,EAAApS,UAAAgG,YAAA,SAAAhE,EAAAxE,GACA,OAAAQ,KAAAuS,oBAAA5I,EAAA3F,GAAAhE,KAAAuU,aAAA/U,KAWA4U,EAAApS,UAAAuQ,oBAAA,SAAA5G,EAAAnM,KAMA4U,EAAApS,UAAAmD,aAAA,SAAAnB,EAAAxE,GACA,OAAAQ,KAAA+S,qBAAApJ,EAAA3F,GAAAhE,KAAAuU,aAAA/U,KAWA4U,EAAApS,UAAA+Q,qBAAA,SAAApH,EAAAnM,KAMA4U,EAAApS,UAAAiG,aAAA,SAAAjE,EAAAxE,GACA,OAAAQ,KAAA0S,qBAAA/I,EAAA3F,GAAAhE,KAAAuU,aAAA/U,KAWA4U,EAAApS,UAAA0Q,qBAAA,SAAA/G,EAAAnM,KAMA4U,EAAApS,UAAAwS,eAAA,SAAAxQ,GACA,OAAAhE,KAAAyU,uBAAA9K,EAAA3F,KASAoQ,EAAApS,UAAAyS,uBAAA,SAAA9I,GACA,OAAA3L,KAAA0U,uBAOAN,EAAApS,UAAAkG,aAAA,SAAA9D,EAAA5E,GACA,OAAAQ,KAAAiT,iBAAA7O,EAAApE,KAAAuU,aAAA/U,KAWA4U,EAAApS,UAAAiR,iBAAA,SAAA7O,EAAA5E,KAMA4U,EAAApS,UAAAiD,cAAA,SAAAH,EAAAtF,GACA,OAAAQ,KAAA+T,kBAAAjP,EAAA9E,KAAAuU,aAAA/U,KAWA4U,EAAApS,UAAA+R,kBAAA,SAAAjP,EAAAtF,KAMA4U,EAAApS,UAAAmG,cAAA,SAAAoG,EAAA/O,GACA,OAAAQ,KAAAoT,kBAAA7E,EAAAvO,KAAAuU,aAAA/U,KAWA4U,EAAApS,UAAAoR,kBAAA,SAAA7E,EAAA/O,KACAiB,EAAA,6DCzKAkU,EAAArV,EAAA,IA6BA,MAAAsV,EAAA,SAAApV,GACA,MAAAC,EAAAD,MACAqV,OAAAlV,IAAAF,EAAAoV,WACApV,EAAAoV,WAAA,YAEAC,OAAAnV,IAAAF,EAAAqV,SAAArV,EAAAqV,SACAH,EAAA,EAAAI,WACAC,OAAAL,EAAA,EAAAM,qBAAAJ,GACA1U,QAAAV,EAAAU,QACA+U,QAAAzV,EAAAyV,QACAC,SAAA1V,EAAA0V,WAGAC,EAAA,EAAArV,KAAAC,MACAN,aAAAD,EAAAC,aACAO,UAAAR,EAAAQ,UACAJ,YAAAJ,EAAAI,YACAK,OAAAT,EAAAS,OACA2U,aACAzU,2BAAAX,EAAAW,2BACA0U,WACAzU,iBAAAZ,EAAAY,iBACAgV,eAAA5V,EAAA4V,eACAC,gBAAA7V,EAAA6V,gBACAxV,IAAAL,EAAAK,IACAyV,KAAA9V,EAAA8V,KACAjV,WAAAX,IAAAF,EAAAa,OAAAb,EAAAa,MACAkV,WAAA/V,EAAA+V,cAKAjV,OAAAC,EAAA,SAAAD,CAAAqU,EAAAQ,EAAA,GACA3U,EAAA","file":"permalink.e3257e2e238eb45ce0dd.js","sourcesContent":["/**\n * @module ol/source/OSM\n */\nimport {inherits} from '../index.js';\nimport XYZ from '../source/XYZ.js';\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n *\n * @constructor\n * @extends {ol.source.XYZ}\n * @param {olx.source.OSMOptions=} opt_options Open Street Map options.\n * @api\n */\nconst OSM = function(opt_options) {\n\n  const options = opt_options || {};\n\n  let attributions;\n  if (options.attributions !== undefined) {\n    attributions = options.attributions;\n  } else {\n    attributions = [OSM.ATTRIBUTION];\n  }\n\n  const crossOrigin = options.crossOrigin !== undefined ?\n    options.crossOrigin : 'anonymous';\n\n  const url = options.url !== undefined ?\n    options.url : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n  XYZ.call(this, {\n    attributions: attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: crossOrigin,\n    opaque: options.opaque !== undefined ? options.opaque : true,\n    maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileLoadFunction: options.tileLoadFunction,\n    url: url,\n    wrapX: options.wrapX\n  });\n\n};\n\ninherits(OSM, XYZ);\n\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nOSM.ATTRIBUTION = '&copy; ' +\n      '<a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> ' +\n      'contributors.';\nexport default OSM;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/OSM.js\n// module id = 3\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module app.permalink\n */\nlet exports = {};\n\n// webpack: import './permalink.css';\n// webpack: import './common_dependencies.js';\nimport ngeoBase from 'ngeo/index.js';\n\nimport ngeoFormatFeatureHash from 'ngeo/format/FeatureHash.js';\nimport ngeoMapModule from 'ngeo/map/module.js';\nimport ngeoMiscDebounce from 'ngeo/misc/debounce.js';\nimport ngeoMiscDecorate from 'ngeo/misc/decorate.js';\nimport ngeoStatemanagerModule from 'ngeo/statemanager/module.js';\nimport olMap from 'ol/Map.js';\nimport olGeomGeometryType from 'ol/geom/GeometryType.js';\nimport olInteractionDraw from 'ol/interaction/Draw.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport olLayerVector from 'ol/layer/Vector.js';\nimport olSourceOSM from 'ol/source/OSM.js';\nimport olSourceVector from 'ol/source/Vector.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('app', [\n  ngeoMapModule.name,\n  ngeoMiscDebounce.name,\n  ngeoStatemanagerModule.name,\n]);\n\n/**\n * An application-specific map component that updates the URL in the browser\n * address bar when the map view changes. It also sets the initial view based\n * on the URL query params at init time.\n *\n * This component gets a reference to the map instance through the \"app-map\"\n * attribute.\n *\n * @type {!angular.Component}\n */\nexports.mapComponent = {\n  controller: 'AppMapController as ctrl',\n  bindings: {\n    'map': '=appMap'\n  },\n  template: '<div ngeo-map=ctrl.map></div>'\n};\n\n\nexports.module.component('appMap', exports.mapComponent);\n\n\n/**\n * @param {ngeo.statemanager.Location} ngeoLocation ngeo Location service.\n * @param {ngeox.miscDebounce} ngeoDebounce ngeo Debounce factory.\n * @constructor\n * @ngInject\n */\nexports.MapComponentController = function(ngeoLocation, ngeoDebounce) {\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map;\n\n  /**\n   * @type {ngeo.statemanager.Location}\n   * @private\n   */\n  this.ngeoLocation_ = ngeoLocation;\n\n  /**\n   * @type {ngeox.miscDebounce}\n   * @private\n   */\n  this.ngeoDebounce_ = ngeoDebounce;\n};\n\nexports.module.controller('AppMapController', exports.MapComponentController);\n\nexports.MapComponentController.prototype.$onInit = function() {\n  const view = this.map.getView();\n\n  let zoom = this.ngeoLocation_.getParam('z');\n  zoom = zoom !== undefined ? +zoom : 4;\n\n  const x = this.ngeoLocation_.getParam('x');\n  const y = this.ngeoLocation_.getParam('y');\n  const center = (x !== undefined) && (y !== undefined) ?\n    [+x, +y] : [0, 0];\n\n  view.setCenter(center);\n  view.setZoom(zoom);\n\n  this.ngeoLocation_.updateParams({\n    'z': zoom,\n    'x': Math.round(center[0]),\n    'y': Math.round(center[1])\n  });\n\n  view.on('propertychange',\n    this.ngeoDebounce_(\n      /**\n       * @param {ol.Object.Event} e Object event.\n       */\n      (e) => {\n        const center = view.getCenter();\n        const params = {\n          'z': view.getZoom(),\n          'x': Math.round(center[0]),\n          'y': Math.round(center[1])\n        };\n        this.ngeoLocation_.updateParams(params);\n      }, 300, /* invokeApply */ true));\n};\n\n/**\n * A draw component that adds a simple draw tool.\n *\n * @type {!angular.Component}\n */\nexports.drawComponent = {\n  controller: 'AppDrawController as ctrl',\n  bindings: {\n    'map': '=appDrawMap',\n    'layer': '=appDrawLayer'\n  },\n  template:\n      '<label>Enable drawing:' +\n      '<input type=\"checkbox\" ng-model=\"ctrl.interaction.active\" />' +\n      '</label><br>' +\n      '<button ng-click=\"ctrl.clearLayer()\">Clear layer</button>'\n};\n\n\nexports.module.component('appDraw', exports.drawComponent);\n\n\n/**\n * @param {!angular.Scope} $scope Scope.\n * @param {!ngeo.statemanager.Location} ngeoLocation ngeo Location service.\n * @constructor\n * @export\n * @ngInject\n */\nexports.DrawComponentController = function($scope, ngeoLocation) {\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map;\n\n  /**\n   * @type {ol.layer.Vector}\n   */\n  this.layer;\n\n  /**\n   * @type {!ngeo.statemanager.Location}\n   * @private\n   */\n  this.ngeoLocation_ = ngeoLocation;\n\n  /**\n   * @type {!angular.Scope}\n   * @private\n   */\n  this.scope_ = $scope;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.featureSeq_ = 0;\n\n  /**\n   * @type {ol.interaction.Draw}\n   * @export\n   */\n  this.interaction;\n};\n\nexports.DrawComponentController.prototype.$onInit = function() {\n  const vectorSource = this.layer.getSource();\n\n  this.interaction = new olInteractionDraw({\n    type: /** @type {ol.geom.GeometryType} */ ('LineString'),\n    source: vectorSource\n  });\n\n  this.interaction.setActive(false);\n  this.map.addInteraction(this.interaction);\n  ngeoMiscDecorate.interaction(this.interaction);\n\n  this.interaction.on('drawend', function(e) {\n    e.feature.set('id', ++this.featureSeq_);\n  }, this);\n\n  // Deal with the encoding and decoding of features in the URL.\n\n  const fhFormat = new ngeoFormatFeatureHash();\n\n  vectorSource.on('addfeature', (e) => {\n    const feature = e.feature;\n    feature.setStyle(new olStyleStyle({\n      stroke: new olStyleStroke({\n        color: [255, 0, 0, 1],\n        width: 2\n      })\n    }));\n    const features = vectorSource.getFeatures();\n    const encodedFeatures = fhFormat.writeFeatures(features);\n    this.scope_.$applyAsync(() => {\n      this.ngeoLocation_.updateParams({'features': encodedFeatures});\n    });\n  });\n\n  const encodedFeatures = this.ngeoLocation_.getParam('features');\n  if (encodedFeatures !== undefined) {\n    const features = fhFormat.readFeatures(encodedFeatures);\n    this.featureSeq_ = features.length;\n    vectorSource.addFeatures(features);\n  }\n};\n\n\n/**\n * Clear the vector layer.\n * @export\n */\nexports.DrawComponentController.prototype.clearLayer = function() {\n  this.layer.getSource().clear(true);\n  this.featureSeq_ = 0;\n  this.ngeoLocation_.deleteParam('features');\n};\n\nexports.module.controller('AppDrawController', exports.DrawComponentController);\n\n\n/**\n * @constructor\n */\nexports.MainController = function() {\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map = new olMap({\n    layers: [\n      new olLayerTile({\n        source: new olSourceOSM()\n      })\n    ]\n  });\n\n\n  const vectorSource = new olSourceVector();\n\n  /**\n   * @type {ol.layer.Vector}\n   * @export\n   */\n  this.vectorLayer = new olLayerVector({\n    source: vectorSource\n  });\n\n  // Use vectorLayer.setMap(map) rather than map.addLayer(vectorLayer). This\n  // makes the vector layer \"unmanaged\", meaning that it is always on top.\n  this.vectorLayer.setMap(this.map);\n\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/permalink.js","/**\n * @module ngeo.format.FeatureHash\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoFormatFeatureProperties from 'ngeo/format/FeatureProperties.js';\nimport ngeoFormatFeatureHashStyleType from 'ngeo/format/FeatureHashStyleType.js';\nimport ngeoUtils from 'ngeo/utils.js';\nimport * as olBase from 'ol/index.js';\nimport olFeature from 'ol/Feature.js';\nimport * as olColor from 'ol/color.js';\nimport * as olArray from 'ol/array.js';\nimport * as olFormatFeature from 'ol/format/Feature.js';\nimport olFormatTextFeature from 'ol/format/TextFeature.js';\nimport olGeomGeometryLayout from 'ol/geom/GeometryLayout.js';\nimport olGeomGeometryType from 'ol/geom/GeometryType.js';\nimport olGeomLineString from 'ol/geom/LineString.js';\nimport olGeomMultiLineString from 'ol/geom/MultiLineString.js';\nimport olGeomMultiPoint from 'ol/geom/MultiPoint.js';\nimport olGeomMultiPolygon from 'ol/geom/MultiPolygon.js';\nimport olGeomPoint from 'ol/geom/Point.js';\nimport olGeomPolygon from 'ol/geom/Polygon.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\nimport olStyleText from 'ol/style/Text.js';\n\n/**\n * @classdesc\n * Provide an OpenLayers format for encoding and decoding features for use\n * in permalinks.\n *\n * The code is based on Stéphane Brunner's URLCompressed format.\n *\n * TODOs:\n *\n * - The OpenLayers-URLCompressed format has options where the user\n *   can define attribute and style transformers. This is currently\n *   not supported by this format.\n * - The OpenLayers-URLCompressed format has a \"simplify\" option.\n *   This format does not have it.\n * - ol.style.Icon styles are not supported.\n * - Transformation of coordinates during encoding and decoding is\n *   not supported.\n *\n * @see https://github.com/sbrunner/OpenLayers-URLCompressed\n * @constructor\n * @struct\n * @extends {ol.format.TextFeature}\n * @param {ngeox.format.FeatureHashOptions=} opt_options Options.\n */\nconst exports = function(opt_options) {\n\n  olFormatTextFeature.call(this);\n\n  const options = opt_options !== undefined ? opt_options : {};\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.accuracy_ = options.accuracy !== undefined ?\n    options.accuracy : exports.ACCURACY_;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.encodeStyles_ = options.encodeStyles !== undefined ?\n    options.encodeStyles : true;\n\n  /**\n   * @type {function(ol.Feature):Object.<string, (string|number)>}\n   * @private\n   */\n  this.propertiesFunction_ = options.properties !== undefined ?\n    options.properties : exports.defaultPropertiesFunction_;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.setStyle_ = options.setStyle !== undefined ? options.setStyle : true;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.prevX_ = 0;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.prevY_ = 0;\n\n  /**\n   * @type {Object.<string, string>}\n   * @private\n   */\n  exports.LegacyProperties_ = (options.propertiesType !== undefined) &&  options.propertiesType;\n\n};\n\nolBase.inherits(exports, olFormatTextFeature);\n\n\n/**\n * @type {Object.<ol.geom.GeometryType, ngeo.format.FeatureHashStyleType>}\n * @private\n */\nexports.StyleTypes_ = {\n  'LineString': ngeoFormatFeatureHashStyleType.LINE_STRING,\n  'Point': ngeoFormatFeatureHashStyleType.POINT,\n  'Polygon': ngeoFormatFeatureHashStyleType.POLYGON,\n  'MultiLineString': ngeoFormatFeatureHashStyleType.LINE_STRING,\n  'MultiPoint': ngeoFormatFeatureHashStyleType.POINT,\n  'MultiPolygon': ngeoFormatFeatureHashStyleType.POLYGON\n};\n\n/**\n * @type {Object.<string, string>}\n * @private\n */\nexports.LegacyProperties_ = {};\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.readFeature;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.readGeometry;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.writeFeature;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.writeFeatures;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.writeGeometry;\n\n\n/**\n * Characters used to encode the coordinates. The characters \"~\", \"'\", \"(\"\n * and \")\" are not part of this character set, and used as separators (for\n * example to separate the coordinates from the feature properties).\n * @const\n * @private\n */\nexports.CHAR64_ =\n    '.-_!*ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghjkmnpqrstuvwxyz';\n\n\n/**\n * @const\n * @private\n */\nexports.ACCURACY_ = 0.1;\n\n\n/**\n * Get features's properties.\n * @param {ol.Feature} feature Feature.\n * @return {Object.<string, (string|number)>} The feature properties to\n * serialize.\n * @private\n */\nexports.defaultPropertiesFunction_ = function(feature) {\n  return feature.getProperties();\n};\n\n\n/**\n * Sign then encode a number.\n * @param {number} num Number.\n * @return {string} String.\n * @private\n */\nexports.encodeSignedNumber_ = function(num) {\n  let signedNum = num << 1;\n  if (num < 0) {\n    signedNum = ~(signedNum);\n  }\n  return exports.encodeNumber_(signedNum);\n};\n\n\n/**\n * Transform a number into a logical sequence of characters.\n * @param {number} num Number.\n * @return {string} String.\n * @private\n */\nexports.encodeNumber_ = function(num) {\n  let encodedNumber = '';\n  while (num >= 0x20) {\n    encodedNumber += exports.CHAR64_.charAt(\n      0x20 | (num & 0x1f));\n    num >>= 5;\n  }\n  encodedNumber += exports.CHAR64_.charAt(num);\n  return encodedNumber;\n};\n\n\n/**\n * For a type of geometry, transforms an array of {@link ol.style.Style} into\n * a logical sequence of characters and put the result into the given encoded\n * styles's array.\n * @param {Array.<ol.style.Style>} styles Styles.\n * @param {ol.geom.GeometryType} geometryType Geometry type.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStyles_ = function(styles, geometryType, encodedStyles) {\n  const styleType = exports.StyleTypes_[geometryType];\n  googAsserts.assert(styleType !== undefined);\n  for (let i = 0; i < styles.length; ++i) {\n    const style = styles[i];\n    const fillStyle = style.getFill();\n    const imageStyle = style.getImage();\n    const strokeStyle = style.getStroke();\n    const textStyle = style.getText();\n    if (styleType == ngeoFormatFeatureHashStyleType.POLYGON) {\n      if (fillStyle !== null) {\n        exports.encodeStylePolygon_(\n          fillStyle, strokeStyle, encodedStyles);\n      }\n    } else if (styleType == ngeoFormatFeatureHashStyleType.LINE_STRING) {\n      if (strokeStyle !== null) {\n        exports.encodeStyleLine_(strokeStyle, encodedStyles);\n      }\n    } else if (styleType == ngeoFormatFeatureHashStyleType.POINT) {\n      if (imageStyle !== null) {\n        exports.encodeStylePoint_(imageStyle, encodedStyles);\n      }\n    }\n    if (textStyle !== null) {\n      exports.encodeStyleText_(textStyle, encodedStyles);\n    }\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Stroke} into a logical sequence of\n * characters and put the result into the given encoded styles's array.\n * @param {ol.style.Stroke} strokeStyle Stroke style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStyleLine_ = function(strokeStyle, encodedStyles) {\n  exports.encodeStyleStroke_(strokeStyle, encodedStyles);\n};\n\n\n/**\n * Transform an {@link ol.style.Circle} into a logical sequence of\n * characters and put the result into the given encoded styles's array.\n * @param {ol.style.Image} imageStyle Image style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStylePoint_ = function(imageStyle, encodedStyles) {\n  if (imageStyle instanceof olStyleCircle) {\n    const radius = imageStyle.getRadius();\n    if (encodedStyles.length > 0) {\n      encodedStyles.push('\\'');\n    }\n    encodedStyles.push(encodeURIComponent(`pointRadius*${radius}`));\n    const fillStyle = imageStyle.getFill();\n    if (fillStyle !== null) {\n      exports.encodeStyleFill_(fillStyle, encodedStyles);\n    }\n    const strokeStyle = imageStyle.getStroke();\n    if (strokeStyle !== null) {\n      exports.encodeStyleStroke_(strokeStyle, encodedStyles);\n    }\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Fill} and an {@link ol.style.Stroke} into\n * a logical sequence of characters and put the result into the given\n * encoded styles's array.\n * @param {ol.style.Fill} fillStyle Fill style.\n * @param {ol.style.Stroke} strokeStyle Stroke style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStylePolygon_ = function(fillStyle, strokeStyle, encodedStyles) {\n  exports.encodeStyleFill_(fillStyle, encodedStyles);\n  if (strokeStyle !== null) {\n    exports.encodeStyleStroke_(strokeStyle, encodedStyles);\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Fill} and optionally its properties into\n * a logical sequence of characters and put the result into the given encoded\n * styles's array.\n * @param {ol.style.Fill} fillStyle Fill style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @param {string=} opt_propertyName Property name.\n * @private\n */\nexports.encodeStyleFill_ = function(fillStyle, encodedStyles, opt_propertyName) {\n  const propertyName = opt_propertyName !== undefined ?\n    opt_propertyName : 'fillColor';\n  const fillColor = fillStyle.getColor();\n  if (fillColor !== null) {\n    googAsserts.assert(Array.isArray(fillColor), 'only supporting fill colors');\n    const fillColorRgba = olColor.asArray(fillColor);\n    googAsserts.assert(Array.isArray(fillColorRgba), 'fill color must be an array');\n    const fillColorHex = ngeoUtils.rgbArrayToHex(fillColorRgba);\n    if (encodedStyles.length > 0) {\n      encodedStyles.push('\\'');\n    }\n    encodedStyles.push(\n      encodeURIComponent(`${propertyName}*${fillColorHex}`));\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Stroke} into a logical sequence of\n * characters and put the result into the given encoded styles's array.\n * @param {ol.style.Stroke} strokeStyle Stroke style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStyleStroke_ = function(strokeStyle, encodedStyles) {\n  const strokeColor = strokeStyle.getColor();\n  if (strokeColor !== null) {\n    googAsserts.assert(Array.isArray(strokeColor));\n    const strokeColorRgba = olColor.asArray(strokeColor);\n    googAsserts.assert(Array.isArray(strokeColorRgba), 'only supporting stroke colors');\n    const strokeColorHex = ngeoUtils.rgbArrayToHex(strokeColorRgba);\n    if (encodedStyles.length > 0) {\n      encodedStyles.push('\\'');\n    }\n    encodedStyles.push(encodeURIComponent(`strokeColor*${strokeColorHex}`));\n  }\n  const strokeWidth = strokeStyle.getWidth();\n  if (strokeWidth !== undefined) {\n    if (encodedStyles.length > 0) {\n      encodedStyles.push('\\'');\n    }\n    encodedStyles.push(encodeURIComponent(`strokeWidth*${strokeWidth}`));\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Text} into a logical sequence of characters and\n * put the result into the given encoded styles's array.\n * @param {ol.style.Text} textStyle Text style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStyleText_ = function(textStyle, encodedStyles) {\n  const fontStyle = textStyle.getFont();\n  if (fontStyle !== undefined) {\n    const font = fontStyle.split(' ');\n    if (font.length >= 3) {\n      if (encodedStyles.length > 0) {\n        encodedStyles.push('\\'');\n      }\n      encodedStyles.push(encodeURIComponent(`fontSize*${font[1]}`));\n    }\n  }\n  const fillStyle = textStyle.getFill();\n  if (fillStyle !== null) {\n    exports.encodeStyleFill_(\n      fillStyle, encodedStyles, 'fontColor');\n  }\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.LineString}.\n * @param {string} text Text.\n * @return {ol.geom.LineString} Line string.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readLineStringGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'l(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  const flatCoordinates = this.decodeCoordinates_(text);\n  const lineString = new olGeomLineString(null);\n  lineString.setFlatCoordinates(olGeomGeometryLayout.XY, flatCoordinates);\n  return lineString;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.MultiLineString}.\n * @param {string} text Text.\n * @return {ol.geom.MultiLineString} Line string.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readMultiLineStringGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'L(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  let flatCoordinates = [];\n  const ends = [];\n  const lineStrings = text.split('\\'');\n  for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n    flatCoordinates = this.decodeCoordinates_(lineStrings[i], flatCoordinates);\n    ends[i] = flatCoordinates.length;\n  }\n  const multiLineString = new olGeomMultiLineString(null);\n  multiLineString.setFlatCoordinates(\n    olGeomGeometryLayout.XY, flatCoordinates, ends);\n  return multiLineString;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.Point}.\n * @param {string} text Text.\n * @return {ol.geom.Point} Point.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readPointGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'p(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  const flatCoordinates = this.decodeCoordinates_(text);\n  googAsserts.assert(flatCoordinates.length === 2);\n  const point = new olGeomPoint(null);\n  point.setFlatCoordinates(olGeomGeometryLayout.XY, flatCoordinates);\n  return point;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.MultiPoint}.\n * @param {string} text Text.\n * @return {ol.geom.MultiPoint} MultiPoint.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readMultiPointGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'P(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  const flatCoordinates = this.decodeCoordinates_(text);\n  const multiPoint = new olGeomMultiPoint(null);\n  multiPoint.setFlatCoordinates(olGeomGeometryLayout.XY, flatCoordinates);\n  return multiPoint;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.Polygon}.\n * @param {string} text Text.\n * @return {ol.geom.Polygon} Polygon.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readPolygonGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'a(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  let flatCoordinates = [];\n  const ends = [];\n  const rings = text.split('\\'');\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    flatCoordinates = this.decodeCoordinates_(rings[i], flatCoordinates);\n    let end = flatCoordinates.length;\n    if (i === 0) {\n      flatCoordinates[end++] = flatCoordinates[0];\n      flatCoordinates[end++] = flatCoordinates[1];\n    } else {\n      flatCoordinates[end++] = flatCoordinates[ends[i - 1]];\n      flatCoordinates[end++] = flatCoordinates[ends[i - 1] + 1];\n    }\n    ends[i] = end;\n  }\n  const polygon = new olGeomPolygon(null);\n  polygon.setFlatCoordinates(olGeomGeometryLayout.XY, flatCoordinates, ends);\n  return polygon;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.MultiPolygon}.\n * @param {string} text Text.\n * @return {ol.geom.MultiPolygon} MultiPolygon.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readMultiPolygonGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'A(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  let flatCoordinates = [];\n  const endss = [];\n  const polygons = text.split(')(');\n  for (let i = 0, ii = polygons.length; i < ii; ++i) {\n    const rings = polygons[i].split('\\'');\n    const ends = endss[i] = [];\n    for (let j = 0, jj = rings.length; j < jj; ++j) {\n      flatCoordinates = this.decodeCoordinates_(rings[j], flatCoordinates);\n      let end = flatCoordinates.length;\n      if (j === 0) {\n        flatCoordinates[end++] = flatCoordinates[0];\n        flatCoordinates[end++] = flatCoordinates[1];\n      } else {\n        flatCoordinates[end++] = flatCoordinates[ends[j - 1]];\n        flatCoordinates[end++] = flatCoordinates[ends[j - 1] + 1];\n      }\n      ends[j] = end;\n    }\n  }\n  const multipolygon = new olGeomMultiPolygon(null);\n  multipolygon.setFlatCoordinates(\n    olGeomGeometryLayout.XY, flatCoordinates, endss);\n  return multipolygon;\n};\n\n\n/**\n * DEPRECATED - Use the `ngeo.misc.FeatureHelper` instead in combination with the\n * `setStyle: false` option.\n *\n * Read a logical sequence of characters and apply the decoded style on the\n * given feature.\n * @param {string} text Text.\n * @param {ol.Feature} feature Feature.\n * @private\n */\nexports.setStyleInFeature_ = function(text, feature) {\n  if (text == '') {\n    return;\n  }\n  const properties = exports.getStyleProperties_(text, feature);\n  const fillColor = properties['fillColor'];\n  const fontSize = properties['fontSize'];\n  const fontColor = properties['fontColor'];\n  const pointRadius = properties['pointRadius'];\n  const strokeColor = properties['strokeColor'];\n  const strokeWidth = properties['strokeWidth'];\n\n  let fillStyle = null;\n  if (fillColor !== undefined) {\n    fillStyle = new olStyleFill({\n      color: /** @type {Array<number>|string} */ (fillColor)\n    });\n  }\n  let strokeStyle = null;\n  if (strokeColor !== undefined && strokeWidth !== undefined) {\n    strokeStyle = new olStyleStroke({\n      color: /** @type {Array<number>|string} */ (strokeColor),\n      width: /** @type {number} */ (strokeWidth)\n    });\n  }\n  let imageStyle = null;\n  if (pointRadius !== undefined) {\n    imageStyle = new olStyleCircle({\n      radius: /** @type {number} */ (pointRadius),\n      fill: fillStyle,\n      stroke: strokeStyle\n    });\n    fillStyle = strokeStyle = null;\n  }\n  let textStyle = null;\n  if (fontSize !== undefined && fontColor !== undefined) {\n    textStyle = new olStyleText({\n      font: `${fontSize} sans-serif`,\n      fill: new olStyleFill({\n        color: /** @type {Array<number>|string} */ (fontColor)\n      })\n    });\n  }\n  const style = new olStyleStyle({\n    fill: fillStyle,\n    image: imageStyle,\n    stroke: strokeStyle,\n    text: textStyle\n  });\n  feature.setStyle(style);\n};\n\n\n/**\n * Read a logical sequence of characters and apply the decoded result as\n * style properties for the feature. Legacy keys are converted to the new ones\n * for compatibility.\n * @param {string} text Text.\n * @param {ol.Feature} feature Feature.\n * @private\n */\nexports.setStyleProperties_ = function(text, feature) {\n\n  const properties = exports.getStyleProperties_(text, feature);\n  const geometry = feature.getGeometry();\n\n  // Deal with legacy properties\n  if (geometry instanceof olGeomPoint) {\n    if (properties['isLabel'] ||\n        properties[ngeoFormatFeatureProperties.IS_TEXT]) {\n      delete properties['strokeColor'];\n      delete properties['fillColor'];\n    } else {\n      delete properties['fontColor'];\n      delete properties['fontSize'];\n    }\n  } else {\n    delete properties['fontColor'];\n\n    if (geometry instanceof olGeomLineString) {\n      delete properties['fillColor'];\n      delete properties['fillOpacity'];\n    }\n  }\n\n  // Convert font size from px to pt\n  if (properties['fontSize']) {\n    let fontSize = parseFloat(properties['fontSize']);\n    if (properties['fontSize'].indexOf('px') !== -1) {\n      fontSize = Math.round(fontSize / 1.333333);\n    }\n    properties['fontSize'] = fontSize;\n  }\n\n  // Convert legacy properties\n  const clone = {};\n  for (const key in properties) {\n    const value = properties[key];\n    if (exports.LegacyProperties_[key]) {\n      clone[exports.LegacyProperties_[key]] = value;\n    } else {\n      clone[key] = value;\n    }\n  }\n\n  feature.setProperties(clone);\n};\n\n\n/**\n * Cast values in the correct type depending on the property.\n * @param {string} key Key.\n * @param {string} value Value.\n * @return {number|boolean|string} The casted value corresponding to the key.\n * @private\n */\nexports.castValue_ = function(key, value) {\n  const numProperties = [\n    ngeoFormatFeatureProperties.ANGLE,\n    ngeoFormatFeatureProperties.OPACITY,\n    ngeoFormatFeatureProperties.SIZE,\n    ngeoFormatFeatureProperties.STROKE,\n    'pointRadius',\n    'strokeWidth'\n  ];\n  const boolProperties = [\n    ngeoFormatFeatureProperties.IS_CIRCLE,\n    ngeoFormatFeatureProperties.IS_RECTANGLE,\n    ngeoFormatFeatureProperties.IS_TEXT,\n    ngeoFormatFeatureProperties.SHOW_MEASURE,\n    ngeoFormatFeatureProperties.SHOW_LABEL,\n    'isCircle',\n    'isRectangle',\n    'isLabel',\n    'showMeasure',\n    'showLabel'\n  ];\n\n  if (olArray.includes(numProperties, key)) {\n    return +value;\n  } else if (olArray.includes(boolProperties, key)) {\n    return (value === 'true') ? true : false;\n  } else {\n    return value;\n  }\n};\n\n\n/**\n * From a logical sequence of characters, create and return an object of\n * style properties for a feature. The values are cast in the correct type\n * depending on the property. Some properties are also deleted when they don't\n * match the geometry of the feature.\n * @param {string} text Text.\n * @param {ol.Feature} feature Feature.\n * @return {Object.<string, boolean|number|string>} The style properties for\n *     the feature.\n * @private\n */\nexports.getStyleProperties_ = function(text, feature) {\n  const parts = text.split('\\'');\n  const properties = {};\n\n  for (let i = 0; i < parts.length; ++i) {\n    const part = decodeURIComponent(parts[i]);\n    const keyVal = part.split('*');\n    googAsserts.assert(keyVal.length === 2);\n    const key = keyVal[0];\n    const val = keyVal[1];\n\n    properties[key] = exports.castValue_(key, val);\n  }\n\n  return properties;\n};\n\n\n/**\n * Encode a {@link ol.geom.LineString} geometry into a logical sequence of\n * characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writeLineStringGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomLineString);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const end = flatCoordinates.length;\n  return `l(${this.encodeCoordinates_(flatCoordinates, stride, 0, end)})`;\n};\n\n\n/**\n * Encode a {@link ol.geom.MultiLineString} geometry into a logical sequence\n * of characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writeMultiLineStringGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomMultiLineString);\n  const ends = geometry.getEnds();\n  const lineStringCount = ends.length;\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  let offset = 0;\n  const textArray = ['L('];\n  for (let i = 0; i < lineStringCount; ++i) {\n    const end = ends[i];\n    const text = this.encodeCoordinates_(flatCoordinates, stride, offset, end);\n    if (i !== 0) {\n      textArray.push('\\'');\n    }\n    textArray.push(text);\n    offset = end;\n  }\n  textArray.push(')');\n  return textArray.join('');\n};\n\n\n/**\n * Encode a {@link ol.geom.Point} geometry into a logical sequence of\n * characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writePointGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomPoint);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const end = flatCoordinates.length;\n  return `p(${this.encodeCoordinates_(flatCoordinates, stride, 0, end)})`;\n};\n\n\n/**\n * Encode an {@link ol.geom.MultiPoint} geometry into a logical sequence\n * of characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writeMultiPointGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomMultiPoint);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const end = flatCoordinates.length;\n  return `P(${this.encodeCoordinates_(flatCoordinates, stride, 0, end)})`;\n};\n\n\n/**\n * Helper to encode an {@link ol.geom.Polygon} geometry.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} stride Stride.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {Array.<string>} textArray Text array.\n * @return {number} The new offset.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.encodeRings_ = function(flatCoordinates, stride, offset, ends, textArray) {\n  const linearRingCount = ends.length;\n  for (let i = 0; i < linearRingCount; ++i) {\n    // skip the \"closing\" point\n    const end = ends[i] - stride;\n    const text = this.encodeCoordinates_(flatCoordinates, stride, offset, end);\n    if (i !== 0) {\n      textArray.push('\\'');\n    }\n    textArray.push(text);\n    offset = ends[i];\n  }\n  return offset;\n};\n\n\n/**\n * Encode an {@link ol.geom.Polygon} geometry into a logical sequence\n * of characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writePolygonGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomPolygon);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const ends = geometry.getEnds();\n  const offset = 0;\n  const textArray = ['a('];\n  exports.encodeRings_.call(this,\n    flatCoordinates, stride, offset, ends, textArray);\n  textArray.push(')');\n  return textArray.join('');\n};\n\n\n/**\n * Encode an {@link ol.geom.MultiPoligon} geometry into a logical sequence of\n * characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writeMultiPolygonGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomMultiPolygon);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const endss = geometry.getEndss();\n  const polygonCount = endss.length;\n  let offset = 0;\n  const textArray = ['A'];\n  for (let i = 0; i < polygonCount; ++i) {\n    const ends = endss[i];\n    textArray.push('(');\n    offset = exports.encodeRings_.call(this,\n      flatCoordinates, stride, offset, ends, textArray);\n    textArray.push(')');\n  }\n  return textArray.join('');\n};\n\n\n/**\n * @const\n * @private\n * @type {Object.<string, function(string):ol.geom.Geometry>}\n */\nexports.GEOMETRY_READERS_ = {\n  'P': exports.readMultiPointGeometry_,\n  'L': exports.readMultiLineStringGeometry_,\n  'A': exports.readMultiPolygonGeometry_,\n  'l': exports.readLineStringGeometry_,\n  'p': exports.readPointGeometry_,\n  'a': exports.readPolygonGeometry_\n};\n\n\n/**\n * @const\n * @private\n * @type {Object.<string, function(ol.geom.Geometry):string>}\n */\nexports.GEOMETRY_WRITERS_ = {\n  'MultiLineString': exports.writeMultiLineStringGeometry_,\n  'MultiPoint': exports.writeMultiPointGeometry_,\n  'MultiPolygon': exports.writeMultiPolygonGeometry_,\n  'LineString': exports.writeLineStringGeometry_,\n  'Point': exports.writePointGeometry_,\n  'Polygon': exports.writePolygonGeometry_\n};\n\n\n/**\n * Read a logical sequence of characters and return (or complet then return)\n * an array of numbers. The coordinates are assumed to be in\n * two dimensions and in latitude, longitude order.\n * corresponding to a geometry's coordinates.\n * @param {string} text Text.\n * @param {Array.<number>=} opt_flatCoordinates Flat coordinates array.\n * @return {Array.<number>} Flat coordinates.\n * @private\n */\nexports.prototype.decodeCoordinates_ = function(text, opt_flatCoordinates) {\n  const len = text.length;\n  let index = 0;\n  const flatCoordinates = opt_flatCoordinates !== undefined ?\n    opt_flatCoordinates : [];\n  let i = flatCoordinates.length;\n  while (index < len) {\n    let b;\n    let shift = 0;\n    let result = 0;\n    do {\n      b = exports.CHAR64_.indexOf(text.charAt(index++));\n      result |= (b & 0x1f) << shift;\n      shift += 5;\n    } while (b >= 32);\n    const dx = ((result & 1) ? ~(result >> 1) : (result >> 1));\n    this.prevX_ += dx;\n    shift = 0;\n    result = 0;\n    do {\n      b = exports.CHAR64_.indexOf(text.charAt(index++));\n      result |= (b & 0x1f) << shift;\n      shift += 5;\n    } while (b >= 32);\n    const dy = ((result & 1) ? ~(result >> 1) : (result >> 1));\n    this.prevY_ += dy;\n    flatCoordinates[i++] = this.prevX_ * this.accuracy_;\n    flatCoordinates[i++] = this.prevY_ * this.accuracy_;\n  }\n  return flatCoordinates;\n};\n\n\n/**\n * Encode an array of number (corresponding to some coordinates) into a\n * logical sequence of characters. The coordinates are assumed to be in\n * two dimensions and in latitude, longitude order.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} stride Stride.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @return {string} String.\n * @private\n */\nexports.prototype.encodeCoordinates_ = function(flatCoordinates, stride, offset, end) {\n  let encodedCoordinates = '';\n  for (let i = offset; i < end; i += stride) {\n    let x = flatCoordinates[i];\n    let y = flatCoordinates[i + 1];\n    x = Math.floor(x / this.accuracy_);\n    y = Math.floor(y / this.accuracy_);\n    const dx = x - this.prevX_;\n    const dy = y - this.prevY_;\n    this.prevX_ = x;\n    this.prevY_ = y;\n    encodedCoordinates += exports.encodeSignedNumber_(dx) +\n        exports.encodeSignedNumber_(dy);\n  }\n  return encodedCoordinates;\n};\n\n\n/**\n * Read a feature from a logical sequence of characters.\n * @param {string} text Text.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.Feature} Feature.\n * @protected\n * @override\n */\nexports.prototype.readFeatureFromText = function(text, opt_options) {\n  googAsserts.assert(text.length > 2);\n  googAsserts.assert(text[1] === '(');\n  googAsserts.assert(text[text.length - 1] === ')');\n  let splitIndex = text.indexOf('~');\n  const geometryText = splitIndex >= 0 ?\n    `${text.substring(0, splitIndex)})` : text;\n  const geometry = this.readGeometryFromText(geometryText, opt_options);\n  const feature = new olFeature(geometry);\n  if (splitIndex >= 0) {\n    const attributesAndStylesText = text.substring(\n      splitIndex + 1, text.length - 1);\n    splitIndex = attributesAndStylesText.indexOf('~');\n    const attributesText = splitIndex >= 0 ?\n      attributesAndStylesText.substring(0, splitIndex) :\n      attributesAndStylesText;\n    if (attributesText != '') {\n      const parts = attributesText.split('\\'');\n      for (let i = 0; i < parts.length; ++i) {\n        const part = decodeURIComponent(parts[i]);\n        const keyVal = part.split('*');\n        googAsserts.assert(keyVal.length === 2);\n        let key = keyVal[0];\n        const value = keyVal[1];\n        if (!this.setStyle_ && exports.LegacyProperties_[key]) {\n          key = exports.LegacyProperties_[key];\n        }\n        feature.set(key, exports.castValue_(key, value));\n      }\n    }\n    if (splitIndex >= 0) {\n      const stylesText = attributesAndStylesText.substring(splitIndex + 1);\n      if (this.setStyle_) {\n        exports.setStyleInFeature_(stylesText, feature);\n      } else {\n        exports.setStyleProperties_(stylesText, feature);\n      }\n    }\n  }\n  return feature;\n};\n\n\n/**\n * Read multiple features from a logical sequence of characters.\n * @param {string} text Text.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {Array.<ol.Feature>} Features.\n * @protected\n * @override\n */\nexports.prototype.readFeaturesFromText = function(text, opt_options) {\n  googAsserts.assert(text[0] === 'F');\n  /** @type {Array.<ol.Feature>} */\n  const features = [];\n  text = text.substring(1);\n  while (text.length > 0) {\n    const index = text.indexOf(')');\n    googAsserts.assert(index >= 0);\n    const feature = this.readFeatureFromText(\n      text.substring(0, index + 1), opt_options);\n    features.push(feature);\n    text = text.substring(index + 1);\n  }\n  return features;\n};\n\n\n/**\n * Read a geometry from a logical sequence of characters.\n * @param {string} text Text.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.geom.Geometry} Geometry.\n * @protected\n * @override\n */\nexports.prototype.readGeometryFromText = function(text, opt_options) {\n  const geometryReader = exports.GEOMETRY_READERS_[text[0]];\n  googAsserts.assert(geometryReader !== undefined);\n  this.prevX_ = 0;\n  this.prevY_ = 0;\n  return geometryReader.call(this, text);\n};\n\n\n/**\n * Encode a feature into a logical sequence of characters.\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {string} Encoded feature.\n * @protected\n * @override\n */\nexports.prototype.writeFeatureText = function(feature, opt_options) {\n  const /** @type {Array.<string>} */ encodedParts = [];\n\n  // encode geometry\n\n  let encodedGeometry = '';\n  const geometry = feature.getGeometry();\n  if (geometry) {\n    encodedGeometry = this.writeGeometryText(geometry, opt_options);\n  }\n\n  if (encodedGeometry.length > 0) {\n    // remove the final bracket\n    googAsserts.assert(encodedGeometry[encodedGeometry.length - 1] === ')');\n    encodedGeometry = encodedGeometry.substring(0, encodedGeometry.length - 1);\n    encodedParts.push(encodedGeometry);\n  }\n\n  // encode properties\n\n  const /** @type {Array.<string>} */ encodedProperties = [];\n  const propFunction = this.propertiesFunction_(feature);\n  for (const key in propFunction) {\n    const value = propFunction[key];\n    if (value !== undefined && value !== null && key !== feature.getGeometryName()) {\n      if (encodedProperties.length !== 0) {\n        encodedProperties.push('\\'');\n      }\n      const encoded = encodeURIComponent(\n        `${key.replace(/[()'*]/g, '_')}*${\n          value.toString().replace(/[()'*]/g, '_')}`);\n      encodedProperties.push(encoded);\n    }\n  }\n\n  if (encodedProperties.length > 0) {\n    encodedParts.push('~');\n    Array.prototype.push.apply(encodedParts, encodedProperties);\n  }\n\n  // encode styles\n\n  if (this.encodeStyles_) {\n    const styleFunction = feature.getStyleFunction();\n    if (styleFunction !== undefined) {\n      let styles = styleFunction.call(feature, 0);\n      if (styles !== null) {\n        const encodedStyles = [];\n        styles = Array.isArray(styles) ? styles : [styles];\n        exports.encodeStyles_(\n          styles, geometry.getType(), encodedStyles);\n        if (encodedStyles.length > 0) {\n          encodedParts.push('~');\n          Array.prototype.push.apply(encodedParts, encodedStyles);\n        }\n      }\n    }\n  }\n\n  // append the closing bracket and return the encoded feature\n\n  encodedParts.push(')');\n  return encodedParts.join('');\n};\n\n\n/**\n * Encode an array of features into a logical sequence of characters.\n * @param {Array.<ol.Feature>} features Feature.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {string} Encoded features.\n * @protected\n * @override\n */\nexports.prototype.writeFeaturesText = function(features, opt_options) {\n  const textArray = [];\n  if (features.length > 0) {\n    textArray.push('F');\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      textArray.push(this.writeFeatureText(features[i], opt_options));\n    }\n  }\n  return textArray.join('');\n};\n\n\n/**\n * Encode a geometry into a logical sequence of characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {string} Encoded geometry.\n * @protected\n * @override\n */\nexports.prototype.writeGeometryText = function(geometry, opt_options) {\n  const geometryWriter = exports.GEOMETRY_WRITERS_[\n    geometry.getType()];\n  googAsserts.assert(geometryWriter !== undefined);\n  const transformedGeometry = /** @type {ol.geom.Geometry} */\n      (olFormatFeature.transformWithOptions(geometry, true, opt_options));\n  this.prevX_ = 0;\n  this.prevY_ = 0;\n  return geometryWriter.call(this, transformedGeometry);\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/FeatureHash.js","/**\n * @module ngeo.format.FeatureHashStyleType\n */\n/**\n * @enum {string}\n * @export\n */\nconst exports = {\n  LINE_STRING: 'LineString',\n  POINT: 'Point',\n  POLYGON: 'Polygon'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/FeatureHashStyleType.js","/**\n * @module ol/format/TextFeature\n */\nimport {inherits} from '../index.js';\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for text feature formats.\n *\n * @constructor\n * @abstract\n * @extends {ol.format.Feature}\n */\nconst TextFeature = function() {\n  FeatureFormat.call(this);\n};\n\ninherits(TextFeature, FeatureFormat);\n\n\n/**\n * @param {Document|Node|Object|string} source Source.\n * @return {string} Text.\n */\nfunction getText(source) {\n  if (typeof source === 'string') {\n    return source;\n  } else {\n    return '';\n  }\n}\n\n\n/**\n * @inheritDoc\n */\nTextFeature.prototype.getType = function() {\n  return FormatType.TEXT;\n};\n\n\n/**\n * @inheritDoc\n */\nTextFeature.prototype.readFeature = function(source, opt_options) {\n  return this.readFeatureFromText(getText(source), this.adaptOptions(opt_options));\n};\n\n\n/**\n * @abstract\n * @param {string} text Text.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @protected\n * @return {ol.Feature} Feature.\n */\nTextFeature.prototype.readFeatureFromText = function(text, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nTextFeature.prototype.readFeatures = function(source, opt_options) {\n  return this.readFeaturesFromText(getText(source), this.adaptOptions(opt_options));\n};\n\n\n/**\n * @abstract\n * @param {string} text Text.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @protected\n * @return {Array.<ol.Feature>} Features.\n */\nTextFeature.prototype.readFeaturesFromText = function(text, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nTextFeature.prototype.readGeometry = function(source, opt_options) {\n  return this.readGeometryFromText(getText(source), this.adaptOptions(opt_options));\n};\n\n\n/**\n * @abstract\n * @param {string} text Text.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @protected\n * @return {ol.geom.Geometry} Geometry.\n */\nTextFeature.prototype.readGeometryFromText = function(text, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nTextFeature.prototype.readProjection = function(source) {\n  return this.readProjectionFromText(getText(source));\n};\n\n\n/**\n * @param {string} text Text.\n * @protected\n * @return {ol.proj.Projection} Projection.\n */\nTextFeature.prototype.readProjectionFromText = function(text) {\n  return this.defaultDataProjection;\n};\n\n\n/**\n * @inheritDoc\n */\nTextFeature.prototype.writeFeature = function(feature, opt_options) {\n  return this.writeFeatureText(feature, this.adaptOptions(opt_options));\n};\n\n\n/**\n * @abstract\n * @param {ol.Feature} feature Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @protected\n * @return {string} Text.\n */\nTextFeature.prototype.writeFeatureText = function(feature, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nTextFeature.prototype.writeFeatures = function(features, opt_options) {\n  return this.writeFeaturesText(features, this.adaptOptions(opt_options));\n};\n\n\n/**\n * @abstract\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @protected\n * @return {string} Text.\n */\nTextFeature.prototype.writeFeaturesText = function(features, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nTextFeature.prototype.writeGeometry = function(geometry, opt_options) {\n  return this.writeGeometryText(geometry, this.adaptOptions(opt_options));\n};\n\n\n/**\n * @abstract\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @protected\n * @return {string} Text.\n */\nTextFeature.prototype.writeGeometryText = function(geometry, opt_options) {};\nexport default TextFeature;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/TextFeature.js\n// module id = 357\n// module chunks = 5","/**\n * @module ol/source/XYZ\n */\nimport {inherits} from '../index.js';\nimport TileImage from '../source/TileImage.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case,\n * {@link ol.source.TileImage} can be used with a `tileUrlFunction`\n * such as:\n *\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *        coordinate[1] + '/' + coordinate[2] + '.png';\n *    }\n *\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.XYZOptions=} opt_options XYZ options.\n * @api\n */\nconst XYZ = function(opt_options) {\n  const options = opt_options || {};\n  const projection = options.projection !== undefined ?\n    options.projection : 'EPSG:3857';\n\n  const tileGrid = options.tileGrid !== undefined ? options.tileGrid :\n    _ol_tilegrid_.createXYZ({\n      extent: _ol_tilegrid_.extentFromProjection(projection),\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize\n    });\n\n  TileImage.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    opaque: options.opaque,\n    projection: projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileGrid: tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n};\n\ninherits(XYZ, TileImage);\nexport default XYZ;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/XYZ.js\n// module id = 4\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24"],"sourceRoot":""}