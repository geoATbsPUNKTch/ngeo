{"version":3,"sources":["webpack:///./node_modules/openlayers/src/ol/source/common.js","webpack:///./node_modules/openlayers/src/ol/source/WMSServerType.js","webpack:///./src/source/AsitVD.js","webpack:///./node_modules/openlayers/src/ol/Image.js","webpack:///./node_modules/openlayers/src/ol/source/ImageWMS.js","webpack:///./src/CustomEvent.js","webpack:///./node_modules/openlayers/src/ol/source/TileWMS.js","webpack:///./src/datasource/DataSources.js","webpack:///./src/datasource/DataSource.js","webpack:///./examples/asitvd.js","webpack:///./src/map/FeatureOverlayMgr.js","webpack:///./src/goog.asserts.js","webpack:///./src/map/module.js","webpack:///./src/map/BackgroundLayerMgr.js","webpack:///./src/map/directive.js","webpack:///./src/datasource/SyncDataSourcesMap.js","webpack:///./src/map/FeatureOverlay.js","webpack:///./src/map/recenter.js","webpack:///./src/map/resizemap.js","webpack:///./src/map/scaleselector.js"],"names":["__webpack_exports__","CARMENTA_SERVER","GEOSERVER","MAPSERVER","QGIS","__webpack_require__","asitVDResolutions","asitVDTileGrid","default","extent","resolutions","matrixIds","map","value","index","exports","options","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","attributions","url","projection","requestEncoding","layer","style","matrixSet","format","tileGrid","_inherits","_WMTS2","_ol_Image_","resolution","pixelRatio","src","crossOrigin","imageLoadFunction","ImageBase","ImageState","IDLE","src_","image_","Image","imageListenerKeys_","state","imageLoadFunction_","ol","prototype","getImage","handleImageError_","ERROR","unlistenImage_","changed","handleImageLoad_","undefined","ol_extent","height","LOADED","load","LOADING","events","listenOnce","EventType","LOAD","setImage","image","forEach","unlistenByKey","ol_Image","ImageWMS","opt_options","source_Image","crossOrigin_","url_","defaultImageLoadFunction","params_","params","v13_","updateV13_","serverType_","hidpi_","hidpi","imageSize_","renderedRevision_","ratio_","ratio","GETFEATUREINFO_IMAGE_SIZE_","getGetFeatureInfoUrl","coordinate","projectionObj","proj","sourceProjectionObj","getProjection","reproj","calculateSourceResolution","baseParams","SERVICE","VERSION","common","REQUEST","FORMAT","TRANSPARENT","QUERY_LAYERS","obj","x","Math","floor","y","getRequestUrl_","getParams","getImageInternal","findNearestResolution","imageResolution","center","viewWidth","ceil","viewHeight","viewExtent","requestWidth","requestHeight","requestExtent","getRevision","getResolution","getPixelRatio","getExtent","round","listen","CHANGE","handleImageChange","getImageLoadFunction","size","asserts","getCode","WMSServerType","dpi","axisOrientation","getAxisOrientation","bbox","substr","join","uri","getUrl","setImageLoadFunction","setUrl","updateParams","version","string","compareVersions","olBase","_Event","type","detail","arguments","length","_Event2","inherits","__WEBPACK_IMPORTED_MODULE_13__uri_js__","TileWMS","transparent","__WEBPACK_IMPORTED_MODULE_9__source_TileImage_js__","cacheSize","opaque","reprojectionErrorThreshold","tileClass","tileLoadFunction","urls","wrapX","transition","gutter_","gutter","tmpExtent_","__WEBPACK_IMPORTED_MODULE_3__extent_js__","setKey","getKeyForParams_","__WEBPACK_IMPORTED_MODULE_1__index_js__","__WEBPACK_IMPORTED_MODULE_6__proj_js__","getTileGrid","getTileGridForProjection","tileCoord","getTileCoordForCoordAndResolution","getResolutions","tileResolution","tileExtent","getTileCoordExtent","tileSize","__WEBPACK_IMPORTED_MODULE_8__size_js__","toSize","getTileSize","tmpSize","buffer","__WEBPACK_IMPORTED_MODULE_7__reproj_js__","__WEBPACK_IMPORTED_MODULE_0__common_js__","__WEBPACK_IMPORTED_MODULE_4__obj_js__","getGutterInternal","__WEBPACK_IMPORTED_MODULE_10__source_WMSServerType_js__","__WEBPACK_IMPORTED_MODULE_2__asserts_js__","tmp","__WEBPACK_IMPORTED_MODULE_5__math_js__","__WEBPACK_IMPORTED_MODULE_11__tilecoord_js__","hash","getTilePixelRatio","i","res","key","fixedTileUrlFunction","scale","__WEBPACK_IMPORTED_MODULE_12__string_js__","module","angular","_Collection2","_index2","requires","push","name","_index","inRange_","inRange","visible_","visible","attributes","id_","id","identifierAttribute_","identifierAttribute","maxResolution_","maxResolution","minResolution_","minResolution","name_","_createClass","get","set","app","ngeo","_module2","MainController","_Map2","layers","_Tile2","source","_AsitVD2","view","_View2","zoom","controller","olObj","featureUidToGroupIndex_","groups_","source_","_Vector4","useSpatialIndex","layer_","_Vector2","styleFunction_","bind","updateWhileAnimating","updateWhileInteracting","addFeature","feature","groupIndex","_asserts2","assert","featureUid","getUid","toString","features","removeFeature","clear","group","isEmpty","getLayer","getFeatureOverlay","styleFunction","_Style2","defaultFunction","_FeatureOverlay2","init","setMap","setStyle","createFunction","service","defaultMessage","defaultArgs","givenMessage","givenArgs","message","args","e","AssertionError","errorHandler_","errorHandler","ENABLE_ASSERTS","condition","opt_message","var_args","doAssertFailure_","Array","slice","goog","isNumber","typeOf","isString","isFunction","isObject","isArray","isBoolean","nodeType","dom","NodeType","ELEMENT","getType_","fail","Function","displayName","constructor","_typeof","_BackgroundLayerMgr2","_directive2","_FeatureOverlayMgr2","_recenter2","_resizemap2","_scaleselector2","_Observable2","mapUids_","getLayers","item","mapUid","previous","setAt","removeAt","insertAt","event","_CustomEvent2","current","dispatchEvent","updateDimensions","dimensions","baseBgLayer","getArray","assertInstanceof","_Layer2","hasUpdates","updatedDimensions","getSource","refresh","_SyncDataSourcesMap2","directive_","$window","ngeoSyncDataSourcesMap","restrict","link","scope","element","attrs","prop","$eval","setTarget","manageResizeProp","resizeTransitionProp","resizeTransition","_events2","start","Date","now","loop","adjustSize","updateSize","renderSync","requestAnimationFrame","directive","ngeoDataSources","ngeoDataSources_","map_","listenerKeys_","handleDataSourcesAdd_","$inject","getView","handleViewResolutionChange_","assertNumber","syncDataSourcesToResolution_","unByKey","evt","target","_this","dataSource","syncDataSourceToResolution_","supportsDynamicInRange","_DataSource2","unbindMap_","bindMap_","_DataSources2","manager","manager_","features_","index_","setFeatures","unlisten","handleFeatureAdd_","handleFeatureRemove_","$scope","$element","$attrs","mapExpr","recenter","attr","getSize","fit","setZoom","on","$","selected","selectedIndex","stateExpr","animationDelayKey","animationDelay","$watch","newVal","oldVal","cancelAnimationFrame","olArray","templateUrl","baseModuleTemplateUrl","ngeoScaleselectorTemplateUrl","ScaleselectorController_","scalesExpr","scales","zoomLevels","keys","newLength","Number","sort","numberSafeCompareFunction","optionsExpr","getOptions_","$scope_","resolutionChangeKey_","currentScale","currentZoom","getZoom","getScale","handleViewChange_","registerResolutionChangeListener_","dropup","changeZoom","handleResolutionChange_","_this2","$applyAsync"],"mappings":"mDAGAA,EAAA,2CCOAA,EAAA,GACAC,gBAAA,iBACAC,UAAA,YACAC,UAAA,YACAC,KAAA,2FCXA,QAAAC,EAAA,wDAOA,IAAMC,GACJ,IAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAClE,IAAM,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IAO1DC,EAAiB,MAfvBF,EAAA,MAeuBG,UACrBC,QAAS,KAAQ,IAAO,IAAQ,MAChCC,YAAaJ,EACbK,UAAWL,EAAkBM,IAAI,SAACC,EAAOC,GAAR,SAAqBA,MASlDC,cAKJ,SAAAA,EAAYC,GAAS,mGAAAC,CAAAC,KAAAH,oKAAAI,CAAAD,MAAAH,EAAAK,WAAAC,OAAAC,eAAAP,IAAAQ,KAAAL,MAEjBM,aAAc,sEACdC,IAAK,6GAELC,WAAY,aACZC,gBAAiB,OACjBC,MAAOZ,EAAQY,MACfC,MAAO,UACPC,UAAW,QACXC,OAAQ,YACRC,SAAUzB,KAhBV,gUAAA0B,CAAAlB,EAAAmB,EAAA1B,SAAAO,eAsBSA,4ICjCf,MAAAoB,EAAA,SAAA1B,EAAA2B,EAAAC,EAAAC,EAAAC,EAAAC,GAEAC,EAAA,EAAAlB,KAAAL,KAAAT,EAAA2B,EAAAC,EAAAK,EAAA,EAAAC,MAMAzB,KAAA0B,KAAAN,EAMApB,KAAA2B,OAAA,IAAAC,MACA,OAAAP,IACArB,KAAA2B,OAAAN,eAOArB,KAAA6B,mBAAA,KAMA7B,KAAA8B,MAAAN,EAAA,EAAAC,KAMAzB,KAAA+B,mBAAAT,GAIAnB,OAAA6B,EAAA,SAAA7B,CAAAc,EAAAM,EAAA,GAOAN,EAAAgB,UAAAC,SAAA,WACA,OAAAlC,KAAA2B,QASAV,EAAAgB,UAAAE,kBAAA,WACAnC,KAAA8B,MAAAN,EAAA,EAAAY,MACApC,KAAAqC,iBACArC,KAAAsC,WASArB,EAAAgB,UAAAM,iBAAA,gBACAC,IAAAxC,KAAAkB,aACAlB,KAAAkB,WAAAf,OAAAsC,EAAA,UAAAtC,CAAAH,KAAAT,QAAAS,KAAA2B,OAAAe,QAEA1C,KAAA8B,MAAAN,EAAA,EAAAmB,OACA3C,KAAAqC,iBACArC,KAAAsC,WAWArB,EAAAgB,UAAAW,KAAA,WACA5C,KAAA8B,OAAAN,EAAA,EAAAC,MAAAzB,KAAA8B,OAAAN,EAAA,EAAAY,QACApC,KAAA8B,MAAAN,EAAA,EAAAqB,QACA7C,KAAAsC,UACAtC,KAAA6B,oBACAiB,EAAA,QAAAC,WAAA/C,KAAA2B,OAAAqB,EAAA,EAAAZ,MACApC,KAAAmC,kBAAAnC,MACA8C,EAAA,QAAAC,WAAA/C,KAAA2B,OAAAqB,EAAA,EAAAC,KACAjD,KAAAuC,iBAAAvC,OAEAA,KAAA+B,mBAAA/B,UAAA0B,QAQAT,EAAAgB,UAAAiB,SAAA,SAAAC,GACAnD,KAAA2B,OAAAwB,GASAlC,EAAAgB,UAAAI,eAAA,WACArC,KAAA6B,mBAAAuB,QAAAN,EAAA,QAAAO,eACArD,KAAA6B,mBAAA,MAEA,IAAAyB,EAAA,gEC5GA,MAAAC,EAAA,SAAAC,GAEA,MAAA1D,EAAA0D,MAEAC,EAAA,QAAApD,KAAAL,MACAM,aAAAR,EAAAQ,aACAE,WAAAV,EAAAU,WACAhB,YAAAM,EAAAN,cAOAQ,KAAA0D,kBACAlB,IAAA1C,EAAAuB,YAAAvB,EAAAuB,YAAA,KAMArB,KAAA2D,KAAA7D,EAAAS,IAMAP,KAAA+B,wBAAAS,IAAA1C,EAAAwB,kBACAxB,EAAAwB,kBAAAmC,EAAA,QAAAG,yBAMA5D,KAAA6D,QAAA/D,EAAAgE,WAMA9D,KAAA+D,MAAA,EACA/D,KAAAgE,aAMAhE,KAAAiE,YAAkEnE,EAAA,WAMlEE,KAAAkE,YAAA1B,IAAA1C,EAAAqE,OAAArE,EAAAqE,MAMAnE,KAAA2B,OAAA,KAMA3B,KAAAoE,YAAA,KAMApE,KAAAqE,kBAAA,EAMArE,KAAAsE,YAAA9B,IAAA1C,EAAAyE,MAAAzE,EAAAyE,MAAA,KAIApE,OAAA6B,EAAA,SAAA7B,CAAAoD,EAAAE,EAAA,SAQAF,EAAAiB,4BAAA,SAiBAjB,EAAAtB,UAAAwC,qBAAA,SAAAC,EAAAxD,EAAAV,EAAAsD,GACA,QAAAtB,IAAAxC,KAAA2D,KACA,OAEA,MAAAgB,EAAAxE,OAAAyE,EAAA,IAAAzE,CAAAK,GACAqE,EAAA7E,KAAA8E,gBAEAD,OAAAF,IACAzD,EAAA6D,EAAA,EAAAC,0BAAAH,EAAAF,EAAAD,EAAAxD,GACAwD,EAAAvE,OAAAyE,EAAA,UAAAzE,CAAAuE,EAAAC,EAAAE,IAGA,MAAAtF,EAAAY,OAAAsC,EAAA,kBAAAtC,CAAAuE,EAAAxD,EAAA,EACAqC,EAAAiB,4BAEAS,GACAC,QAAA,MACAC,QAAAC,EAAA,EACAC,QAAA,iBACAC,OAAA,YACAC,aAAA,EACAC,aAAAxF,KAAA6D,QAAA,QAEA1D,OAAAsF,EAAA,OAAAtF,CAAA8E,EAAAjF,KAAA6D,QAAAC,GAEA,MAAA4B,EAAAC,KAAAC,OAAAlB,EAAA,GAAAnF,EAAA,IAAA2B,GACA2E,EAAAF,KAAAC,OAAArG,EAAA,GAAAmF,EAAA,IAAAxD,GAIA,OAHA+D,EAAAjF,KAAA+D,KAAA,SAAA2B,EACAT,EAAAjF,KAAA+D,KAAA,SAAA8B,EAEA7F,KAAA8F,eACAvG,EAAAgE,EAAAiB,2BACA,EAAAK,GAAAF,EAAAM,IAUA1B,EAAAtB,UAAA8D,UAAA,WACA,OAAA/F,KAAA6D,SAOAN,EAAAtB,UAAA+D,iBAAA,SAAAzG,EAAA2B,EAAAC,EAAAX,GAEA,QAAAgC,IAAAxC,KAAA2D,KACA,YAGAzC,EAAAlB,KAAAiG,sBAAA/E,GAEA,GAAAC,GAAAnB,KAAAkE,aAAA1B,IAAAxC,KAAAiE,cACA9C,EAAA,GAGA,MAAA+E,EAAAhF,EAAAC,EAEAgF,EAAAhG,OAAAsC,EAAA,UAAAtC,CAAAZ,GACA6G,EAAAT,KAAAU,KAAAlG,OAAAsC,EAAA,SAAAtC,CAAAZ,GAAA2G,GACAI,EAAAX,KAAAU,KAAAlG,OAAAsC,EAAA,UAAAtC,CAAAZ,GAAA2G,GACAK,EAAApG,OAAAsC,EAAA,kBAAAtC,CAAAgG,EAAAD,EAAA,GACAE,EAAAE,IACAE,EAAAb,KAAAU,KAAArG,KAAAsE,OAAAnE,OAAAsC,EAAA,SAAAtC,CAAAZ,GAAA2G,GACAO,EAAAd,KAAAU,KAAArG,KAAAsE,OAAAnE,OAAAsC,EAAA,UAAAtC,CAAAZ,GAAA2G,GACAQ,EAAAvG,OAAAsC,EAAA,kBAAAtC,CAAAgG,EAAAD,EAAA,GACAM,EAAAC,IAEAtD,EAAAnD,KAAA2B,OACA,GAAAwB,GACAnD,KAAAqE,mBAAArE,KAAA2G,eACAxD,EAAAyD,iBAAA1F,GACAiC,EAAA0D,iBAAA1F,GACAhB,OAAAsC,EAAA,eAAAtC,CAAAgD,EAAA2D,YAAAP,GACA,OAAApD,EAGA,MAAAW,GACAoB,QAAA,MACAC,QAAAC,EAAA,EACAC,QAAA,SACAC,OAAA,YACAC,aAAA,GAEApF,OAAAsF,EAAA,OAAAtF,CAAA2D,EAAA9D,KAAA6D,SAEA7D,KAAAoE,WAAA,GAAAuB,KAAAoB,MAAA5G,OAAAsC,EAAA,SAAAtC,CAAAuG,GAAAR,GACAlG,KAAAoE,WAAA,GAAAuB,KAAAoB,MAAA5G,OAAAsC,EAAA,UAAAtC,CAAAuG,GAAAR,GAEA,MAAA3F,EAAAP,KAAA8F,eAAAY,EAAA1G,KAAAoE,WAAAjD,EACAX,EAAAsD,GAUA,OARA9D,KAAA2B,OAAA,IAAA2B,EAAAoD,EAAAxF,EAAAC,EACAZ,EAAAP,KAAA0D,aAAA1D,KAAA+B,oBAEA/B,KAAAqE,kBAAArE,KAAA2G,cAEA7D,EAAA,QAAAkE,OAAAhH,KAAA2B,OAAAqB,EAAA,EAAAiE,OACAjH,KAAAkH,kBAAAlH,MAEAA,KAAA2B,QAUA4B,EAAAtB,UAAAkF,qBAAA,WACA,OAAAnH,KAAA+B,oBAaAwB,EAAAtB,UAAA6D,eAAA,SAAAvG,EAAA6H,EAAAjG,EAAAX,EAAAsD,GAUA,GARA3D,OAAAkH,EAAA,EAAAlH,MAAAqC,IAAAxC,KAAA2D,KAAA,GAEAG,EAAA9D,KAAA+D,KAAA,aAAAvD,EAAA8G,UAEA,WAAAtH,KAAA6D,UACAC,EAAA,WAGA,GAAA3C,EACA,OAAAnB,KAAAiE,aACA,KAAAsD,EAAA,EAAAvI,UACA,MAAAwI,EAAA,GAAArG,EAAA,KACA,mBAAA2C,EACAA,EAAA,wBAAwC0D,EAExC1D,EAAA,sBAAA0D,EAEA,MACA,KAAAD,EAAA,EAAAtI,UACA6E,EAAA,kBAAA3C,EACA,MACA,KAAAoG,EAAA,EAAAxI,gBACA,KAAAwI,EAAA,EAAArI,KACA4E,EAAA,OAAA3C,EACA,MACA,QACAhB,OAAAkH,EAAA,EAAAlH,EAAA,KAKA2D,EAAA,MAAAsD,EAAA,GACAtD,EAAA,OAAAsD,EAAA,GAEA,MAAAK,EAAAjH,EAAAkH,qBACA,IAAAC,EAQA,OANAA,EADA3H,KAAA+D,MAAA,MAAA0D,EAAAG,OAAA,MACArI,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEAA,EAEAuE,EAAA,KAAA6D,EAAAE,KAAA,KAEA1H,OAAA2H,EAAA,aAAA3H,CAAwCH,KAAA,KAAA8D,IASxCP,EAAAtB,UAAA8F,OAAA,WACA,OAAA/H,KAAA2D,MASAJ,EAAAtB,UAAA+F,qBAAA,SACA1G,GACAtB,KAAA2B,OAAA,KACA3B,KAAA+B,mBAAAT,EACAtB,KAAAsC,WASAiB,EAAAtB,UAAAgG,OAAA,SAAA1H,GACAA,GAAAP,KAAA2D,OACA3D,KAAA2D,KAAApD,EACAP,KAAA2B,OAAA,KACA3B,KAAAsC,YAUAiB,EAAAtB,UAAAiG,aAAA,SAAApE,GACA3D,OAAAsF,EAAA,OAAAtF,CAAAH,KAAA6D,QAAAC,GACA9D,KAAAgE,aACAhE,KAAA2B,OAAA,KACA3B,KAAAsC,WAOAiB,EAAAtB,UAAA+B,WAAA,WACA,MAAAmE,EAAAnI,KAAA6D,QAAA,SAAAuB,EAAA,EACApF,KAAA+D,KAAAqE,EAAA,QAAAC,gBAAAF,EAAA,WAEArJ,EAAA,4FChXA,MAAYwJ,0JAAZnJ,EAAA,IACAoJ,EAAApJ,EAAA,wCASA,IAAMU,EAAU,SAAS2I,GAAmB,IAAbC,EAAaC,UAAAC,OAAA,QAAAnG,IAAAkG,UAAA,GAAAA,UAAA,MAE1CE,EAAAtJ,QAAce,KAAKL,KAAMwI,GAKzBxI,KAAKyI,OAASA,GAIhBH,EAAOO,SAAShJ,EAAhB+I,EAAAtJ,mBAGeO,4LC3BfiJ,EAAA3J,EAAA,IA4BA,MAAA4J,EAAA,SAAAvF,GAEA,MAAA1D,EAAA0D,MAEAM,EAAAhE,EAAAgE,WAEAkF,IAAA,gBAAAlF,MAAA,YAEAmF,EAAA,EAAA5I,KAAAL,MACAM,aAAAR,EAAAQ,aACA4I,UAAApJ,EAAAoJ,UACA7H,YAAAvB,EAAAuB,YACA8H,QAAAH,EACAxI,WAAAV,EAAAU,WACA4I,2BAAAtJ,EAAAsJ,2BACAC,UAAAvJ,EAAAuJ,UACAvI,SAAAhB,EAAAgB,SACAwI,iBAAAxJ,EAAAwJ,iBACA/I,IAAAT,EAAAS,IACAgJ,KAAAzJ,EAAAyJ,KACAC,WAAAhH,IAAA1C,EAAA0J,OAAA1J,EAAA0J,MACAC,WAAA3J,EAAA2J,aAOAzJ,KAAA0J,aAAAlH,IAAA1C,EAAA6J,OAAA7J,EAAA6J,OAAA,EAMA3J,KAAA6D,QAAAC,EAMA9D,KAAA+D,MAAA,EAMA/D,KAAAiE,YAAkEnE,EAAA,WAMlEE,KAAAkE,YAAA1B,IAAA1C,EAAAqE,OAAArE,EAAAqE,MAMAnE,KAAA4J,WAAAzJ,OAAA0J,EAAA,YAAA1J,GAEAH,KAAAgE,aACAhE,KAAA8J,OAAA9J,KAAA+J,qBAIA5J,OAAA6J,EAAA,SAAA7J,CAAA4I,EAAAE,EAAA,GAiBAF,EAAA9G,UAAAwC,qBAAA,SAAAC,EAAAxD,EAAAV,EAAAsD,GACA,MAAAa,EAAAxE,OAAA8J,EAAA,IAAA9J,CAAAK,GACAqE,EAAA7E,KAAA8E,gBAEA,IAAAhE,EAAAd,KAAAkK,cACApJ,IACAA,EAAAd,KAAAmK,yBAAAxF,IAGA,MAAAyF,EAAAtJ,EAAAuJ,kCAAA3F,EAAAxD,GAEA,GAAAJ,EAAAwJ,iBAAA3B,QAAAyB,EAAA,GACA,OAGA,IAAAG,EAAAzJ,EAAA8F,cAAAwD,EAAA,IACAI,EAAA1J,EAAA2J,mBAAAL,EAAApK,KAAA4J,YACAc,EAAAC,EAAA,QAAAC,OAAA9J,EAAA+J,YAAAT,EAAA,IAAApK,KAAA8K,SAGA,MAAAnB,EAAA3J,KAAA0J,QACA,IAAAC,IACAe,EAAAC,EAAA,QAAAI,OAAAL,EAAAf,EAAA3J,KAAA8K,SACAN,EAAArK,OAAA0J,EAAA,OAAA1J,CAAAqK,EAAAD,EAAAZ,EAAAa,IAGA3F,OAAAF,IACA4F,EAAAS,EAAA,EAAAhG,0BAAAH,EAAAF,EAAAD,EAAA6F,GACAC,EAAArK,OAAA8J,EAAA,gBAAA9J,CAAAqK,EAAA7F,EAAAE,GACAH,EAAAvE,OAAA8J,EAAA,UAAA9J,CAAAuE,EAAAC,EAAAE,IAGA,MAAAI,GACAC,QAAA,MACAC,QAAA8F,EAAA,EACA5F,QAAA,iBACAC,OAAA,YACAC,aAAA,EACAC,aAAAxF,KAAA6D,QAAA,QAEA1D,OAAA+K,EAAA,OAAA/K,CAAA8E,EAAAjF,KAAA6D,QAAAC,GAEA,MAAA4B,EAAAC,KAAAC,OAAAlB,EAAA,GAAA8F,EAAA,IAAAD,GACA1E,EAAAF,KAAAC,OAAA4E,EAAA,GAAA9F,EAAA,IAAA6F,GAKA,OAHAtF,EAAAjF,KAAA+D,KAAA,SAAA2B,EACAT,EAAAjF,KAAA+D,KAAA,SAAA8B,EAEA7F,KAAA8F,eAAAsE,EAAAM,EAAAF,EACA,EAAA3F,GAAAF,EAAAM,IAOA8D,EAAA9G,UAAAkJ,kBAAA,WACA,OAAAnL,KAAA0J,SAUAX,EAAA9G,UAAA8D,UAAA,WACA,OAAA/F,KAAA6D,SAcAkF,EAAA9G,UAAA6D,eAAA,SAAAsE,EAAAM,EAAAF,EACArJ,EAAAX,EAAAsD,GAEA,MAAAyF,EAAAvJ,KAAAuJ,KACA,IAAAA,EACA,OAYA,GATAzF,EAAA,MAAA4G,EAAA,GACA5G,EAAA,OAAA4G,EAAA,GAEA5G,EAAA9D,KAAA+D,KAAA,aAAAvD,EAAA8G,UAEA,WAAAtH,KAAA6D,UACAC,EAAA,WAGA,GAAA3C,EACA,OAAAnB,KAAAiE,aACA,KAAAmH,EAAA,EAAApM,UACA,MAAAwI,EAAA,GAAArG,EAAA,KACA,mBAAA2C,EACAA,EAAA,wBAAwC0D,EAExC1D,EAAA,sBAAA0D,EAEA,MACA,KAAA4D,EAAA,EAAAnM,UACA6E,EAAA,kBAAA3C,EACA,MACA,KAAAiK,EAAA,EAAArM,gBACA,KAAAqM,EAAA,EAAAlM,KACA4E,EAAA,OAAA3C,EACA,MACA,QACAhB,OAAAkL,EAAA,EAAAlL,EAAA,MAKA,MAAAsH,EAAAjH,EAAAkH,qBACAC,EAAA6C,EAEA,IAAAc,EAUA/K,EAXAP,KAAA+D,MAAA,MAAA0D,EAAAG,OAAA,OAEA0D,EAAAd,EAAA,GACA7C,EAAA,GAAA6C,EAAA,GACA7C,EAAA,GAAA2D,EACAA,EAAAd,EAAA,GACA7C,EAAA,GAAA6C,EAAA,GACA7C,EAAA,GAAA2D,IAEAxH,EAAA,KAAA6D,EAAAE,KAAA,KAGA,GAAA0B,EAAAZ,QACApI,EAAAgJ,EAAA,GAGAhJ,EAAAgJ,EADApJ,OAAAoL,EAAA,OAAApL,CAAAqL,EAAA,EAAAC,KAAArB,GAAAb,EAAAZ,SAGA,OAAAxI,OAAA2I,EAAA,aAAA3I,CAAAI,EAAAuD,IAOAiF,EAAA9G,UAAAyJ,kBAAA,SAAAvK,GACA,OAAAnB,KAAAkE,aAAA1B,IAAAxC,KAAAiE,YACoB,EADpB,GASA8E,EAAA9G,UAAA8H,iBAAA,WACA,IAAA4B,EAAA,EACA,MAAAC,KACA,UAAAC,KAAA7L,KAAA6D,QACA+H,EAAAD,KAAAE,EAAA,IAAA7L,KAAA6D,QAAAgI,GAEA,OAAAD,EAAA/D,KAAA,MAOAkB,EAAA9G,UAAA6J,qBAAA,SAAA1B,EAAAjJ,EAAAX,GAEA,IAAAM,EAAAd,KAAAkK,cAKA,GAJApJ,IACAA,EAAAd,KAAAmK,yBAAA3J,IAGAM,EAAAwJ,iBAAA3B,QAAAyB,EAAA,GACA,OAGA,GAAAjJ,GAAAnB,KAAAkE,aAAA1B,IAAAxC,KAAAiE,cACA9C,EAAA,GAGA,MAAAoJ,EAAAzJ,EAAA8F,cAAAwD,EAAA,IACA,IAAAI,EAAA1J,EAAA2J,mBAAAL,EAAApK,KAAA4J,YACAc,EAAAC,EAAA,QAAAC,OACA9J,EAAA+J,YAAAT,EAAA,IAAApK,KAAA8K,SAEA,MAAAnB,EAAA3J,KAAA0J,QACA,IAAAC,IACAe,EAAAC,EAAA,QAAAI,OAAAL,EAAAf,EAAA3J,KAAA8K,SACAN,EAAArK,OAAA0J,EAAA,OAAA1J,CAAAqK,EAAAD,EAAAZ,EAAAa,IAGA,GAAArJ,IACAuJ,EAAAC,EAAA,QAAAoB,MAAArB,EAAAvJ,EAAAnB,KAAA8K,UAGA,MAAA7F,GACAC,QAAA,MACAC,QAAA8F,EAAA,EACA5F,QAAA,SACAC,OAAA,YACAC,aAAA,GAIA,OAFApF,OAAA+K,EAAA,OAAA/K,CAAA8E,EAAAjF,KAAA6D,SAEA7D,KAAA8F,eAAAsE,EAAAM,EAAAF,EACArJ,EAAAX,EAAAyE,IAQA8D,EAAA9G,UAAAiG,aAAA,SAAApE,GACA3D,OAAA+K,EAAA,OAAA/K,CAAAH,KAAA6D,QAAAC,GACA9D,KAAAgE,aACAhE,KAAA8J,OAAA9J,KAAA+J,qBAOAhB,EAAA9G,UAAA+B,WAAA,WACA,MAAAmE,EAAAnI,KAAA6D,QAAA,SAAAoH,EAAA,EACAjL,KAAA+D,KAAAiI,EAAA,QAAA3D,gBAAAF,EAAA,WAEArJ,EAAA,4FCpVA,QAAAK,EAAA,QACAA,EAAA,wDAFA,IAAMU,KAQNA,EAAQoM,OAASC,QAAQD,OAAO,sBAEhCpM,EAAQoM,OAAOtM,MAAM,kBAAmB,IAAAwM,EAAA7M,SACxC8M,EAAA9M,QAAS2M,OAAOI,SAASC,KAAKzM,EAAQoM,OAAOM,gBAG9B1M,+UCdf2M,EAAArN,EAAA,uBAKA,IAAMU,aAkBJ,SAAAA,EAAYC,gGAASC,CAAAC,KAAAH,GAiBnBG,KAAKyM,UAA+B,IAApB3M,EAAQ4M,QAQxB1M,KAAK2M,UAA+B,IAApB7M,EAAQ8M,QAcxB5M,KAAK6M,WAAa/M,EAAQ+M,YAAc,KAOxC7M,KAAK8M,IAAMhN,EAAQiN,GASnB/M,KAAKgN,qBAAuBlN,EAAQmN,oBAOpCjN,KAAKkN,eAAiBpN,EAAQqN,cAO9BnN,KAAKoN,eAAiBtN,EAAQuN,cAO9BrN,KAAKsN,MAAQxN,EAAQyM,KA9FnB,OAAAgB,EAAA1N,IAAAgM,IAAA,gBAAAlM,MAAA,WA8IF,OAAOK,KAAK6M,cA9IVhB,IAAA,gBAAAlM,MAAA,SAqJUkN,GACZ7M,KAAK6M,WAAaA,KAtJhBhB,IAAA,UAAA2B,IAAA,WA0GF,OAAOxN,KAAKyM,UA1GVgB,IAAA,SAiHQf,GACV1M,KAAKyM,SAAWC,KAlHdb,IAAA,UAAA2B,IAAA,WA0HF,OAAOxN,KAAK2M,UA1HVc,IAAA,SAiIQb,GACV5M,KAAK2M,SAAWC,KAlIdf,IAAA,KAAA2B,IAAA,WA8JF,OAAOxN,KAAK8M,OA9JVjB,IAAA,sBAAA2B,IAAA,WAsKF,OAAOxN,KAAKgN,wBAtKVnB,IAAA,gBAAA2B,IAAA,WA8KF,OAAOxN,KAAKkN,kBA9KVrB,IAAA,gBAAA2B,IAAA,WAsLF,OAAOxN,KAAKoN,kBAtLVvB,IAAA,OAAA2B,IAAA,WA8LF,OAAOxN,KAAKsN,SA9LVzB,IAAA,YAAA2B,IAAA,WA4MF,OAAO,KA5ML3B,IAAA,yBAAA2B,IAAA,WAqNF,OAA8B,OAAvBxN,KAAKmN,eAAiD,OAAvBnN,KAAKqN,kBArNzCxN,eA0NSA,qFC7NfV,EAAA,KACAA,EAAA,IACA,QAAAA,EAAA,UAEAA,EAAA,QACAA,EAAA,SACAA,EAAA,SACAA,EAAA,wDAIAuO,IAAIzB,OAASC,QAAQD,OAAO,OAC1B0B,KAAK1B,OAAOM,KACZqB,EAAAtO,QAAciN,OAQhBmB,IAAIG,eAAiB,WAKnB7N,KAAKN,IAAM,IAAAoO,EAAAxO,SACTyO,QACE,IAAAC,EAAA1O,SACE2O,OAAQ,IAAAC,EAAA5O,SACNoB,MAAO,2BAIbyN,KAAM,IAAAC,EAAA9O,SACJE,aAAc,IAAK,IAAK,GAAI,GAAI,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IACvD2G,QAAS,MAAQ,OACjBkI,KAAM,OAKZX,IAAIzB,OAAOqC,WAAW,iBAAkBZ,IAAIG,mIC5C5C,QAAA1O,EAAA,IACYmJ,IAAZnJ,EAAA,QACAA,EAAA,KACYoP,IAAZpP,EAAA,QACAA,EAAA,SACAA,EAAA,SACAA,EAAA,QACAA,EAAA,iNAyBA,IAAMU,EAAU,WAMdG,KAAKwO,2BAMLxO,KAAKyO,WAMLzO,KAAK0O,QAAU,IAAAC,EAAArP,SACbsP,iBAAiB,IAOnB5O,KAAK6O,OAAS,IAAAC,EAAAxP,SACZ2O,OAAQjO,KAAK0O,QACb/N,MAAOX,KAAK+O,eAAeC,KAAKhP,MAChCiP,sBAAsB,EACtBC,wBAAwB,KAW5BrP,EAAQoC,UAAUkN,WAAa,SAASC,EAASC,GAC/CC,EAAAhQ,QAAYiQ,OAAOF,GAAc,GACjCC,EAAAhQ,QAAYiQ,OAAOF,EAAarP,KAAKyO,QAAQ9F,QAC7C,IAAM6G,EAAalH,EAAOmH,OAAOL,GAASM,WAC1C1P,KAAKwO,wBAAwBgB,GAAcH,EAC3CrP,KAAKyO,QAAQY,GAAYM,SAASH,GAAcJ,EAChDpP,KAAK0O,QAAQS,WAAWC,IAS1BvP,EAAQoC,UAAU2N,cAAgB,SAASR,EAASC,GAClDC,EAAAhQ,QAAYiQ,OAAOF,GAAc,GACjCC,EAAAhQ,QAAYiQ,OAAOF,EAAarP,KAAKyO,QAAQ9F,QAC7C,IAAM6G,EAAalH,EAAOmH,OAAOL,GAASM,kBACnC1P,KAAKwO,wBAAwBgB,UAC7BxP,KAAKyO,QAAQY,GAAYM,SAASH,GACzCxP,KAAK0O,QAAQkB,cAAcR,IAQ7BvP,EAAQoC,UAAU4N,MAAQ,SAASR,GACjCC,EAAAhQ,QAAYiQ,OAAOF,GAAc,GACjCC,EAAAhQ,QAAYiQ,OAAOF,EAAarP,KAAKyO,QAAQ9F,QAC7C,IAAMmH,EAAQ9P,KAAKyO,QAAQY,GAC3B,IAAK,IAAMG,KAAcM,EAAMH,SAC7B3P,KAAK4P,cAAcE,EAAMH,SAASH,GAAaH,GAEjDC,EAAAhQ,QAAYiQ,OAAOhB,EAAMwB,QAAQD,EAAMH,YAQzC9P,EAAQoC,UAAU+N,SAAW,WAC3B,OAAOhQ,KAAK6O,QAQdhP,EAAQoC,UAAUgO,kBAAoB,WACpC,IAAMZ,EAAarP,KAAKyO,QAAQ9F,OAKhC,OAJA3I,KAAKyO,QAAQnC,MACX4D,cAAeC,EAAA7Q,QAAa8Q,gBAC5BT,cAEK,IAAAU,EAAA/Q,QAA0BU,KAAMqP,IAQzCxP,EAAQoC,UAAUqO,KAAO,SAAS5Q,GAChCM,KAAK6O,OAAO0B,OAAO7Q,IAUrBG,EAAQoC,UAAUuO,SAAW,SAAS7P,EAAO0O,GAC3CC,EAAAhQ,QAAYiQ,OAAOF,GAAc,GACjCC,EAAAhQ,QAAYiQ,OAAOF,EAAarP,KAAKyO,QAAQ9F,QAC7C3I,KAAKyO,QAAQY,GAAYa,cAA0B,OAAVvP,EACvCwP,EAAA7Q,QAAa8Q,gBAAkBD,EAAA7Q,QAAamR,eAAe9P,IAU/Dd,EAAQoC,UAAU8M,eAAiB,SAASK,EAASlO,GACnD,IAAMsO,EAAalH,EAAOmH,OAAOL,GAASM,WAC1CJ,EAAAhQ,QAAYiQ,OAAOC,KAAcxP,KAAKwO,yBACtC,IAAMa,EAAarP,KAAKwO,wBAAwBgB,GAEhD,OADcxP,KAAKyO,QAAQY,GACda,cAAcd,EAASlO,KAOtCrB,EAAQoM,OAASC,QAAQD,OAAO,yBAC9BoE,EAAA/Q,QAAsB2M,OAAOM,QAEhBmE,QAAQ,wBAAyB7Q,GAChDuM,EAAA9M,QAAS2M,OAAOI,SAASC,KAAKzM,EAAQoM,OAAOM,gBAG9B1M,mSCtJTA,GAYNA,iBAA2B,SACzB8Q,EAAgBC,EAAaC,EAAcC,GAC3C,IAAIC,EAAU,mBACVC,SACAH,GACFE,QAAgBF,EAChBG,EAAOF,GACEH,IACTI,QAAgBJ,EAChBK,EAAOJ,GAMT,IAAMK,EAAI,IAAIpR,EAAQqR,eAAZ,GAA8BH,EAAWC,OACnDnR,EAAQsR,cAAcF,IAUxBpR,gBAA0B,SAASuR,GAC7BvR,EAAQwR,iBACVxR,EAAQsR,cAAgBC,IAe5BvR,OAAiB,SAASyR,EAAWC,EAAaC,GAKhD,OAJI3R,EAAQwR,iBAAmBC,GAC7BzR,EAAQ4R,iBACN,GAAI,KAAMF,EAAaG,MAAMzP,UAAU0P,MAAMtR,KAAKqI,UAAW,IAE1D4I,GAsBTzR,KAAe,SAAS0R,EAAaC,GAC/B3R,EAAQwR,gBACVxR,EAAQsR,cACN,IAAItR,EAAQqR,eAAZ,WACYK,OAAmBA,EAAgB,IAC7CG,MAAMzP,UAAU0P,MAAMtR,KAAKqI,UAAW,MAa9C7I,aAAuB,SAASF,EAAO4R,EAAaC,GAMlD,OALI3R,EAAQwR,iBAAmBO,KAAKC,SAASlS,IAC3CE,EAAQ4R,iBACN,mCAAoCG,KAAKE,OAAOnS,GAAQA,GACxD4R,EAAaG,MAAMzP,UAAU0P,MAAMtR,KAAKqI,UAAW,IAEhD,GAYT7I,aAAuB,SAASF,EAAO4R,EAAaC,GAMlD,OALI3R,EAAQwR,iBAAmBO,KAAKG,SAASpS,IAC3CE,EAAQ4R,iBACN,mCAAoCG,KAAKE,OAAOnS,GAAQA,GACxD4R,EAAaG,MAAMzP,UAAU0P,MAAMtR,KAAKqI,UAAW,IAEhD,GAaT7I,eAAyB,SAASF,EAAO4R,EAAaC,GAMpD,OALI3R,EAAQwR,iBAAmBO,KAAKI,WAAWrS,IAC7CE,EAAQ4R,iBACN,qCAAsCG,KAAKE,OAAOnS,GAAQA,GAC1D4R,EAAaG,MAAMzP,UAAU0P,MAAMtR,KAAKqI,UAAW,IAEhD,GAYT7I,aAAuB,SAASF,EAAO4R,EAAaC,GAMlD,OALI3R,EAAQwR,iBAAmBO,KAAKK,SAAStS,IAC3CE,EAAQ4R,iBACN,mCAAoCG,KAAKE,OAAOnS,GAAQA,GACxD4R,EAAaG,MAAMzP,UAAU0P,MAAMtR,KAAKqI,UAAW,IAEhD,GAYT7I,YAAsB,SAASF,EAAO4R,EAAaC,GAMjD,OALI3R,EAAQwR,iBAAmBO,KAAKM,QAAQvS,IAC1CE,EAAQ4R,iBACN,kCAAmCG,KAAKE,OAAOnS,GAAQA,GACvD4R,EAAaG,MAAMzP,UAAU0P,MAAMtR,KAAKqI,UAAW,IAEhD,GAaT7I,cAAwB,SAASF,EAAO4R,EAAaC,GAMnD,OALI3R,EAAQwR,iBAAmBO,KAAKO,UAAUxS,IAC5CE,EAAQ4R,iBACN,oCAAqCG,KAAKE,OAAOnS,GAAQA,GACzD4R,EAAaG,MAAMzP,UAAU0P,MAAMtR,KAAKqI,UAAW,IAEhD,GAaT7I,cAAwB,SAASF,EAAO4R,EAAaC,GAOnD,OANI3R,EAAQwR,gBACNO,KAAKK,SAAStS,IAAUA,EAAMyS,UAAYR,KAAKS,IAAIC,SAASC,SAChE1S,EAAQ4R,iBACN,oCAAqCG,KAAKE,OAAOnS,GAAQA,GACzD4R,EAAaG,MAAMzP,UAAU0P,MAAMtR,KAAKqI,UAAW,IAEhD,GAmBT7I,iBAA2B,SAASF,EAAO6I,EAAM+I,EAAaC,GAO5D,OANI3R,EAAQwR,gBAAoB1R,aAAiB6I,GAC/C3I,EAAQ4R,iBACN,sCACC5R,EAAQ2S,SAAShK,GAAO3I,EAAQ2S,SAAS7S,IAC1C4R,EAAaG,MAAMzP,UAAU0P,MAAMtR,KAAKqI,UAAW,IAEhD/I,GAQTE,8BAAwC,WACtC,IAAK,IAAMgM,KAAO1L,OAAO8B,UACvBpC,EAAQ4S,KAAQ5G,EAAhB,mDAYJhM,SAAmB,SAASF,GAC1B,OAAIA,aAAiB+S,SACZ/S,EAAMgT,aAAehT,EAAM4M,MAAQ,oBACjC5M,aAAiBQ,OACnBR,EAAMiT,YAAYD,aAAehT,EAAMiT,YAAYrG,MACtDpM,OAAO8B,UAAUyN,SAASrP,KAAKV,GAElB,OAAVA,EAAiB,YAAjB,IAAiCA,EAAjC,YAAAkT,EAAiClT,eAK7BE,oFCxTf,QAAAV,EAAA,QACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,wDAQA,IAAMU,EAAUqM,QAAQD,OAAO,iBAC7BG,EAAA9M,QAAS2M,OAAOM,KAChBuG,EAAAxT,QAA0B2M,OAAOM,KACjCwG,EAAAzT,QAAiBiN,KACjByG,EAAA1T,QAAyB2M,OAAOM,KAChC0G,EAAA3T,QAAgBiN,KAChB2G,EAAA5T,QAAiBiN,KACjB4G,EAAA7T,QAAqBiN,iBAIR1M,oFCzBf,QAAAV,EAAA,QACAA,EAAA,QACAA,EAAA,KACYmJ,0JAAZnJ,EAAA,QACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,wDA8CA,IAAMU,EAAU,WAEduT,EAAA9T,QAAae,KAAKL,MAOlBA,KAAKqT,aAGP/K,EAAOO,SAAShJ,EAAhBuT,EAAA9T,SAUAO,EAAQoC,UAAUuL,IAAM,SAAS9N,GAE/B,OADe4I,EAAOmH,OAAO/P,GAAKgQ,aACjB1P,KAAKqT,SAAW3T,EAAI4T,YAAYC,KAAK,GAAK,MAY7D1T,EAAQoC,UAAUwL,IAAM,SAAS/N,EAAKgB,GACpC,IAAM8S,EAASlL,EAAOmH,OAAO/P,GAAKgQ,WAC5B+D,EAAWzT,KAAKwN,IAAI9N,GACT,OAAb+T,GACFnE,EAAAhQ,QAAYiQ,OAAOiE,KAAUxT,KAAKqT,UACpB,OAAV3S,EACFhB,EAAI4T,YAAYI,MAAM,EAAGhT,IAEzBhB,EAAI4T,YAAYK,SAAS,UAClB3T,KAAKqT,SAASG,KAEJ,OAAV9S,IACThB,EAAI4T,YAAYM,SAAS,EAAGlT,GAC5BV,KAAKqT,SAASG,IAAU,GAG1B,IAAMK,EAAQ,IAAAC,EAAAxU,QAAoB,UAChCyU,QAASrT,EACT+S,SAAUA,IAIZ,OAFAzT,KAAKgU,cAAcH,GAEZJ,GAQT5T,EAAQoC,UAAUgS,iBAAmB,SAASvU,EAAKwU,GACjD,IAAMC,EAAcnU,KAAKwN,IAAI9N,GAC7B,GAAIyU,EAAa,CACf,IAAIpG,GAAUoG,GACVA,yBAEFpG,EAASoG,EAAYb,YAAYc,YAGnCrG,EAAO3K,QAAQ,SAAC1C,GAEd,GADA4O,EAAAhQ,QAAY+U,iBAAiB3T,EAA7B4T,EAAAhV,SACIoB,EAAO,CACT,IAAI6T,GAAa,EACXC,KACN,IAAK,IAAM3I,KAAOnL,EAAM8M,IAAI,cAAe,CACzC,IAAM7N,EAAQuU,EAAWrI,QACXrJ,IAAV7C,IACF6U,EAAkB3I,GAAOlM,EACzB4U,GAAa,GAGjB,GAAIA,EAAY,CACd,IAAMtG,EAASvN,EAAM+T,YACjBxG,wBACFA,EAAOgG,iBAAiBO,GACxBvG,EAAOyG,YACEzG,wBAAqCA,0BAC9CA,EAAO/F,aAAasM,GACpBvG,EAAOyG,kBAWnB7U,EAAQoM,OAASC,QAAQD,OAAO,8BACjByE,QAAQ,yBAA0B7Q,GACjDuM,EAAA9M,QAAS2M,OAAOI,SAASC,KAAKzM,EAAQoM,OAAOM,gBAG9B1M,oFCrKf,QAAAV,EAAA,QACAA,EAAA,QAGAA,EAAA,SAEAA,EAAA,QACAA,EAAA,uDAKA,IAAMU,EAAUqM,QAAQD,OAAO,WAC7B0I,EAAArV,QAAiC2M,OAAOM,OAG1CH,EAAA9M,QAAS2M,OAAOI,SAASC,KAAKzM,EAAQ0M,MAkCtC1M,EAAQ+U,WAAa,SAASC,EAASC,GACrC,OACEC,SAAU,IAMVC,KAAM,SAACC,EAAOC,EAASC,GAErB,IACMC,EAAOD,EAAA,QAEPzV,EAAMuV,EAAMI,MAAMD,GACxB9F,EAAAhQ,QAAY+U,iBAAiB3U,EAA7BoO,EAAAxO,SAEAI,EAAI4V,UAAUJ,EAAQ,IAEtBJ,EAAuBpV,IAAMA,EAQ7B,IACM6V,EAAmBJ,EAAA,oBAGzB,GAFqBF,EAAMI,MAAME,GAEf,CAChB,IACMC,EAAuBL,EAAA,wBAEvBM,EACJR,EAAMI,MAAMG,GAEdE,EAAApW,QAAS0H,OACP6N,EACA,SACA,WACE,GAAIY,EAAkB,CAEpB,IAAME,EAAQC,KAAKC,MACfC,GAAO,GACQ,SAAbC,IACJrW,EAAIsW,aACJtW,EAAIuW,aACAH,GACFjB,EAAQqB,sBAAsBH,GAE5BH,KAAKC,MAAQF,EAAQF,IACvBK,GAAO,GAGXC,QAGArW,EAAIsW,mBA1DlBnW,EAAQ+U,wDAoER/U,EAAQsW,UAAU,UAAWtW,EAAQ+U,sBAGtB/U,iVCzHfV,EAAA,QACAA,EAAA,SAGAA,EAAA,SAEAA,EAAA,QACAA,EAAA,SACAA,EAAA,SACAA,EAAA,uDAEA,IAAMU,aAqBJ,SAAAA,EAAYuW,gGAAiBrW,CAAAC,KAAAH,GAM3BG,KAAKqW,iBAAmBD,EAMxBpW,KAAKsW,KAAO,KAMZtW,KAAKuW,iBAELb,EAAApW,QAAS0H,OAAOhH,KAAKqW,iBAAkB,MAAOrW,KAAKwW,sBAAuBxW,MAzCxE,OAAAH,EAAA4W,SAAA,mBAAAlJ,EAAA1N,IAAAgM,IAAA,WAAAlM,MAAA,SAiEKD,GAGP,IAAMyO,EAAOzO,EAAIgX,UACjB1W,KAAKuW,cAAcjK,KACjBoJ,EAAApW,QAAS0H,OAAOmH,EAAM,oBAAqBnO,KAAK2W,4BAA6B3W,OAI/E,IAAMkB,EAAaiN,EAAKvH,gBACxB0I,EAAAhQ,QAAYsX,aAAa1V,GACzBlB,KAAK6W,6BAA6B3V,MA5EhC2K,IAAA,aAAAlM,MAAA,SAoFOD,GACT0T,EAAA9T,QAAawX,QAAQ9W,KAAKuW,eAC1BvW,KAAKuW,oBAtFH1K,IAAA,8BAAAlM,MAAA,SA+FwBoX,GAC1B,IAAM5I,EAAO4I,EAAIC,OACjB1H,EAAAhQ,QAAY+U,iBAAiBlG,EAA7BC,EAAA9O,SACA,IAAM4B,EAAaiN,EAAKvH,gBACxB0I,EAAAhQ,QAAYsX,aAAa1V,GACzBlB,KAAK6W,6BAA6B3V,MApGhC2K,IAAA,+BAAAlM,MAAA,SA4GyBuB,GAAY,IAAA+V,EAAAjX,KACvCA,KAAKqW,iBAAiBjT,QAAQ,SAAC8T,GAC7BD,EAAKE,4BAA4BD,EAAYhW,QA9G7C2K,IAAA,8BAAAlM,MAAA,SAwHwBuX,EAAYhW,GAGtC,GAAKgW,EAAWE,uBAAhB,CAIA,IAAMjK,EAAgB+J,EAAW/J,cAC3BE,EAAgB6J,EAAW7J,cAQ3BX,GAN+B,OAAlBW,QACG7K,IAAlB6K,GACAnM,GAAcmM,KACmB,OAAlBF,QACG3K,IAAlB2K,GACAjM,GAAciM,GAGlB+J,EAAWxK,QAAUA,MA1InBb,IAAA,wBAAAlM,MAAA,SAmJkBkU,GACpB,IAAMqD,EAAa5H,EAAAhQ,QAAY+U,iBAC7BR,EAAMqB,QADWmC,EAAA/X,SAEnB,GAAIU,KAAKsW,KAAM,CACb,IAAMpV,EAAalB,KAAKsW,KAAKI,UAAU9P,gBACvC0I,EAAAhQ,QAAYsX,aAAa1V,GACzBlB,KAAKmX,4BAA4BD,EAAYhW,OAzJ7C2K,IAAA,MAAA4B,IAAA,SAgDI/N,GACFM,KAAKsW,MACPtW,KAAKsX,WAAWtX,KAAKsW,MAGvBtW,KAAKsW,KAAO5W,EAERA,GACFM,KAAKuX,SAAS7X,OAxDdG,KAmKNA,EAAQoM,OAASC,QAAQD,OAAO,0BAC9BuL,EAAAlY,QAA0B2M,OAAOM,OAEnC1M,EAAQoM,OAAOyE,QAAQ,yBAA0B7Q,GACjDuM,EAAA9M,QAAS2M,OAAOI,SAASC,KAAKzM,EAAQoM,OAAOM,gBAG9B1M,oFCrLf,QAAAV,EAAA,sJACAA,EAAA,MACAA,EAAA,wDAOA,IAAMU,EAAU,SAAS4X,EAAS7X,GAMhCI,KAAK0X,SAAWD,EAMhBzX,KAAK2X,UAAY,KAMjB3X,KAAK4X,OAAShY,GAShBC,EAAQoC,UAAUkN,WAAa,SAASC,GACtCpP,KAAK0X,SAASvI,WAAWC,EAASpP,KAAK4X,SASzC/X,EAAQoC,UAAU2N,cAAgB,SAASR,GACzCpP,KAAK0X,SAAS9H,cAAcR,EAASpP,KAAK4X,SAQ5C/X,EAAQoC,UAAU4N,MAAQ,WACxB7P,KAAK0X,SAAS7H,MAAM7P,KAAK4X,SAa3B/X,EAAQoC,UAAU4V,YAAc,SAASlI,GAChB,OAAnB3P,KAAK2X,YACP3X,KAAK2X,UAAU9H,QACf6F,EAAApW,QAASwY,SAAS9X,KAAK2X,UAAW,MAAO3X,KAAK+X,kBAAmB/X,MACjE0V,EAAApW,QAASwY,SAAS9X,KAAK2X,UAAW,SAAU3X,KAAKgY,qBAAsBhY,OAExD,OAAb2P,IACFA,EAASvM,QAAQ,SAASgM,GACxBpP,KAAKmP,WAAWC,IACfpP,MACH0V,EAAApW,QAAS0H,OAAO2I,EAAU,MAAO3P,KAAK+X,kBAAmB/X,MACzD0V,EAAApW,QAAS0H,OAAO2I,EAAU,SAAU3P,KAAKgY,qBAAsBhY,OAEjEA,KAAK2X,UAAYhI,GAUnB9P,EAAQoC,UAAUuO,SAAW,SAAS7P,GACpCX,KAAK0X,SAASlH,SAAS7P,EAAOX,KAAK4X,SAQrC/X,EAAQoC,UAAU8V,kBAAoB,SAAShB,GAC7C,IAAM3H,EAAqC2H,EAAI7B,QAC/ClV,KAAKmP,WAAWC,IAQlBvP,EAAQoC,UAAU+V,qBAAuB,SAASjB,GAChD,IAAM3H,EAAqC2H,EAAI7B,QAC/ClV,KAAK4P,cAAcR,IAMrBvP,EAAQoM,OAASC,QAAQD,OAAO,yBAChCG,EAAA9M,QAAS2M,OAAOI,SAASC,KAAKzM,EAAQoM,OAAOM,gBAG9B1M,oFC3Hf,MAAA2M,EAAArN,EAAA,uCAKA,IAAMU,EAAUqM,QAAQD,OAAO,mBAE/BG,EAAA9M,QAAS2M,OAAOI,SAASC,KAAKzM,EAAQ0M,MA6BtC1M,EAAQ+U,WAAa,WACnB,OACEG,SAAU,IACVC,KAAM,SAACiD,EAAQC,EAAUC,GACvB,IAAMC,EAAUD,EAAA,gBACVzY,EAA6BuY,EAAO5C,MAAM+C,GAEhD,SAASC,EAASnD,GAChB,IAAM3V,EAAS2V,EAAQoD,KAAK,eAC5B,QAAe9V,IAAXjD,EAAsB,CACxB,IAAM6H,EAA+B1H,EAAI6Y,UACzC7Y,EAAIgX,UAAU8B,IAAIP,EAAO5C,MAAM9V,IAAU6H,SAE3C,IAAMiH,EAAO6G,EAAQoD,KAAK,kBACb9V,IAAT6L,GACF3O,EAAIgX,UAAU+B,QAAQR,EAAO5C,MAAMhH,IAKvC6J,EAASQ,GAAG,QAAS,IAAK,SAAS7E,GACjCwE,EAASnM,QAAQgJ,QAAQyD,EAAE3Y,UAI7BkY,EAASQ,GAAG,SAAU,SAAC7E,GACrB,IAAM+E,EAAW/E,EAAMmD,OAAOlX,QAAQ+T,EAAMmD,OAAO6B,eACnDR,EAASnM,QAAQgJ,QAAQ0D,SAQjC/Y,EAAQsW,UAAU,eAAgBtW,EAAQ+U,sBAG3B/U,oFC1Ef,QAAAV,EAAA,QACAA,EAAA,QACAA,EAAA,uDAKA,IAAMU,EAAUqM,QAAQD,OAAO,oBAE/BG,EAAA9M,QAAS2M,OAAOI,SAASC,KAAKzM,EAAQ0M,MAuBtC1M,EAAQ+U,WAAa,SAASC,GAG5B,OACEE,SAAU,IAMVC,KAAM,SAACC,EAAOC,EAASC,GACrB,IACMC,EAAOD,EAAA,cACPzV,EAAMuV,EAAMI,MAAMD,GACxB9F,EAAAhQ,QAAY+U,iBAAiB3U,EAA7BoO,EAAAxO,SAEA,IAAMwZ,EAAY3D,EAAA,mBAClB7F,EAAAhQ,QAAYiQ,YAAqB/M,IAAdsW,GAEnB,IAAInD,SACAoD,SAEEC,EAAiB,SAAjBA,IACJtZ,EAAIsW,aACJtW,EAAIuW,aAEAL,KAAKC,MAAQF,EAzBgB,MA0B/BoD,EAAoBlE,EAAQqB,sBAAsB8C,KAMtD9D,EAAQwD,GAAG,gBAAiB,WAC1BhZ,EAAIsW,aACJtW,EAAIuW,eAGNhB,EAAMgE,OAAOH,EAAW,SAACI,EAAQC,GAC3BD,GAAUC,IACZxD,EAAQC,KAAKC,MACbhB,EAAQuE,qBAAqBL,GAC7BA,EAAoBlE,EAAQqB,sBAAsB8C,SAQ5DnZ,EAAQsW,UAAU,gBAAiBtW,EAAQ+U,sBAG5B/U,oFCrFf,QAAAV,EAAA,IACYka,0JAAZla,EAAA,QACAA,EAAA,QACAA,EAAA,uDAKA,IAAMU,EAAUqM,QAAQD,OAAO,wBAE/BG,EAAA9M,QAAS2M,OAAOI,SAASC,KAAKzM,EAAQ0M,MAGtC1M,EAAQF,MAAM,+BAMZ,SAACuV,EAASC,GACR,IAAMmE,EAAcnE,EAAA,6BACpB,YAAuB3S,IAAhB8W,EAA4BA,EAC9BlN,EAAA9M,QAASia,sBADP,4BAwDX1Z,EAAQ+U,WAAa,SAAS4E,GAC5B,OACEzE,SAAU,IACVE,OAAO,EACP3G,WAAY,8BACZgL,YAAaE,IAKjB3Z,EAAQsW,UAAU,oBAAqBtW,EAAQ+U,YAc/C/U,EAAQ4Z,yBAA2B,SAASxB,EAAQC,EAAUC,GAAQ,IAAAlB,EAAAjX,KAE9D0Z,EAAavB,EAAA,kBAOnBnY,KAAK2Z,OACF1B,EAAO5C,MAAMqE,GAChB9H,KAAKvK,QAAQkI,YAAuB/M,IAAhBxC,KAAK2Z,QAMzB3Z,KAAK4Z,WAEL3B,EAAOgB,OAAO,kBAAM9Y,OAAO0Z,KAAK5C,EAAK0C,QAAQhR,QAAQ,SAACmR,GACpD7C,EAAK2C,WAAazZ,OAAO0Z,KAAK5C,EAAK0C,QAAQja,IAAIqa,QAC/C9C,EAAK2C,WAAWI,KAAKX,EAAQY,6BAG/B,IAAM7B,EAAUD,EAAA,qBAMhBnY,KAAKsW,KAA8B2B,EAAO5C,MAAM+C,GAChDxG,KAAKvK,QAAQgN,iBAAiBrU,KAAKsW,KAAnCxI,EAAAxO,SAEA,IAAM4a,EAAc/B,EAAA,yBACdrY,EAAUmY,EAAO5C,MAAM6E,GA2B7B,GArBAla,KAAKF,QAAUD,EAAQ4Z,yBAAyBU,YAAYra,GAM5DE,KAAKoa,QAAUnC,EAMfjY,KAAKqa,qBAAuB,KAM5Bra,KAAKsa,kBAAe9X,EAGP,OADAxC,KAAKsW,KAAKI,UACJ,CACjB,IAAM6D,EAAcva,KAAKsW,KAAKI,UAAU8D,eACpBhY,IAAhB+X,IACFva,KAAKsa,aAAeta,KAAKya,SAASF,IAItC7E,EAAApW,QAAS0H,OAAOhH,KAAKsW,KAAM,cAAetW,KAAK0a,kBAAmB1a,MAElEA,KAAK2a,oCAEL1C,EAAA,kBAA8BjY,MAUhCH,EAAQ4Z,yBAAyBU,YAAc,SAASra,GACtD,IAAI8a,GAAS,EAIb,YAHgBpY,IAAZ1C,IACF8a,EAA8B,GAArB9a,EAAA,SAGT8a,OAAQA,IAUZ/a,EAAQ4Z,yBAAyBxX,UAAUwY,SAAW,SAASpM,GAC7D,OAAOrO,KAAK2Z,OAAOtL,IAQrBxO,EAAQ4Z,yBAAyBxX,UAAU4Y,WAAa,SAASxM,GAC/DrO,KAAKsW,KAAKI,UAAU+B,QAAQpK,IAQ9BxO,EAAQ4Z,yBAAyBxX,UAAU6Y,wBAA0B,SAAS7J,GAAG,IAAA8J,EAAA/a,KACzEmO,EAAOnO,KAAKsW,KAAKI,UACjB4D,EAAeta,KAAK2Z,OAA8BxL,EAAKqM,gBAaxChY,IAAjB8X,GACFta,KAAKoa,QAAQY,YAAY,WACvBD,EAAKT,aAAeA,KAU1Bza,EAAQ4Z,yBAAyBxX,UAAUyY,kBAAoB,SAASzJ,GACtEjR,KAAK2a,oCACL3a,KAAK8a,wBAAwB,OAO/Bjb,EAAQ4Z,yBAAyBxX,UAAU0Y,kCAAoC,WAC3C,OAA9B3a,KAAKqa,sBACP3E,EAAApW,QAAS+D,cAAcrD,KAAKqa,sBAE9B,IAAMlM,EAAOnO,KAAKsW,KAAKI,UACvB1W,KAAKqa,qBAAuB3E,EAAApW,QAAS0H,OAAOmH,EAC1C,oBAAqBnO,KAAK8a,wBAC1B9a,OAIJH,EAAQyO,WAAW,8BACjBzO,EAAQ4Z,oCAGK5Z","file":"asitvd.min.js","sourcesContent":["/**\n * @type {string} Default WMS version.\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/common.js\n// module id = 11\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31","/**\n * @module ol/source/WMSServerType\n */\n\n/**\n * Available server types: `'carmentaserver'`, `'geoserver'`, `'mapserver'`,\n *     `'qgis'`. These are servers that have vendor parameters beyond the WMS\n *     specification that OpenLayers can make use of.\n * @enum {string}\n */\nexport default {\n  CARMENTA_SERVER: 'carmentaserver',\n  GEOSERVER: 'geoserver',\n  MAPSERVER: 'mapserver',\n  QGIS: 'qgis'\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/WMSServerType.js\n// module id = 12\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31","/**\n * @module ngeo.source.AsitVD\n*/\nimport olSourceWMTS from 'ol/source/WMTS.js';\nimport olTilegridWMTS from 'ol/tilegrid/WMTS.js';\n\n\n/**\n * @const {!Array.<number>}\n */\nconst asitVDResolutions = [\n  4000, 3750, 3500, 3250, 3000, 2750, 2500, 2250, 2000, 1750, 1500, 1250,\n  1000, 750, 650, 500, 250, 100, 50, 20, 10, 5, 2.5, 2, 1.5, 1, 0.5\n];\n\n\n/**\n * @const {ol.tilegrid.WMTS}\n */\nconst asitVDTileGrid = new olTilegridWMTS({\n  extent: [420000, 30000, 900000, 350000],\n  resolutions: asitVDResolutions,\n  matrixIds: asitVDResolutions.map((value, index) => `${index}`)\n});\n\n\n/**\n * Layer source for the ASIT VD tile server.\n * @see https://www.asitvd.ch/chercher/geoservices/fond-de-plan-asit-vd.html\n *\n */\nconst exports = class extends olSourceWMTS {\n\n  /**\n   * @param {ngeox.source.AsitVDOptions} options WMTS options.\n   */\n  constructor(options) {\n    super({\n      attributions: 'géodonnées &copy; Etat de Vaud & &copy; contributeurs OpenStreetMap',\n      url: 'https://ows{1-4}.asitvd.ch/wmts/1.0.0/{Layer}/default/default/0/' +\n        '21781/{TileMatrix}/{TileRow}/{TileCol}.png',\n      projection: 'EPSG:21781',\n      requestEncoding: 'REST',\n      layer: options.layer,\n      style: 'default',\n      matrixSet: '21781',\n      format: 'image/png',\n      tileGrid: asitVDTileGrid\n    });\n  }\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/source/AsitVD.js","/**\n * @module ol/Image\n */\nimport {inherits} from './index.js';\nimport _ol_ImageBase_ from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport _ol_events_ from './events.js';\nimport EventType from './events/EventType.js';\nimport {getHeight} from './extent.js';\n\n/**\n * @constructor\n * @extends {ol.ImageBase}\n * @param {ol.Extent} extent Extent.\n * @param {number|undefined} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {string} src Image source URI.\n * @param {?string} crossOrigin Cross origin.\n * @param {ol.ImageLoadFunctionType} imageLoadFunction Image load function.\n */\nconst _ol_Image_ = function(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\n\n  _ol_ImageBase_.call(this, extent, resolution, pixelRatio, ImageState.IDLE);\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.src_ = src;\n\n  /**\n   * @private\n   * @type {HTMLCanvasElement|Image|HTMLVideoElement}\n   */\n  this.image_ = new Image();\n  if (crossOrigin !== null) {\n    this.image_.crossOrigin = crossOrigin;\n  }\n\n  /**\n   * @private\n   * @type {Array.<ol.EventsKey>}\n   */\n  this.imageListenerKeys_ = null;\n\n  /**\n   * @protected\n   * @type {ol.ImageState}\n   */\n  this.state = ImageState.IDLE;\n\n  /**\n   * @private\n   * @type {ol.ImageLoadFunctionType}\n   */\n  this.imageLoadFunction_ = imageLoadFunction;\n\n};\n\ninherits(_ol_Image_, _ol_ImageBase_);\n\n\n/**\n * @inheritDoc\n * @api\n */\n_ol_Image_.prototype.getImage = function() {\n  return this.image_;\n};\n\n\n/**\n * Tracks loading or read errors.\n *\n * @private\n */\n_ol_Image_.prototype.handleImageError_ = function() {\n  this.state = ImageState.ERROR;\n  this.unlistenImage_();\n  this.changed();\n};\n\n\n/**\n * Tracks successful image load.\n *\n * @private\n */\n_ol_Image_.prototype.handleImageLoad_ = function() {\n  if (this.resolution === undefined) {\n    this.resolution = getHeight(this.extent) / this.image_.height;\n  }\n  this.state = ImageState.LOADED;\n  this.unlistenImage_();\n  this.changed();\n};\n\n\n/**\n * Load the image or retry if loading previously failed.\n * Loading is taken care of by the tile queue, and calling this method is\n * only needed for preloading or for reloading in case of an error.\n * @override\n * @api\n */\n_ol_Image_.prototype.load = function() {\n  if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n    this.state = ImageState.LOADING;\n    this.changed();\n    this.imageListenerKeys_ = [\n      _ol_events_.listenOnce(this.image_, EventType.ERROR,\n        this.handleImageError_, this),\n      _ol_events_.listenOnce(this.image_, EventType.LOAD,\n        this.handleImageLoad_, this)\n    ];\n    this.imageLoadFunction_(this, this.src_);\n  }\n};\n\n\n/**\n * @param {HTMLCanvasElement|Image|HTMLVideoElement} image Image.\n */\n_ol_Image_.prototype.setImage = function(image) {\n  this.image_ = image;\n};\n\n\n/**\n * Discards event handlers which listen for load completion or errors.\n *\n * @private\n */\n_ol_Image_.prototype.unlistenImage_ = function() {\n  this.imageListenerKeys_.forEach(_ol_events_.unlistenByKey);\n  this.imageListenerKeys_ = null;\n};\nexport default _ol_Image_;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/Image.js\n// module id = null\n// module chunks = ","/**\n * @module ol/source/ImageWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\nimport {inherits} from '../index.js';\nimport _ol_Image_ from '../Image.js';\nimport {assert} from '../asserts.js';\nimport _ol_events_ from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, getCenter, getForViewAndSize, getHeight, getWidth} from '../extent.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transform} from '../proj.js';\nimport _ol_reproj_ from '../reproj.js';\nimport ImageSource from '../source/Image.js';\nimport WMSServerType from '../source/WMSServerType.js';\nimport _ol_string_ from '../string.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @constructor\n * @fires ol.source.Image.Event\n * @extends {ol.source.Image}\n * @param {olx.source.ImageWMSOptions=} opt_options Options.\n * @api\n */\nconst ImageWMS = function(opt_options) {\n\n  const options = opt_options || {};\n\n  ImageSource.call(this, {\n    attributions: options.attributions,\n    projection: options.projection,\n    resolutions: options.resolutions\n  });\n\n  /**\n   * @private\n   * @type {?string}\n   */\n  this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.url_ = options.url;\n\n  /**\n   * @private\n   * @type {ol.ImageLoadFunctionType}\n   */\n  this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?\n    options.imageLoadFunction : ImageSource.defaultImageLoadFunction;\n\n  /**\n   * @private\n   * @type {!Object}\n   */\n  this.params_ = options.params || {};\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.v13_ = true;\n  this.updateV13_();\n\n  /**\n   * @private\n   * @type {ol.source.WMSServerType|undefined}\n   */\n  this.serverType_ = /** @type {ol.source.WMSServerType|undefined} */ (options.serverType);\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n  /**\n   * @private\n   * @type {ol.Image}\n   */\n  this.image_ = null;\n\n  /**\n   * @private\n   * @type {ol.Size}\n   */\n  this.imageSize_ = [0, 0];\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.renderedRevision_ = 0;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n\n};\n\ninherits(ImageWMS, ImageSource);\n\n\n/**\n * @const\n * @type {ol.Size}\n * @private\n */\nImageWMS.GETFEATUREINFO_IMAGE_SIZE_ = [101, 101];\n\n\n/**\n * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n * constructed.\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {ol.ProjectionLike} projection Projection.\n * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n *     in the `LAYERS` parameter will be used. `VERSION` should not be\n *     specified here.\n * @return {string|undefined} GetFeatureInfo URL.\n * @api\n */\nImageWMS.prototype.getGetFeatureInfoUrl = function(coordinate, resolution, projection, params) {\n  if (this.url_ === undefined) {\n    return undefined;\n  }\n  const projectionObj = getProjection(projection);\n  const sourceProjectionObj = this.getProjection();\n\n  if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n    resolution = _ol_reproj_.calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n    coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n  }\n\n  const extent = getForViewAndSize(coordinate, resolution, 0,\n    ImageWMS.GETFEATUREINFO_IMAGE_SIZE_);\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetFeatureInfo',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true,\n    'QUERY_LAYERS': this.params_['LAYERS']\n  };\n  assign(baseParams, this.params_, params);\n\n  const x = Math.floor((coordinate[0] - extent[0]) / resolution);\n  const y = Math.floor((extent[3] - coordinate[1]) / resolution);\n  baseParams[this.v13_ ? 'I' : 'X'] = x;\n  baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n  return this.getRequestUrl_(\n    extent, ImageWMS.GETFEATUREINFO_IMAGE_SIZE_,\n    1, sourceProjectionObj || projectionObj, baseParams);\n};\n\n\n/**\n * Get the user-provided params, i.e. those passed to the constructor through\n * the \"params\" option, and possibly updated using the updateParams method.\n * @return {Object} Params.\n * @api\n */\nImageWMS.prototype.getParams = function() {\n  return this.params_;\n};\n\n\n/**\n * @inheritDoc\n */\nImageWMS.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {\n\n  if (this.url_ === undefined) {\n    return null;\n  }\n\n  resolution = this.findNearestResolution(resolution);\n\n  if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n    pixelRatio = 1;\n  }\n\n  const imageResolution = resolution / pixelRatio;\n\n  const center = getCenter(extent);\n  const viewWidth = Math.ceil(getWidth(extent) / imageResolution);\n  const viewHeight = Math.ceil(getHeight(extent) / imageResolution);\n  const viewExtent = getForViewAndSize(center, imageResolution, 0,\n    [viewWidth, viewHeight]);\n  const requestWidth = Math.ceil(this.ratio_ * getWidth(extent) / imageResolution);\n  const requestHeight = Math.ceil(this.ratio_ * getHeight(extent) / imageResolution);\n  const requestExtent = getForViewAndSize(center, imageResolution, 0,\n    [requestWidth, requestHeight]);\n\n  const image = this.image_;\n  if (image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), viewExtent)) {\n    return image;\n  }\n\n  const params = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetMap',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true\n  };\n  assign(params, this.params_);\n\n  this.imageSize_[0] = Math.round(getWidth(requestExtent) / imageResolution);\n  this.imageSize_[1] = Math.round(getHeight(requestExtent) / imageResolution);\n\n  const url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio,\n    projection, params);\n\n  this.image_ = new _ol_Image_(requestExtent, resolution, pixelRatio,\n    url, this.crossOrigin_, this.imageLoadFunction_);\n\n  this.renderedRevision_ = this.getRevision();\n\n  _ol_events_.listen(this.image_, EventType.CHANGE,\n    this.handleImageChange, this);\n\n  return this.image_;\n\n};\n\n\n/**\n * Return the image load function of the source.\n * @return {ol.ImageLoadFunctionType} The image load function.\n * @api\n */\nImageWMS.prototype.getImageLoadFunction = function() {\n  return this.imageLoadFunction_;\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {ol.Size} size Size.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @param {Object} params Params.\n * @return {string} Request URL.\n * @private\n */\nImageWMS.prototype.getRequestUrl_ = function(extent, size, pixelRatio, projection, params) {\n\n  assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n  params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n  if (!('STYLES' in this.params_)) {\n    params['STYLES'] = '';\n  }\n\n  if (pixelRatio != 1) {\n    switch (this.serverType_) {\n      case WMSServerType.GEOSERVER:\n        const dpi = (90 * pixelRatio + 0.5) | 0;\n        if ('FORMAT_OPTIONS' in params) {\n          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n        } else {\n          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n        }\n        break;\n      case WMSServerType.MAPSERVER:\n        params['MAP_RESOLUTION'] = 90 * pixelRatio;\n        break;\n      case WMSServerType.CARMENTA_SERVER:\n      case WMSServerType.QGIS:\n        params['DPI'] = 90 * pixelRatio;\n        break;\n      default:\n        assert(false, 8); // Unknown `serverType` configured\n        break;\n    }\n  }\n\n  params['WIDTH'] = size[0];\n  params['HEIGHT'] = size[1];\n\n  const axisOrientation = projection.getAxisOrientation();\n  let bbox;\n  if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n    bbox = [extent[1], extent[0], extent[3], extent[2]];\n  } else {\n    bbox = extent;\n  }\n  params['BBOX'] = bbox.join(',');\n\n  return appendParams(/** @type {string} */ (this.url_), params);\n};\n\n\n/**\n * Return the URL used for this WMS source.\n * @return {string|undefined} URL.\n * @api\n */\nImageWMS.prototype.getUrl = function() {\n  return this.url_;\n};\n\n\n/**\n * Set the image load function of the source.\n * @param {ol.ImageLoadFunctionType} imageLoadFunction Image load function.\n * @api\n */\nImageWMS.prototype.setImageLoadFunction = function(\n  imageLoadFunction) {\n  this.image_ = null;\n  this.imageLoadFunction_ = imageLoadFunction;\n  this.changed();\n};\n\n\n/**\n * Set the URL to use for requests.\n * @param {string|undefined} url URL.\n * @api\n */\nImageWMS.prototype.setUrl = function(url) {\n  if (url != this.url_) {\n    this.url_ = url;\n    this.image_ = null;\n    this.changed();\n  }\n};\n\n\n/**\n * Update the user-provided params.\n * @param {Object} params Params.\n * @api\n */\nImageWMS.prototype.updateParams = function(params) {\n  assign(this.params_, params);\n  this.updateV13_();\n  this.image_ = null;\n  this.changed();\n};\n\n\n/**\n * @private\n */\nImageWMS.prototype.updateV13_ = function() {\n  const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n  this.v13_ = _ol_string_.compareVersions(version, '1.3') >= 0;\n};\nexport default ImageWMS;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/ImageWMS.js\n// module id = null\n// module chunks = ","/**\n * @module ngeo.CustomEvent\n*/\nimport * as olBase from 'ol/index.js';\nimport olEventsEvent from 'ol/events/Event.js';\n\n/**\n * @constructor\n * @extends {ol.events.Event}\n * @param {string} type Event type.\n * @param {T} detail Event Detail.\n * @template T\n */\nconst exports = function(type, detail = {}) {\n\n  olEventsEvent.call(this, type);\n\n  /**\n   * @type {T}\n   */\n  this.detail = detail;\n\n};\n\nolBase.inherits(exports, olEventsEvent);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/CustomEvent.js","/**\n * @module ol/source/TileWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\nimport {inherits} from '../index.js';\nimport {assert} from '../asserts.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {assign} from '../obj.js';\nimport {modulo} from '../math.js';\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\nimport _ol_reproj_ from '../reproj.js';\nimport _ol_size_ from '../size.js';\nimport TileImage from '../source/TileImage.js';\nimport WMSServerType from '../source/WMSServerType.js';\nimport _ol_tilecoord_ from '../tilecoord.js';\nimport _ol_string_ from '../string.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.TileWMSOptions=} opt_options Tile WMS options.\n * @api\n */\nconst TileWMS = function(opt_options) {\n\n  const options = opt_options || {};\n\n  const params = options.params || {};\n\n  const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n  TileImage.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    opaque: !transparent,\n    projection: options.projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileClass: options.tileClass,\n    tileGrid: options.tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n  /**\n   * @private\n   * @type {!Object}\n   */\n  this.params_ = params;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.v13_ = true;\n\n  /**\n   * @private\n   * @type {ol.source.WMSServerType|undefined}\n   */\n  this.serverType_ = /** @type {ol.source.WMSServerType|undefined} */ (options.serverType);\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n  /**\n   * @private\n   * @type {ol.Extent}\n   */\n  this.tmpExtent_ = createEmpty();\n\n  this.updateV13_();\n  this.setKey(this.getKeyForParams_());\n\n};\n\ninherits(TileWMS, TileImage);\n\n\n/**\n * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n * constructed.\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {ol.ProjectionLike} projection Projection.\n * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n *     in the `LAYERS` parameter will be used. `VERSION` should not be\n *     specified here.\n * @return {string|undefined} GetFeatureInfo URL.\n * @api\n */\nTileWMS.prototype.getGetFeatureInfoUrl = function(coordinate, resolution, projection, params) {\n  const projectionObj = getProjection(projection);\n  const sourceProjectionObj = this.getProjection();\n\n  let tileGrid = this.getTileGrid();\n  if (!tileGrid) {\n    tileGrid = this.getTileGridForProjection(projectionObj);\n  }\n\n  const tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);\n\n  if (tileGrid.getResolutions().length <= tileCoord[0]) {\n    return undefined;\n  }\n\n  let tileResolution = tileGrid.getResolution(tileCoord[0]);\n  let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n  let tileSize = _ol_size_.toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n\n  const gutter = this.gutter_;\n  if (gutter !== 0) {\n    tileSize = _ol_size_.buffer(tileSize, gutter, this.tmpSize);\n    tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n  }\n\n  if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n    tileResolution = _ol_reproj_.calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);\n    tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);\n    coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n  }\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetFeatureInfo',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true,\n    'QUERY_LAYERS': this.params_['LAYERS']\n  };\n  assign(baseParams, this.params_, params);\n\n  const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n  const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n\n  baseParams[this.v13_ ? 'I' : 'X'] = x;\n  baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n    1, sourceProjectionObj || projectionObj, baseParams);\n};\n\n\n/**\n * @inheritDoc\n */\nTileWMS.prototype.getGutterInternal = function() {\n  return this.gutter_;\n};\n\n\n/**\n * Get the user-provided params, i.e. those passed to the constructor through\n * the \"params\" option, and possibly updated using the updateParams method.\n * @return {Object} Params.\n * @api\n */\nTileWMS.prototype.getParams = function() {\n  return this.params_;\n};\n\n\n/**\n * @param {ol.TileCoord} tileCoord Tile coordinate.\n * @param {ol.Size} tileSize Tile size.\n * @param {ol.Extent} tileExtent Tile extent.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @param {Object} params Params.\n * @return {string|undefined} Request URL.\n * @private\n */\nTileWMS.prototype.getRequestUrl_ = function(tileCoord, tileSize, tileExtent,\n  pixelRatio, projection, params) {\n\n  const urls = this.urls;\n  if (!urls) {\n    return undefined;\n  }\n\n  params['WIDTH'] = tileSize[0];\n  params['HEIGHT'] = tileSize[1];\n\n  params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n  if (!('STYLES' in this.params_)) {\n    params['STYLES'] = '';\n  }\n\n  if (pixelRatio != 1) {\n    switch (this.serverType_) {\n      case WMSServerType.GEOSERVER:\n        const dpi = (90 * pixelRatio + 0.5) | 0;\n        if ('FORMAT_OPTIONS' in params) {\n          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n        } else {\n          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n        }\n        break;\n      case WMSServerType.MAPSERVER:\n        params['MAP_RESOLUTION'] = 90 * pixelRatio;\n        break;\n      case WMSServerType.CARMENTA_SERVER:\n      case WMSServerType.QGIS:\n        params['DPI'] = 90 * pixelRatio;\n        break;\n      default:\n        assert(false, 52); // Unknown `serverType` configured\n        break;\n    }\n  }\n\n  const axisOrientation = projection.getAxisOrientation();\n  const bbox = tileExtent;\n  if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n    let tmp;\n    tmp = tileExtent[0];\n    bbox[0] = tileExtent[1];\n    bbox[1] = tmp;\n    tmp = tileExtent[2];\n    bbox[2] = tileExtent[3];\n    bbox[3] = tmp;\n  }\n  params['BBOX'] = bbox.join(',');\n\n  let url;\n  if (urls.length == 1) {\n    url = urls[0];\n  } else {\n    const index = modulo(_ol_tilecoord_.hash(tileCoord), urls.length);\n    url = urls[index];\n  }\n  return appendParams(url, params);\n};\n\n\n/**\n * @inheritDoc\n */\nTileWMS.prototype.getTilePixelRatio = function(pixelRatio) {\n  return (!this.hidpi_ || this.serverType_ === undefined) ? 1 :\n  /** @type {number} */ (pixelRatio);\n};\n\n\n/**\n * @private\n * @return {string} The key for the current params.\n */\nTileWMS.prototype.getKeyForParams_ = function() {\n  let i = 0;\n  const res = [];\n  for (const key in this.params_) {\n    res[i++] = key + '-' + this.params_[key];\n  }\n  return res.join('/');\n};\n\n\n/**\n * @inheritDoc\n */\nTileWMS.prototype.fixedTileUrlFunction = function(tileCoord, pixelRatio, projection) {\n\n  let tileGrid = this.getTileGrid();\n  if (!tileGrid) {\n    tileGrid = this.getTileGridForProjection(projection);\n  }\n\n  if (tileGrid.getResolutions().length <= tileCoord[0]) {\n    return undefined;\n  }\n\n  if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n    pixelRatio = 1;\n  }\n\n  const tileResolution = tileGrid.getResolution(tileCoord[0]);\n  let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n  let tileSize = _ol_size_.toSize(\n    tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n  const gutter = this.gutter_;\n  if (gutter !== 0) {\n    tileSize = _ol_size_.buffer(tileSize, gutter, this.tmpSize);\n    tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n  }\n\n  if (pixelRatio != 1) {\n    tileSize = _ol_size_.scale(tileSize, pixelRatio, this.tmpSize);\n  }\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetMap',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true\n  };\n  assign(baseParams, this.params_);\n\n  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n    pixelRatio, projection, baseParams);\n};\n\n/**\n * Update the user-provided params.\n * @param {Object} params Params.\n * @api\n */\nTileWMS.prototype.updateParams = function(params) {\n  assign(this.params_, params);\n  this.updateV13_();\n  this.setKey(this.getKeyForParams_());\n};\n\n\n/**\n * @private\n */\nTileWMS.prototype.updateV13_ = function() {\n  const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n  this.v13_ = _ol_string_.compareVersions(version, '1.3') >= 0;\n};\nexport default TileWMS;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/TileWMS.js\n// module id = 23\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31","/**\n * @module ngeo.datasource.DataSources\n*/\nconst exports = {};\nimport ngeoBase from 'ngeo/index.js';\nimport olCollection from 'ol/Collection.js';\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('ngeoDataSources', []);\n// DataSources with the ngeox.datasource.DataSources type.\nexports.module.value('ngeoDataSources', new olCollection());\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/datasource/DataSources.js","/**\n * @module ngeo.datasource.DataSource\n*/\nimport ngeoBase from 'ngeo/index.js';\n\n/**\n * @implements {ngeox.datasource.DataSource}\n */\nconst exports = class {\n\n  /**\n   * A `ngeo.datasource.DataSource` represents a single source of data, which\n   * can combine different type of servers to display or fetch the data. It can\n   * serve as a point of entry to get all the information about a single data\n   * source.\n   *\n   * You can use the information in a data source to do all sorts of things:\n   *  - create `ol.layer.Layer` objects using the WMS, WMTS or even WFS\n   *    information\n   *  - issue WMS/WFS queries\n   *  - know whether the data is visible or not\n   *  - apply filter rules on it\n   *\n   * @struct\n   * @param {ngeox.datasource.DataSourceOptions} options Options.\n   */\n  constructor(options) {\n\n    // === DYNAMIC properties (i.e. that can change / be watched ===\n\n    /**\n     * A data source is considered 'in range' when it is synchronized to\n     * a map view and the resolution of that view is within the range of\n     * the `maxResolution` and `minResolution`. These 2 properties are\n     * required for the `inRange` property to be dynamic, otherwise its\n     * value is always `true` by default.\n     *\n     * The synchronization is made in the `ngeo.datasource.SyncDataSourcesMap`\n     * service.\n     *\n     * @type {boolean}\n     * @private\n     */\n    this.inRange_ = options.inRange !== false;\n\n    /**\n     * Whether the data source is visible or not, i.e. whether its is ON or OFF.\n     * Defaults to `false`.\n     * @type {boolean}\n     * @private\n     */\n    this.visible_ = options.visible === true;\n\n\n    // === STATIC properties (i.e. that never change) ===\n\n    /**\n     * The attributes of the data source.\n     *\n     * Note: `attributes` is not using the conventionnal getter/setter due\n     * to:  See: https://github.com/google/closure-compiler/issues/1089\n     *\n     * @type {?Array.<ngeox.Attribute>}\n     * @export\n     */\n    this.attributes = options.attributes || null;\n\n    /**\n     * (Required) The data source id.\n     * @type {number}\n     * @private\n     */\n    this.id_ = options.id;\n\n    /**\n     * The name of an attribute among the attributes of the data source.\n     * The value of that attribute, in records, can be used to identify\n     * each record individually.\n     * @type {string|undefined}\n     * @private\n     */\n    this.identifierAttribute_ = options.identifierAttribute;\n\n    /**\n     * Maximum resolution where the data source can be displayed or queried.\n     * @type {number|undefined}\n     * @private\n     */\n    this.maxResolution_ = options.maxResolution;\n\n    /**\n     * Minimum resolution where the data source can be displayed or queried.\n     * @type {number|undefined}\n     * @private\n     */\n    this.minResolution_ = options.minResolution;\n\n    /**\n     * (Required) A human-readable name for the data source.\n     * @type {string}\n     * @private\n     */\n    this.name_ = options.name;\n  }\n\n  // ========================================\n  // === Dynamic property getters/setters ===\n  // ========================================\n\n  /**\n   * @return {boolean} In range\n   * @export\n   */\n  get inRange() {\n    return this.inRange_;\n  }\n\n  /**\n   * @param {boolean} inRange In range\n   * @export\n   */\n  set inRange(inRange) {\n    this.inRange_ = inRange;\n  }\n\n  /**\n   * @return {boolean} Visible\n   * @export\n   */\n  get visible() {\n    return this.visible_;\n  }\n\n  /**\n   * @param {boolean} visible Visible\n   * @export\n   */\n  set visible(visible) {\n    this.visible_ = visible;\n  }\n\n  // =======================================\n  // === Static property getters/setters ===\n  // =======================================\n\n  /**\n   * @return {?Array.<ngeox.Attribute>} Attributes\n   * @export\n   */\n  getAttributes() {\n    return this.attributes;\n  }\n\n  /**\n   * @param {?Array.<ngeox.Attribute>} attributes Attributes\n   * @export\n   */\n  setAttributes(attributes) {\n    this.attributes = attributes;\n  }\n\n  /**\n   * @return {number} Id\n   * @export\n   */\n  get id() {\n    return this.id_;\n  }\n\n  /**\n   * @return {string|undefined} Identifier attribute\n   * @export\n   */\n  get identifierAttribute() {\n    return this.identifierAttribute_;\n  }\n\n  /**\n   * @return {number|undefined} Maximum resolution\n   * @export\n   */\n  get maxResolution() {\n    return this.maxResolution_;\n  }\n\n  /**\n   * @return {number|undefined} Minimum resolution\n   * @export\n   */\n  get minResolution() {\n    return this.minResolution_;\n  }\n\n  /**\n   * @return {string} Name\n   * @export\n   */\n  get name() {\n    return this.name_;\n  }\n\n\n  // ===================================\n  // === Calculated property getters ===\n  // ===================================\n\n  /**\n   * Whether the data source is queryable or not.\n   * @return {boolean} Whether the data source is queryable or not.\n   * @export\n   */\n  get queryable() {\n    return false;\n  }\n\n  /**\n   * @return {boolean} Whether the data source supports a dynamic `inRange`\n   *     property or not, i.e. whether it can be calculated.\n   * @export\n   */\n  get supportsDynamicInRange() {\n    return this.maxResolution !== null || this.minResolution !== null;\n  }\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/datasource/DataSource.js","/**\n * @module app.asitvd\n*/\nconst exports = {};\n\nimport './asitvd.css';\nimport './common_dependencies.js';\nimport ngeoSourceAsitVD from 'ngeo/source/AsitVD.js';\n\nimport olMap from 'ol/Map.js';\nimport olView from 'ol/View.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport ngeoMapModule from 'ngeo/map/module.js';\n\n\n/** @type {!angular.Module} */\napp.module = angular.module('app', [\n  ngeo.module.name,\n  ngeoMapModule.name\n]);\n\n\n/**\n * @constructor\n *//* @ngInject\n */\napp.MainController = function() {\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map = new olMap({\n    layers: [\n      new olLayerTile({\n        source: new ngeoSourceAsitVD({\n          layer: 'asitvd.fond_couleur'\n        })\n      })\n    ],\n    view: new olView({\n      resolutions: [250, 100, 50, 20, 10, 5, 2.5, 2, 1.5, 1, 0.5],\n      center: [535000, 154000],\n      zoom: 0\n    })\n  });\n};\n\napp.module.controller('MainController', app.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/asitvd.js","/**\n * @module ngeo.map.FeatureOverlayMgr\n*/\nimport ngeoBase from 'ngeo/index.js';\nimport * as olBase from 'ol/index.js';\nimport olLayerVector from 'ol/layer/Vector.js';\nimport * as olObj from 'ol/obj.js';\nimport olSourceVector from 'ol/source/Vector.js';\nimport olStyleStyle from 'ol/style/Style.js';\nimport googAsserts from 'goog/asserts.js';\nimport ngeoMapFeatureOverlay from 'ngeo/map/FeatureOverlay.js';\n\n/**\n * Provides a service that wraps an \"unmanaged\" vector layer,\n * used as a shared vector layer across the application.\n *\n * Example:\n *\n * The application's main component/controller initializes the feature\n * overlay manager with the map:\n *\n *     ngeoFeatureOverlayMgr.init(map);\n *\n * Once initialized, components of the application can use the manager to\n * create a feature overlay, configuring it with specific styles:\n *\n *     let featureOverlay = ngeoFeatureOverlayMgr.getFeatureOverlay();\n *     featureOverlay.setStyle(myStyle);\n *     featureOverlay.addFeature(myFeature);\n *\n * @constructor\n * @struct\n * @ngdoc service\n * @ngname ngeoFeatureOverlayMgr\n */\nconst exports = function() {\n\n  /**\n   * @type {Object.<string, number>}\n   * @private\n   */\n  this.featureUidToGroupIndex_ = {};\n\n  /**\n   * @type {Array.<ngeox.MapFeatureOverlayGroup>}\n   * @private\n   */\n  this.groups_ = [];\n\n  /**\n   * @type {ol.source.Vector}\n   * @private\n   */\n  this.source_ = new olSourceVector({\n    useSpatialIndex: false\n  });\n\n  /**\n   * @type {ol.layer.Vector}\n   * @private\n   */\n  this.layer_ = new olLayerVector({\n    source: this.source_,\n    style: this.styleFunction_.bind(this),\n    updateWhileAnimating: true,\n    updateWhileInteracting: true\n  });\n\n};\n\n\n/**\n * @param {ol.Feature} feature The feature to add.\n * @param {number} groupIndex The group groupIndex.\n * @export\n */\nexports.prototype.addFeature = function(feature, groupIndex) {\n  googAsserts.assert(groupIndex >= 0);\n  googAsserts.assert(groupIndex < this.groups_.length);\n  const featureUid = olBase.getUid(feature).toString();\n  this.featureUidToGroupIndex_[featureUid] = groupIndex;\n  this.groups_[groupIndex].features[featureUid] = feature;\n  this.source_.addFeature(feature);\n};\n\n\n/**\n * @param {ol.Feature} feature The feature to add.\n * @param {number} groupIndex The group groupIndex.\n * @export\n */\nexports.prototype.removeFeature = function(feature, groupIndex) {\n  googAsserts.assert(groupIndex >= 0);\n  googAsserts.assert(groupIndex < this.groups_.length);\n  const featureUid = olBase.getUid(feature).toString();\n  delete this.featureUidToGroupIndex_[featureUid];\n  delete this.groups_[groupIndex].features[featureUid];\n  this.source_.removeFeature(feature);\n};\n\n\n/**\n * @param {number} groupIndex The group groupIndex.\n * @export\n */\nexports.prototype.clear = function(groupIndex) {\n  googAsserts.assert(groupIndex >= 0);\n  googAsserts.assert(groupIndex < this.groups_.length);\n  const group = this.groups_[groupIndex];\n  for (const featureUid in group.features) {\n    this.removeFeature(group.features[featureUid], groupIndex);\n  }\n  googAsserts.assert(olObj.isEmpty(group.features));\n};\n\n\n/**\n * @return {ol.layer.Vector} The vector layer used internally.\n * @export\n */\nexports.prototype.getLayer = function() {\n  return this.layer_;\n};\n\n\n/**\n * @return {ngeo.map.FeatureOverlay} Feature overlay.\n * @export\n */\nexports.prototype.getFeatureOverlay = function() {\n  const groupIndex = this.groups_.length;\n  this.groups_.push({\n    styleFunction: olStyleStyle.defaultFunction,\n    features: {}\n  });\n  return new ngeoMapFeatureOverlay(this, groupIndex);\n};\n\n\n/**\n * @param {ol.Map} map Map.\n * @export\n */\nexports.prototype.init = function(map) {\n  this.layer_.setMap(map);\n};\n\n\n/**\n * @param {ol.style.Style|Array.<ol.style.Style>|ol.StyleFunction} style\n * Style.\n * @param {number} groupIndex Group index.\n * @export\n */\nexports.prototype.setStyle = function(style, groupIndex) {\n  googAsserts.assert(groupIndex >= 0);\n  googAsserts.assert(groupIndex < this.groups_.length);\n  this.groups_[groupIndex].styleFunction = style === null ?\n    olStyleStyle.defaultFunction : olStyleStyle.createFunction(style);\n};\n\n\n/**\n * @param {ol.Feature|ol.render.Feature} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array.<ol.style.Style>|ol.style.Style} Styles.\n * @private\n */\nexports.prototype.styleFunction_ = function(feature, resolution) {\n  const featureUid = olBase.getUid(feature).toString();\n  googAsserts.assert(featureUid in this.featureUidToGroupIndex_);\n  const groupIndex = this.featureUidToGroupIndex_[featureUid];\n  const group = this.groups_[groupIndex];\n  return group.styleFunction(feature, resolution);\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('ngeoFeatureOverlayMgr', [\n  ngeoMapFeatureOverlay.module.name\n]);\nexports.module.service('ngeoFeatureOverlayMgr', exports);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/map/FeatureOverlayMgr.js","/* eslint valid-jsdoc: 0, prefer-rest-params: 0,  */\n// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Utilities to check the preconditions, postconditions and\n * invariants runtime.\n *\n * Methods in this package should be given special treatment by the compiler\n * for type-inference. For example, <code>goog.asserts.assert(foo)</code>\n * will restrict <code>foo</code> to a truthy value.\n *\n * The compiler has an option to disable asserts. So code like:\n * <code>\n * var x = goog.asserts.assert(foo()); goog.asserts.assert(bar());\n * </code>\n * will be transformed into:\n * <code>\n * var x = foo();\n * </code>\n * The compiler will leave in foo() (because its return value is used),\n * but it will remove bar() because it assumes it does not have side-effects.\n *\n * @author agrieve@google.com (Andrew Grieve)\n */\n\nconst exports = {};\n\n/**\n * Throws an exception with the given message and \"Assertion failed\" prefixed\n * onto it.\n * @param {string} defaultMessage The message to use if givenMessage is empty.\n * @param {Array<*>} defaultArgs The substitution arguments for defaultMessage.\n * @param {string|undefined} givenMessage Message supplied by the caller.\n * @param {Array<*>} givenArgs The substitution arguments for givenMessage.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n * @private\n */\nexports.doAssertFailure_ = function(\n  defaultMessage, defaultArgs, givenMessage, givenArgs) {\n  let message = 'Assertion failed';\n  let args;\n  if (givenMessage) {\n    message += `: ${givenMessage}`;\n    args = givenArgs;\n  } else if (defaultMessage) {\n    message += `: ${defaultMessage}`;\n    args = defaultArgs;\n  }\n  // The '' + works around an Opera 10 bug in the unit tests. Without it,\n  // a stack trace is added to var message above. With this, a stack trace is\n  // not added until this line (it causes the extra garbage to be added after\n  // the assertion message instead of in the middle of it).\n  const e = new exports.AssertionError(`${message}`, args || []);\n  exports.errorHandler_(e);\n};\n\n\n/**\n * Sets a custom error handler that can be used to customize the behavior of\n * assertion failures, for example by turning all assertion failures into log\n * messages.\n * @param {function(!goog.asserts.AssertionError)} errorHandler\n */\nexports.setErrorHandler = function(errorHandler) {\n  if (exports.ENABLE_ASSERTS) {\n    exports.errorHandler_ = errorHandler;\n  }\n};\n\n\n/**\n * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS is\n * true.\n * @template T\n * @param {T} condition The condition to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {T} The value of the condition.\n * @throws {goog.asserts.AssertionError} When the condition evaluates to false.\n */\nexports.assert = function(condition, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !condition) {\n    exports.doAssertFailure_(\n      '', null, opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return condition;\n};\n\n\n/**\n * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case\n * when we want to add a check in the unreachable area like switch-case\n * statement:\n *\n * <pre>\n *  switch(type) {\n *    case FOO: doSomething(); break;\n *    case BAR: doSomethingElse(); break;\n *    default: goog.asserts.fail('Unrecognized type: ' + type);\n *      // We have only 2 types - \"default:\" section is unreachable code.\n *  }\n * </pre>\n *\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} Failure.\n */\nexports.fail = function(opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS) {\n    exports.errorHandler_(\n      new exports.AssertionError(\n        `Failure${opt_message ? `: ${opt_message}` : ''}`,\n        Array.prototype.slice.call(arguments, 1)));\n  }\n};\n\n\n/**\n * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {number} The value, guaranteed to be a number when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n */\nexports.assertNumber = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isNumber(value)) {\n    exports.doAssertFailure_(\n      'Expected number but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {number} */ (value);\n};\n\n\n/**\n * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {string} The value, guaranteed to be a string when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a string.\n */\nexports.assertString = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isString(value)) {\n    exports.doAssertFailure_(\n      'Expected string but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {string} */ (value);\n};\n\n\n/**\n * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Function} The value, guaranteed to be a function when asserts\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a function.\n */\nexports.assertFunction = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isFunction(value)) {\n    exports.doAssertFailure_(\n      'Expected function but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Function} */ (value);\n};\n\n\n/**\n * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Object} The value, guaranteed to be a non-null object.\n * @throws {goog.asserts.AssertionError} When the value is not an object.\n */\nexports.assertObject = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isObject(value)) {\n    exports.doAssertFailure_(\n      'Expected object but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Object} */ (value);\n};\n\n\n/**\n * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Array<?>} The value, guaranteed to be a non-null array.\n * @throws {goog.asserts.AssertionError} When the value is not an array.\n */\nexports.assertArray = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isArray(value)) {\n    exports.doAssertFailure_(\n      'Expected array but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Array<?>} */ (value);\n};\n\n\n/**\n * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {boolean} The value, guaranteed to be a boolean when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a boolean.\n */\nexports.assertBoolean = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isBoolean(value)) {\n    exports.doAssertFailure_(\n      'Expected boolean but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {boolean} */ (value);\n};\n\n\n/**\n * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Element} The value, likely to be a DOM Element when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not an Element.\n */\nexports.assertElement = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS &&\n      (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {\n    exports.doAssertFailure_(\n      'Expected Element but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Element} */ (value);\n};\n\n\n/**\n * Checks if the value is an instance of the user-defined type if\n * goog.asserts.ENABLE_ASSERTS is true.\n *\n * The compiler may tighten the type returned by this function.\n *\n * @param {?} value The value to check.\n * @param {function(new: T, ...)} type A user-defined constructor.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} When the value is not an instance of\n *     type.\n * @return {T}\n * @template T\n */\nexports.assertInstanceof = function(value, type, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !(value instanceof type)) {\n    exports.doAssertFailure_(\n      'Expected instanceof %s but got %s.',\n      [exports.getType_(type), exports.getType_(value)],\n      opt_message, Array.prototype.slice.call(arguments, 3));\n  }\n  return value;\n};\n\n\n/**\n * Checks that no enumerable keys are present in Object.prototype. Such keys\n * would break most code that use {@code for (var ... in ...)} loops.\n */\nexports.assertObjectPrototypeIsIntact = function() {\n  for (const key in Object.prototype) {\n    exports.fail(`${key} should not be enumerable in Object.prototype.`);\n  }\n};\n\n\n/**\n * Returns the type of a value. If a constructor is passed, and a suitable\n * string cannot be found, 'unknown type name' will be returned.\n * @param {*} value A constructor, object, or primitive.\n * @return {string} The best display name for the value, or 'unknown type name'.\n * @private\n */\nexports.getType_ = function(value) {\n  if (value instanceof Function) {\n    return value.displayName || value.name || 'unknown type name';\n  } else if (value instanceof Object) {\n    return value.constructor.displayName || value.constructor.name ||\n        Object.prototype.toString.call(value);\n  } else {\n    return value === null ? 'null' : typeof value;\n  }\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/goog.asserts.js","/**\n * @module ngeo.map.module\n*/\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoMapBackgroundLayerMgr from 'ngeo/map/BackgroundLayerMgr.js';\nimport ngeoMapDirective from 'ngeo/map/directive.js';\nimport ngeoMapFeatureOverlayMgr from 'ngeo/map/FeatureOverlayMgr.js';\nimport ngeoMapRecenter from 'ngeo/map/recenter.js';\nimport ngeoMapResizemap from 'ngeo/map/resizemap.js';\nimport ngeoMapScaleselector from 'ngeo/map/scaleselector.js';\n\n/**\n * Also related to the map but not included in the module:\n *  - ngeo.map.FeatureOverlay (already required by ngeo.map.FeatureOverlayMgr)\n *\n * @type {!angular.Module}\n */\nconst exports = angular.module('ngeoMapModule', [\n  ngeoBase.module.name, // Change me when all dependencies are in a module.\n  ngeoMapBackgroundLayerMgr.module.name,\n  ngeoMapDirective.name,\n  ngeoMapFeatureOverlayMgr.module.name,\n  ngeoMapRecenter.name,\n  ngeoMapResizemap.name,\n  ngeoMapScaleselector.name\n]);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/map/module.js","/**\n * @module ngeo.map.BackgroundLayerMgr\n*/\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoCustomEvent from 'ngeo/CustomEvent.js';\nimport * as olBase from 'ol/index.js';\nimport olObservable from 'ol/Observable.js';\nimport olLayerGroup from 'ol/layer/Group.js';\nimport olLayerLayer from 'ol/layer/Layer.js';\nimport olSourceImageWMS from 'ol/source/ImageWMS.js';\nimport olSourceTileWMS from 'ol/source/TileWMS.js';\nimport olSourceWMTS from 'ol/source/WMTS.js';\n\n/**\n * Provides a service for setting/unsetting background layers\n * in maps.\n *\n * The notion of background/base layers doesn't exist in OpenLayers. This\n * service adds that notion.\n *\n * Setting a background layer to map is done with the `set` function:\n *\n *     ngeoBackgroundLayerMgr.set(map, layer);\n *\n * To unset the background layer pass `null` as the `layer` argument:\n *\n *     ngeoBackgroundLayerMgr.set(map, null);\n *\n * The `get` function returns the current background layer of the map passed\n * as an argument. `null` is returned if the map doesn't have a background\n * layer.\n *\n * The background layer is always added at index 0 in the map's layers\n * collection. When a background layer is set it is inserted (at index 0)\n * if the map does not already have a background layer, otherwise the\n * new background layer replaces the previous one at index 0.\n *\n * Users can subscribe to a 'change' event to get notified when the background\n * layer changes:\n *\n *     ngeoBackgroundLayerMgr.on('change', function(e) {\n *       // do something with the layer\n *       let layer = ngeoBackgroundLayerMgr.get();\n *       // know which layer was used before\n *       let previous = e.previous\n *     });\n *\n * See our live examples:\n * [../examples/backgroundlayer.html](../examples/backgroundlayer.html)\n * [../examples/backgroundlayerdropdown.html](../examples/backgroundlayerdropdown.html)\n *\n * @extends {ol.Observable}\n * @constructor\n * @struct\n * @ngdoc service\n * @ngname ngeoBackgroundLayerMgr\n */\nconst exports = function() {\n\n  olObservable.call(this);\n\n  /**\n   * Object used to track if maps have background layers.\n   * @type {Object.<string, boolean>}\n   * @private\n   */\n  this.mapUids_ = {};\n};\n\nolBase.inherits(exports, olObservable);\n\n\n/**\n * Return the current background layer of a given map. `null` is returned if\n * the map does not have a background layer.\n * @param {ol.Map} map Map.\n * @return {ol.layer.Base} layer The background layer.\n * @export\n */\nexports.prototype.get = function(map) {\n  const mapUid = olBase.getUid(map).toString();\n  return mapUid in this.mapUids_ ? map.getLayers().item(0) : null;\n};\n\n\n/**\n * Set the background layer of a map. If `layer` is `null` the background layer\n * is removed.\n * @param {ol.Map} map The map.\n * @param {ol.layer.Base} layer The new background layer.\n * @return {ol.layer.Base} The previous background layer.\n * @export\n */\nexports.prototype.set = function(map, layer) {\n  const mapUid = olBase.getUid(map).toString();\n  const previous = this.get(map);\n  if (previous !== null) {\n    googAsserts.assert(mapUid in this.mapUids_);\n    if (layer !== null) {\n      map.getLayers().setAt(0, layer);\n    } else {\n      map.getLayers().removeAt(0);\n      delete this.mapUids_[mapUid];\n    }\n  } else if (layer !== null) {\n    map.getLayers().insertAt(0, layer);\n    this.mapUids_[mapUid] = true;\n  }\n  /** @type {ngeox.BackgroundEvent} */\n  const event = new ngeoCustomEvent('change', {\n    current: layer,\n    previous: previous\n  });\n  this.dispatchEvent(event);\n\n  return previous;\n};\n\n/**\n * @param {ol.Map} map The map.\n * @param {Object.<string, string>} dimensions The global dimensions object.\n * @export\n */\nexports.prototype.updateDimensions = function(map, dimensions) {\n  const baseBgLayer = this.get(map);\n  if (baseBgLayer) {\n    let layers = [baseBgLayer];\n    if (baseBgLayer instanceof olLayerGroup) {\n      // Handle the first level of layers of the base background layer.\n      layers = baseBgLayer.getLayers().getArray();\n    }\n\n    layers.forEach((layer) => {\n      googAsserts.assertInstanceof(layer, olLayerLayer);\n      if (layer) {\n        let hasUpdates = false;\n        const updatedDimensions = {};\n        for (const key in layer.get('dimensions')) {\n          const value = dimensions[key];\n          if (value !== undefined) {\n            updatedDimensions[key] = value;\n            hasUpdates = true;\n          }\n        }\n        if (hasUpdates) {\n          const source = layer.getSource();\n          if (source instanceof olSourceWMTS) {\n            source.updateDimensions(updatedDimensions);\n            source.refresh();\n          } else if (source instanceof olSourceTileWMS || source instanceof olSourceImageWMS) {\n            source.updateParams(updatedDimensions);\n            source.refresh();\n          }\n        }\n      }\n    });\n  }\n};\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('ngeoBackgroundLayerMgr', []);\nexports.module.service('ngeoBackgroundLayerMgr', exports);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/map/BackgroundLayerMgr.js","/**\n * @module ngeo.map.directive\n*/\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\n\n// TODO Remove me, there should not be a dependency on datasources from the map.\nimport ngeoDatasourceSyncDataSourcesMap from 'ngeo/datasource/SyncDataSourcesMap.js';\n\nimport olEvents from 'ol/events.js';\nimport olMap from 'ol/Map.js';\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('ngeoMap', [\n  ngeoDatasourceSyncDataSourcesMap.module.name\n]);\n\nngeoBase.module.requires.push(exports.name);\n\n\n/**\n * Provides a directive used to insert a user-defined OpenLayers\n * map in the DOM. The directive does not create an isolate scope.\n *\n * Examples:\n *\n *   Simple:\n *\n *      <div ngeo-map=\"ctrl.map\"></div>\n *\n *   Manage window resizing:\n *\n *      <div\n *        ngeo-map=\"ctrl.map\"\n *        ngeo-map-manage-resize=\"ctrl.manageResize\"\n *        ngeo-map-resize-transition=\"ctrl.resizeTransition\">\n *      </div>\n *\n * See our live examples:\n * [../examples/permalink.html](../examples/permalink.html)\n * [../examples/simple.html](../examples/simple.html)\n *\n * @htmlAttribute {ol.Map} ngeo-map The map.\n * @param {angular.$window} $window The Angular $window service.\n * @param {ngeo.datasource.SyncDataSourcesMap} ngeoSyncDataSourcesMap Ngeo sync\n *     data sources map service.\n * @return {angular.Directive} Directive Definition Object.\n * @ngdoc directive\n * @ngname ngeoMap\n *//* @ngInject\n */\nexports.directive_ = function($window, ngeoSyncDataSourcesMap) {\n  return {\n    restrict: 'A',\n    /**\n     * @param {angular.Scope} scope Scope.\n     * @param {angular.JQLite} element Element.\n     * @param {angular.Attributes} attrs Atttributes.\n     */\n    link: (scope, element, attrs) => {\n      // Get the 'ol.Map' object from attributes and manage it accordingly\n      const attr = 'ngeoMap';\n      const prop = attrs[attr];\n\n      const map = scope.$eval(prop);\n      googAsserts.assertInstanceof(map, olMap);\n\n      map.setTarget(element[0]);\n\n      ngeoSyncDataSourcesMap.map = map;\n\n\n      // Get the 'window resize' attributes, which are optionnal. If defined,\n      // the browser window 'resize' event is listened to update the size of\n      // the map when fired. A transition option is also available to let any\n      // animation that may occur on the div of the map to smootly resize the\n      // map while in progress.\n      const manageResizeAttr = 'ngeoMapManageResize';\n      const manageResizeProp = attrs[manageResizeAttr];\n      const manageResize = scope.$eval(manageResizeProp);\n\n      if (manageResize) {\n        const resizeTransitionAttr = 'ngeoMapResizeTransition';\n        const resizeTransitionProp = attrs[resizeTransitionAttr];\n\n        const resizeTransition = /** @type {number|undefined} */ (\n          scope.$eval(resizeTransitionProp));\n\n        olEvents.listen(\n          $window,\n          'resize',\n          () => {\n            if (resizeTransition) {\n              // Resize with transition\n              const start = Date.now();\n              let loop = true;\n              const adjustSize = function() {\n                map.updateSize();\n                map.renderSync();\n                if (loop) {\n                  $window.requestAnimationFrame(adjustSize);\n                }\n                if (Date.now() - start > resizeTransition) {\n                  loop = false;\n                }\n              };\n              adjustSize();\n            } else {\n              // A single plain resize\n              map.updateSize();\n            }\n          }\n        );\n      }\n    }\n  };\n};\n\n// Register the directive in the module\nexports.directive('ngeoMap', exports.directive_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/map/directive.js","/**\n * @module ngeo.datasource.SyncDataSourcesMap\n*/\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoDatasourceDataSource from 'ngeo/datasource/DataSource.js';\n\n/** @suppress {extraRequire} */\nimport ngeoDatasourceDataSources from 'ngeo/datasource/DataSources.js';\n\nimport olEvents from 'ol/events.js';\nimport olObservable from 'ol/Observable.js';\nimport olView from 'ol/View.js';\nimport googAsserts from 'goog/asserts.js';\n\nconst exports = class {\n\n  /**\n   * This service is responsible of the synchronization between the ngeo\n   * collection of data sources and a specific map. It listens to events\n   * that come directly or indirectly from the map and update the inner\n   * properties of the data sources.\n   *\n   * The following data sources properties are synchronized here:\n   *\n   * - inRange: The map view 'change:resolution' event is listened and the\n   *   property is updated depending on the current resolution.\n   *\n   * @param {ngeox.datasource.DataSources} ngeoDataSources Ngeo collection of\n   *     data sources objects.\n   *\n   * @struct\n   * @ngdoc service\n   * @ngname ngeoSyncDataSourcesMap\n   *//* @ngInject\n   */\n  constructor(ngeoDataSources) {\n\n    /**\n     * @type {ngeox.datasource.DataSources}\n     * @private\n     */\n    this.ngeoDataSources_ = ngeoDataSources;\n\n    /**\n     * @type {ol.Map}\n     * @private\n     */\n    this.map_ = null;\n\n    /**\n     * @type {!Array.<!ol.EventsKey>}\n     * @private\n     */\n    this.listenerKeys_ = [];\n\n    olEvents.listen(this.ngeoDataSources_, 'add', this.handleDataSourcesAdd_, this);\n  }\n\n  /**\n   * Set a map to this service. Null can be given to unset the map.\n   * @param {?ol.Map} map Map.\n   */\n  set map(map) {\n    if (this.map_) {\n      this.unbindMap_(this.map_);\n    }\n\n    this.map_ = map;\n\n    if (map) {\n      this.bindMap_(map);\n    }\n  }\n\n  /**\n   * Bind a map to this service.\n   * @param {ol.Map} map Map.\n   * @private\n   */\n  bindMap_(map) {\n\n    // (1) Event listeners\n    const view = map.getView();\n    this.listenerKeys_.push(\n      olEvents.listen(view, 'change:resolution', this.handleViewResolutionChange_, this)\n    );\n\n    // (2) Sync resolution with existing data sources\n    const resolution = view.getResolution();\n    googAsserts.assertNumber(resolution);\n    this.syncDataSourcesToResolution_(resolution);\n  }\n\n  /**\n   * Unbind a map to this service.\n   * @param {ol.Map} map Map.\n   * @private\n   */\n  unbindMap_(map) {\n    olObservable.unByKey(this.listenerKeys_);\n    this.listenerKeys_ = [];\n  }\n\n  /**\n   * Called when the resolution of the map view changes. Synchronize the\n   * datasources to current resolution of the view.\n   * @param {Event} evt Event.\n   * @private\n   */\n  handleViewResolutionChange_(evt) {\n    const view = evt.target;\n    googAsserts.assertInstanceof(view, olView);\n    const resolution = view.getResolution();\n    googAsserts.assertNumber(resolution);\n    this.syncDataSourcesToResolution_(resolution);\n  }\n\n  /**\n   * Synchronize all datasources in the ngeo collection with a given resolution.\n   * @param {number} resolution Resolution\n   * @private\n   */\n  syncDataSourcesToResolution_(resolution) {\n    this.ngeoDataSources_.forEach((dataSource) => {\n      this.syncDataSourceToResolution_(dataSource, resolution);\n    });\n  }\n\n  /**\n   * Synchronize a data source `inRange` property with a given resolution.\n   * @param {ngeo.datasource.DataSource} dataSource Data source\n   * @param {number} resolution Resolution\n   * @private\n   */\n  syncDataSourceToResolution_(dataSource, resolution) {\n    // No need to do anything if the data source doesn't support dynamic\n    // setting of inRange\n    if (!dataSource.supportsDynamicInRange) {\n      return;\n    }\n\n    const maxResolution = dataSource.maxResolution;\n    const minResolution = dataSource.minResolution;\n\n    const inMinRange = minResolution === null ||\n        minResolution === undefined ||\n        resolution >= minResolution;\n    const inMaxRange = maxResolution === null ||\n        maxResolution === undefined ||\n        resolution <= maxResolution;\n    const inRange = inMinRange && inMaxRange;\n\n    dataSource.inRange = inRange;\n  }\n\n  /**\n   * Called when a new data source is added to the ngeo collection. If there's\n   * map bound, update its `inRange` right away.\n   * @param {!ol.Collection.Event} event Event\n   * @private\n   */\n  handleDataSourcesAdd_(event) {\n    const dataSource = googAsserts.assertInstanceof(\n      event.element, ngeoDatasourceDataSource);\n    if (this.map_) {\n      const resolution = this.map_.getView().getResolution();\n      googAsserts.assertNumber(resolution);\n      this.syncDataSourceToResolution_(dataSource, resolution);\n    }\n  }\n\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('ngeoSyncDataSourcesMap', [\n  ngeoDatasourceDataSources.module.name,\n]);\nexports.module.service('ngeoSyncDataSourcesMap', exports);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/datasource/SyncDataSourcesMap.js","/**\n * @module ngeo.map.FeatureOverlay\n*/\nimport ngeoBase from 'ngeo/index.js';\nimport * as olBase from 'ol/index.js';\nimport olEvents from 'ol/events.js';\n\n/**\n * @constructor\n * @param {ngeo.map.FeatureOverlayMgr} manager The feature overlay manager.\n * @param {number} index This feature overlay's index.\n */\nconst exports = function(manager, index) {\n\n  /**\n   * @type {ngeo.map.FeatureOverlayMgr}\n   * @private\n   */\n  this.manager_ = manager;\n\n  /**\n   * @type {ol.Collection.<ol.Feature>}\n   * @private\n   */\n  this.features_ = null;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.index_ = index;\n};\n\n\n/**\n * Add a feature to the feature overlay.\n * @param {ol.Feature} feature The feature to add.\n * @export\n */\nexports.prototype.addFeature = function(feature) {\n  this.manager_.addFeature(feature, this.index_);\n};\n\n\n/**\n * Remove a feature from the feature overlay.\n * @param {ol.Feature} feature The feature to remove.\n * @export\n */\nexports.prototype.removeFeature = function(feature) {\n  this.manager_.removeFeature(feature, this.index_);\n};\n\n\n/**\n * Remove all the features from the feature overlay.\n * @export\n */\nexports.prototype.clear = function() {\n  this.manager_.clear(this.index_);\n};\n\n\n/**\n * Configure this feature overlay with a feature collection. Features added\n * to the collection are also added to the overlay. Same for removal. If you\n * configure the feature overlay with a feature collection you will use the\n * collection to add and remove features instead of using the overlay's\n * `addFeature`, `removeFeature` and `clear` functions.\n * @param {ol.Collection.<ol.Feature>} features Feature collection.\n * @export\n */\nexports.prototype.setFeatures = function(features) {\n  if (this.features_ !== null) {\n    this.features_.clear();\n    olEvents.unlisten(this.features_, 'add', this.handleFeatureAdd_, this);\n    olEvents.unlisten(this.features_, 'remove', this.handleFeatureRemove_, this);\n  }\n  if (features !== null) {\n    features.forEach(function(feature) {\n      this.addFeature(feature);\n    }, this);\n    olEvents.listen(features, 'add', this.handleFeatureAdd_, this);\n    olEvents.listen(features, 'remove', this.handleFeatureRemove_, this);\n  }\n  this.features_ = features;\n};\n\n\n/**\n * Set a style for the feature overlay.\n * @param {ol.style.Style|Array.<ol.style.Style>|ol.StyleFunction} style\n * Style.\n * @export\n */\nexports.prototype.setStyle = function(style) {\n  this.manager_.setStyle(style, this.index_);\n};\n\n\n/**\n * @param {ol.Collection.Event} evt Feature collection event.\n * @private\n */\nexports.prototype.handleFeatureAdd_ = function(evt) {\n  const feature = /** @type {ol.Feature} */ (evt.element);\n  this.addFeature(feature);\n};\n\n\n/**\n * @param {ol.Collection.Event} evt Feature collection event.\n * @private\n */\nexports.prototype.handleFeatureRemove_ = function(evt) {\n  const feature = /** @type {ol.Feature} */ (evt.element);\n  this.removeFeature(feature);\n};\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('ngeoFeatureOverlay', []);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/map/FeatureOverlay.js","/**\n * @module ngeo.map.recenter\n*/\nimport ngeoBase from 'ngeo/index.js';\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('ngeoRecenter', []);\n\nngeoBase.module.requires.push(exports.name);\n\n/**\n * Provides the \"ngeoRecenter\" directive, a widget for recentering a map\n * to a specific extent (by using `ngeo-extent`) or a specific zoom level\n * (by using `ngeo-zoom`).\n *\n * Example:\n *\n *      <div ngeo-recenter ngeo-recenter-map=\"::ctrl.map\">\n *        <a href=\"#\" ngeo-extent=\"[-1898084, 4676723, 3972279, 8590299]\">A</a>\n *        <a href=\"#\" ngeo-extent=\"[727681, 5784754, 1094579, 6029353]\">B</a>\n *        <a href=\"#\" ngeo-zoom=\"1\">Zoom to level 1</a>\n *      </div>\n *\n * Or with a select:\n *\n *      <select ngeo-recenter ngeo-recenter-map=\"::ctrl.map\">\n *        <option ngeo-extent=\"[-1898084, 4676723, 3972279, 8590299]\">A</option>\n *        <option ngeo-extent=\"[727681, 5784754, 1094579, 6029353]\">B</option>\n *      </select>\n *\n * See our live example: [../examples/recenter.html](../examples/recenter.html)\n *\n * @htmlAttribute {ol.Map} ngeo-recenter-map The map.\n * @return {angular.Directive} Directive Definition Object.\n * @ngdoc directive\n * @ngname ngeoRecenter\n */\nexports.directive_ = function() {\n  return {\n    restrict: 'A',\n    link: ($scope, $element, $attrs) => {\n      const mapExpr = $attrs['ngeoRecenterMap'];\n      const map = /** @type {ol.Map} */ ($scope.$eval(mapExpr));\n\n      function recenter(element) {\n        const extent = element.attr('ngeo-extent');\n        if (extent !== undefined) {\n          const size = /** @type {ol.Size} */ (map.getSize());\n          map.getView().fit($scope.$eval(extent), {size});\n        }\n        const zoom = element.attr('ngeo-zoom');\n        if (zoom !== undefined) {\n          map.getView().setZoom($scope.$eval(zoom));\n        }\n      }\n\n      // if the children is a link or button\n      $element.on('click', '*', function(event) {\n        recenter(angular.element($(this)));\n      });\n\n      // if the children is an option inside a select\n      $element.on('change', (event) => {\n        const selected = event.target.options[event.target.selectedIndex];\n        recenter(angular.element(selected));\n      });\n\n    }\n  };\n};\n\n// Register the directive in the module\nexports.directive('ngeoRecenter', exports.directive_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/map/recenter.js","/**\n * @module ngeo.map.resizemap\n*/\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\nimport olMap from 'ol/Map.js';\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('ngeoResizemap', []);\n\nngeoBase.module.requires.push(exports.name);\n\n/**\n * Provides a directive that resizes the map in an animation loop\n * during 1 second when the value of \"state\" changes. This is especially useful\n * when changing the size of other elements with a transition leads to a change\n * of the map size.\n *\n * Example:\n *\n *      <div ng-class=\"ctrl.open ? 'open' : 'close' ngeo-resizemap=\"ctrl.map\"\n *        ngeo-resizemap-state=\"open\">\n *      <div>\n *      <input type=\"checkbox\" ng-model=\"ctrl.open\" />\n *\n * See our live example: [../examples/animation.html](../examples/animation.html)\n *\n * @param {angular.$window} $window Angular window service.\n * @return {angular.Directive} The directive specs.\n *//* @ngInject\n * @ngdoc directive\n * @ngname ngeoResizemap\n */\nexports.directive_ = function($window) {\n  const /** @type {number} */ duration = 1000;\n\n  return {\n    restrict: 'A',\n    /**\n     * @param {angular.Scope} scope Scope.\n     * @param {angular.JQLite} element Element.\n     * @param {angular.Attributes} attrs Atttributes.\n     */\n    link: (scope, element, attrs) => {\n      const attr = 'ngeoResizemap';\n      const prop = attrs[attr];\n      const map = scope.$eval(prop);\n      googAsserts.assertInstanceof(map, olMap);\n\n      const stateExpr = attrs['ngeoResizemapState'];\n      googAsserts.assert(stateExpr !== undefined);\n\n      let start;\n      let animationDelayKey;\n\n      const animationDelay = () => {\n        map.updateSize();\n        map.renderSync();\n\n        if (Date.now() - start < duration) {\n          animationDelayKey = $window.requestAnimationFrame(animationDelay);\n        }\n      };\n\n      // Make sure the map is resized when the animation ends.\n      // It may help in case the animation didn't start correctly.\n      element.on('transitionend', () => {\n        map.updateSize();\n        map.renderSync();\n      });\n\n      scope.$watch(stateExpr, (newVal, oldVal) => {\n        if (newVal != oldVal) {\n          start = Date.now();\n          $window.cancelAnimationFrame(animationDelayKey);\n          animationDelayKey = $window.requestAnimationFrame(animationDelay);\n        }\n      });\n    }\n  };\n};\n\n\nexports.directive('ngeoResizemap', exports.directive_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/map/resizemap.js","/**\n * @module ngeo.map.scaleselector\n*/\nimport ngeoBase from 'ngeo/index.js';\nimport * as olArray from 'ol/array.js';\nimport olMap from 'ol/Map.js';\nimport olEvents from 'ol/events.js';\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('ngeoScaleselector', []);\n\nngeoBase.module.requires.push(exports.name);\n\n\nexports.value('ngeoScaleselectorTemplateUrl',\n  /**\n     * @param {angular.JQLite} element Element.\n     * @param {angular.Attributes} attrs Attributes.\n     * @return {string} Template URL.\n     */\n  (element, attrs) => {\n    const templateUrl = attrs['ngeoScaleselectorTemplateurl'];\n    return templateUrl !== undefined ? templateUrl :\n      `${ngeoBase.baseModuleTemplateUrl}/map/scaleselector.html`;\n  });\n\n\n/**\n * Provides the \"ngeoScaleselector\" directive, a widget for\n * selecting map scales.\n *\n * Example:\n *\n *     <div ngeo-scaleselector=\"ctrl.scales\" ngeo-scaleselector-map=\"ctrl.map\">\n *     </div>\n *\n * The expression passed to the ngeo-scaleselector attribute should return an\n * array of this form:\n *\n *    [20000, 10000, 5000, 2500]\n *\n * That directive's partial uses Bootstrap's `dropdown` and `dropdown-menu`\n * classes, and `data-toggle=\"dropdown\"`, so it is meant to be used with\n * Bootstrap's \"dropdown\" jQuery plugin.\n *\n * You can pass options to configure the behaviors of this element. Options is\n * a {@link ngeox.ScaleselectorOptions} object.\n *\n * Example:\n *\n *     <div ngeo-scaleselector=\"ctrl.scales\"\n *       ngeo-scaleselector-map=\"ctrl.map\"\n *       ngeo-scaleselector-options=\"ctrl.scaleSelectorOptions\">\n *     </div>\n *\n * By default the directive uses \"scaleselector.html\" as its templateUrl. This\n * can be changed by redefining the \"ngeoScaleselectorTemplateUrl\" value.\n *\n * The directive has its own scope, but it is not isolate scope. That scope\n * includes a reference to the directive's controller: the \"scaleselectorCtrl\"\n * scope property.\n *\n * The directive doesn't create any watcher. In particular the object including\n * the scales information is now watched.\n *\n * See our live example: [../examples/scaleselector.html](../examples/scaleselector.html)\n *\n * @htmlAttribute {!Array.<number>} ngeo-scaleselector The available scales.\n * @htmlAttribute {ol.Map} ngeo-scaleselector-map The map.\n * @htmlAttribute {ngeox.ScaleselectorOptions} ngeo-scaleselector-options\n *     Optionnal. The configuration options.\n * @param {string|function(!angular.JQLite=, !angular.Attributes=)}\n *     ngeoScaleselectorTemplateUrl Template URL for the directive.\n * @return {angular.Directive} Directive Definition Object.\n *//* @ngInject\n * @ngdoc directive\n * @ngname ngeoScaleselector\n */\nexports.directive_ = function(ngeoScaleselectorTemplateUrl) {\n  return {\n    restrict: 'A',\n    scope: true,\n    controller: 'NgeoScaleselectorController',\n    templateUrl: ngeoScaleselectorTemplateUrl\n  };\n};\n\n\nexports.directive('ngeoScaleselector', exports.directive_);\n\n\n/**\n * @constructor\n * @private\n * @struct\n * @param {angular.Scope} $scope Directive scope.\n * @param {angular.JQLite} $element Element.\n * @param {angular.Attributes} $attrs Attributes.\n *//* @ngInject\n * @ngdoc controller\n * @ngname NgeoScaleselectorController\n */\nexports.ScaleselectorController_ = function($scope, $element, $attrs) {\n\n  const scalesExpr = $attrs['ngeoScaleselector'];\n\n  /**\n   * The zoom level/scale map object.\n   * @type {!Array.<number>}\n   * @export\n   */\n  this.scales = /** @type {!Array.<number>} */\n    ($scope.$eval(scalesExpr));\n  goog.asserts.assert(this.scales !== undefined);\n\n  /**\n   * @type {Array.<number>}\n   * @export\n   */\n  this.zoomLevels;\n\n  $scope.$watch(() => Object.keys(this.scales).length, (newLength) => {\n    this.zoomLevels = Object.keys(this.scales).map(Number);\n    this.zoomLevels.sort(olArray.numberSafeCompareFunction);\n  });\n\n  const mapExpr = $attrs['ngeoScaleselectorMap'];\n\n  /**\n   * @type {ol.Map}\n   * @private\n   */\n  this.map_ = /** @type {ol.Map} */ ($scope.$eval(mapExpr));\n  goog.asserts.assertInstanceof(this.map_, olMap);\n\n  const optionsExpr = $attrs['ngeoScaleselectorOptions'];\n  const options = $scope.$eval(optionsExpr);\n\n  /**\n   * @type {!ngeox.ScaleselectorOptions}\n   * @export\n   */\n  this.options = exports.ScaleselectorController_.getOptions_(options);\n\n  /**\n   * @type {angular.Scope}\n   * @private\n   */\n  this.$scope_ = $scope;\n\n  /**\n   * @type {?ol.EventsKey}\n   * @private\n   */\n  this.resolutionChangeKey_ = null;\n\n  /**\n   * @type {number|undefined}\n   * @export\n   */\n  this.currentScale = undefined;\n\n  const view = this.map_.getView();\n  if (view !== null) {\n    const currentZoom = this.map_.getView().getZoom();\n    if (currentZoom !== undefined) {\n      this.currentScale = this.getScale(currentZoom);\n    }\n  }\n\n  olEvents.listen(this.map_, 'change:view', this.handleViewChange_, this);\n\n  this.registerResolutionChangeListener_();\n\n  $scope['scaleselectorCtrl'] = this;\n\n};\n\n\n/**\n * @param {?} options Options after expression evaluation.\n * @return {!ngeox.ScaleselectorOptions} Options object.\n * @private\n */\nexports.ScaleselectorController_.getOptions_ = function(options) {\n  let dropup = false;\n  if (options !== undefined) {\n    dropup = options['dropup'] == true;\n  }\n  return /** @type {ngeox.ScaleselectorOptions} */ ({\n    dropup: dropup\n  });\n};\n\n\n/**\n * @param {number} zoom Zoom level.\n * @return {number} Scale.\n * @export\n */\nexports.ScaleselectorController_.prototype.getScale = function(zoom) {\n  return this.scales[zoom];\n};\n\n\n/**\n * @param {number} zoom Zoom level.\n * @export\n */\nexports.ScaleselectorController_.prototype.changeZoom = function(zoom) {\n  this.map_.getView().setZoom(zoom);\n};\n\n\n/**\n * @param {ol.Object.Event} e OpenLayers object event.\n * @private\n */\nexports.ScaleselectorController_.prototype.handleResolutionChange_ = function(e) {\n  const view = this.map_.getView();\n  const currentScale = this.scales[/** @type {number} */ (view.getZoom())];\n\n  // handleResolutionChange_ is a change:resolution listener. The listener\n  // may be executed outside the Angular context, for example when the user\n  // double-clicks to zoom on the map.\n  //\n  // But it may also be executed inside the Angular context, when a function\n  // in Angular context calls setZoom or setResolution on the view, which\n  // is for example what happens when this controller's changeZoom function\n  // is called.\n  //\n  // For that reason we use $applyAsync instead of $apply here.\n\n  if (currentScale !== undefined) {\n    this.$scope_.$applyAsync(() => {\n      this.currentScale = currentScale;\n    });\n  }\n};\n\n\n/**\n * @param {ol.Object.Event} e OpenLayers object event.\n * @private\n */\nexports.ScaleselectorController_.prototype.handleViewChange_ = function(e) {\n  this.registerResolutionChangeListener_();\n  this.handleResolutionChange_(null);\n};\n\n\n/**\n * @private\n */\nexports.ScaleselectorController_.prototype.registerResolutionChangeListener_ = function() {\n  if (this.resolutionChangeKey_ !== null) {\n    olEvents.unlistenByKey(this.resolutionChangeKey_);\n  }\n  const view = this.map_.getView();\n  this.resolutionChangeKey_ = olEvents.listen(view,\n    'change:resolution', this.handleResolutionChange_,\n    this);\n};\n\n\nexports.controller('NgeoScaleselectorController',\n  exports.ScaleselectorController_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/map/scaleselector.js"],"sourceRoot":""}