{"version":3,"sources":["webpack:///./src/message/Popup.js","webpack:///./src/message/popupComponent.js","webpack:///./src/goog.asserts.js","webpack:///./examples/popupservice.js"],"names":["__webpack_require__","exports","$compile","$rootScope","$sce","$timeout","_this","this","scope","$new","$watch","open","autoDestroy_","timeout_","destroy","sce_","element_","angular","element","document","body","append","prototype","getOpen","setOpen","$destroy","remove","setTitle","title","trustedTitle","trustAsHtml","setContent","content","opt_trusted","setUrl","url","setWidth","width","setHeight","height","setSize","setAutoDestroy","autoDestroy","addClass","cls","options","_asserts2","default","fail","undefined","Factory","module","_popupComponent2","name","factory","_index2","requires","push","_index","value","attrs","templateUrl","baseModuleTemplateUrl","directive_","ngeoPopupTemplateUrl","restrict","link","close","evt","stopPropagation","preventDefault","newVal","oldVal","css","directive","defaultMessage","defaultArgs","givenMessage","givenArgs","message","args","e","AssertionError","errorHandler_","errorHandler","ENABLE_ASSERTS","condition","opt_message","var_args","doAssertFailure_","Array","slice","call","arguments","goog","isNumber","typeOf","isString","isFunction","isObject","isArray","isBoolean","nodeType","dom","NodeType","ELEMENT","type","getType_","key","Object","Function","displayName","constructor","toString","_typeof","_Popup","app","ngeo","_Popup2","MainController","ngeoCreatePopup","createPopup_","$","tooltip","container","trigger","simplePopup","popup","iframePopup","heavyPopup","openPopupWithContent","openPopupWithUrl","controller"],"mappings":"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","file":"popupservice.min.js","sourcesContent":["/**\n * @module ngeo.message.Popup\n*/\nimport ngeoBase from 'ngeo/index.js';\nimport googAsserts from 'goog/asserts.js';\n\n/**\n * This goog.require is needed because of 'ngeo-popup' used in\n * the template.\n * @suppress {extraRequire}\n */\nimport ngeoMessagePopupComponent from 'ngeo/message/popupComponent.js';\n\n/**\n * Provides a factory to create a popup in the page.\n * The factory returns a ngeo.message.Popup object.\n *\n * Example:\n *\n *     let popup = ngeoCreatePopup();\n *     popup.setTitle(\"A title\");\n *     popup.setContent(\"Some content\");\n *     popup.setOpen(true);\n *\n * @constructor\n * @struct\n * @param {angular.$compile} $compile The compile provider.\n * @param {angular.Scope} $rootScope The rootScope provider.\n * @param {angular.$sce} $sce Angular sce service.\n * @param {angular.$timeout} $timeout Angular timeout service.\n * @ngdoc service\n * @ngname ngeoCreatePopup\n */\nconst exports = function($compile, $rootScope, $sce, $timeout) {\n\n  /**\n   * The scope the compiled element is link to.\n   * @type {angular.Scope}\n   * @export\n   */\n  this.scope = $rootScope.$new(true);\n\n  // manage the auto destruction of the popup\n  this.scope.$watch(\n    () => this.scope['open'],\n    (open) => {\n      if (!open && this.autoDestroy_) {\n        this.timeout_(() => {\n          this.destroy();\n        });\n      }\n    }\n  );\n\n  /**\n   * @private\n   * @type {angular.$sce}\n   */\n  this.sce_ = $sce;\n\n  /**\n   * @type {angular.$timeout}\n   * @private\n   */\n  this.timeout_ = $timeout;\n\n  /**\n   * The element.\n   * @type {angular.JQLite}\n   * @private\n   */\n  this.element_ = angular.element('<div ngeo-popup></div>');\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.autoDestroy_ = false;\n\n\n  // Compile the element, link it to the scope and add it to the document.\n  $compile(this.element_)(this.scope);\n  angular.element(document.body).append(this.element_);\n};\n\n\n/**\n * Get the current popup state.\n * @return {boolean} `true` if the popup is currently, otherwise `false`.\n * @export\n */\nexports.prototype.getOpen = function() {\n  return this.scope['open'];\n};\n\n\n/**\n * Show/hide the popup.\n * @param {boolean} open `true` to show the popup, `false` to hide it.\n * @export\n */\nexports.prototype.setOpen = function(open) {\n  this.scope['open'] = open;\n};\n\n\n/**\n * Destroy the popup.\n * @export\n */\nexports.prototype.destroy = function() {\n  this.scope.$destroy();\n  this.element_.remove();\n};\n\n\n/**\n * Set the popup's title.\n * @param {string} title The title.\n * @export\n */\nexports.prototype.setTitle = function(title) {\n  const trustedTitle = this.sce_.trustAsHtml(title);\n  this.scope['title'] = trustedTitle;\n};\n\n\n/**\n * Set the popup's content.\n * Note: the type of the `content` param is `*` instead of `string`, this\n * is because the content may be trusted using `$sce.trustAsHtml`.\n * @param {*} content The content.\n * @param {boolean=} opt_trusted Whether the content can be trusted.\n *     Default is false.\n * @export\n */\nexports.prototype.setContent = function(content, opt_trusted) {\n  this.scope['content'] = opt_trusted ? this.sce_.trustAsHtml(/** @type {string} */ (content)) : content;\n};\n\n\n/**\n * Set the popup's content with an iframe using the given url.\n * @param {string} url The url of the page.\n * @export\n */\nexports.prototype.setUrl = function(url) {\n  const content = this.sce_.trustAsHtml(\n    `<iframe src=\"${url}\" width=\"100%\" height=\"100%\"></iframe>`\n  );\n  this.setContent(content);\n};\n\n\n/**\n * Set the popup's width.\n * @param {string} width Width the popup should have.\n * @export\n */\nexports.prototype.setWidth = function(width) {\n  this.element_.width(width);\n};\n\n\n/**\n * Set the popup's height.\n * @param {string} height Height the popup should have.\n * @export\n */\nexports.prototype.setHeight = function(height) {\n  this.element_.height(height);\n};\n\n\n/**\n * Set the popup's width and height.\n * @param {string} width Width the popup should have.\n * @param {string} height Height the popup should have.\n * @export\n */\nexports.prototype.setSize = function(width, height) {\n  this.setWidth(width);\n  this.setHeight(height);\n};\n\n\n/**\n * Set the popup's autoDestroy property.\n * @param {boolean} autoDestroy Whether to automatically destroy the popup when\n *     being closed or not.\n * @export\n */\nexports.prototype.setAutoDestroy = function(autoDestroy) {\n  this.autoDestroy_ = autoDestroy;\n};\n\n\n/**\n * Add an extra CSS class name to the popup.\n * @param {string} cls Class name to add to the popup element.\n * @export\n */\nexports.prototype.addClass = function(cls) {\n  this.element_.addClass(cls);\n};\n\n\n/**\n * Open a popup with the given properties.\n * @param {ngeox.PopupOptions} options Options.\n * @export\n */\nexports.prototype.open = function(options) {\n\n  if (options.url) {\n    this.setUrl(options.url);\n  } else if (options.content) {\n    this.setContent(options.content);\n  } else {\n    googAsserts.fail('ngeo.message.Popup options requirest \"url\" or \"content\".');\n  }\n\n  if (options.autoDestroy !== undefined) {\n    this.setAutoDestroy(options.autoDestroy);\n  }\n\n  if (options.cls !== undefined) {\n    this.addClass(options.cls);\n  }\n\n  if (options.height !== undefined) {\n    this.setHeight(options.height);\n  }\n\n  if (options.title !== undefined) {\n    this.setTitle(options.title);\n  }\n\n  if (options.width !== undefined) {\n    this.setWidth(options.width);\n  }\n\n  this.setOpen(true);\n};\n\n\n/**\n * @param {angular.$compile} $compile Angular compile service.\n * @param {angular.Scope} $rootScope Angular rootScope service.\n * @param {angular.$sce} $sce Angular sce service.\n * @param {angular.$timeout} $timeout Angular timeout service.\n * @return {ngeox.PopupFactory} The function to create a popup.\n *//* @ngInject\n */\nexports.Factory = function($compile, $rootScope, $sce, $timeout) {\n  return (\n    /**\n     * @return {!ngeo.message.Popup} The popup instance.\n     */\n    function() {\n      return new exports($compile, $rootScope, $sce, $timeout);\n    }\n  );\n};\n\n/**\n * @type {angular.Module}\n */\nexports.module = angular.module('ngeoCreatePopup', [\n  ngeoMessagePopupComponent.name,\n]);\nexports.module.factory('ngeoCreatePopup', exports.Factory);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/Popup.js","/**\n * @module ngeo.message.popupComponent\n*/\nimport ngeoBase from 'ngeo/index.js';\nconst exports = angular.module('ngeoPopup', []);\nngeoBase.module.requires.push(exports.name);\n\nexports.value('ngeoPopupTemplateUrl',\n  /**\n     * @param {angular.JQLite} element Element.\n     * @param {angular.Attributes} attrs Attributes.\n     * @return {string} Template URL.\n     */\n  (element, attrs) => {\n    const templateUrl = attrs['ngeoPopupTemplateurl'];\n    return templateUrl !== undefined ? templateUrl :\n      `${ngeoBase.baseModuleTemplateUrl}/message/popupcomponent.html`;\n  });\n\n\n/**\n * Provides a directive used to show a popup over the page with\n * a title and content.\n *\n *\n * Things to know about this directive:\n *\n * - This directive is intented to be used along with the popup service.\n *\n * - By default the directive uses \"popup.html\" as its templateUrl. This can be\n *   changed by redefining the \"ngeoPopupTemplateUrl\" value.\n *\n * - The directive doesn't create any scope but relies on its parent scope.\n *   Properties like 'content', 'title' or 'open' come from the parent scope.\n *\n * @private\n * @param {string} ngeoPopupTemplateUrl URL to popup template.\n * @return {angular.Directive} Directive Definition Object.\n *//* @ngInject\n * @ngdoc directive\n * @ngname ngeoPopup\n */\nexports.directive_ = function(ngeoPopupTemplateUrl) {\n  return {\n    restrict: 'A',\n    templateUrl: ngeoPopupTemplateUrl,\n    /**\n     * @param {angular.Scope} scope Scope.\n     * @param {angular.JQLite} element Element.\n     * @param {angular.Attributes} attrs Atttributes.\n     */\n    link: (scope, element, attrs) => {\n      element.addClass('popover');\n\n      /**\n       * @param {jQuery.Event} evt Event.\n       */\n      scope.close = function(evt) {\n        if (evt) {\n          evt.stopPropagation();\n          evt.preventDefault();\n        }\n        element.addClass('hidden');\n      };\n\n      // Watch the open property\n      scope.$watch('open', (newVal, oldVal) => {\n        element.css('display', newVal ? 'block' : 'none');\n      });\n    }\n  };\n};\n\nexports.directive('ngeoPopup', exports.directive_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/popupComponent.js","/* eslint valid-jsdoc: 0, prefer-rest-params: 0,  */\n// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Utilities to check the preconditions, postconditions and\n * invariants runtime.\n *\n * Methods in this package should be given special treatment by the compiler\n * for type-inference. For example, <code>goog.asserts.assert(foo)</code>\n * will restrict <code>foo</code> to a truthy value.\n *\n * The compiler has an option to disable asserts. So code like:\n * <code>\n * var x = goog.asserts.assert(foo()); goog.asserts.assert(bar());\n * </code>\n * will be transformed into:\n * <code>\n * var x = foo();\n * </code>\n * The compiler will leave in foo() (because its return value is used),\n * but it will remove bar() because it assumes it does not have side-effects.\n *\n * @author agrieve@google.com (Andrew Grieve)\n */\n\nconst exports = {};\n\n/**\n * Throws an exception with the given message and \"Assertion failed\" prefixed\n * onto it.\n * @param {string} defaultMessage The message to use if givenMessage is empty.\n * @param {Array<*>} defaultArgs The substitution arguments for defaultMessage.\n * @param {string|undefined} givenMessage Message supplied by the caller.\n * @param {Array<*>} givenArgs The substitution arguments for givenMessage.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n * @private\n */\nexports.doAssertFailure_ = function(\n  defaultMessage, defaultArgs, givenMessage, givenArgs) {\n  let message = 'Assertion failed';\n  let args;\n  if (givenMessage) {\n    message += `: ${givenMessage}`;\n    args = givenArgs;\n  } else if (defaultMessage) {\n    message += `: ${defaultMessage}`;\n    args = defaultArgs;\n  }\n  // The '' + works around an Opera 10 bug in the unit tests. Without it,\n  // a stack trace is added to var message above. With this, a stack trace is\n  // not added until this line (it causes the extra garbage to be added after\n  // the assertion message instead of in the middle of it).\n  const e = new exports.AssertionError(`${message}`, args || []);\n  exports.errorHandler_(e);\n};\n\n\n/**\n * Sets a custom error handler that can be used to customize the behavior of\n * assertion failures, for example by turning all assertion failures into log\n * messages.\n * @param {function(!goog.asserts.AssertionError)} errorHandler\n */\nexports.setErrorHandler = function(errorHandler) {\n  if (exports.ENABLE_ASSERTS) {\n    exports.errorHandler_ = errorHandler;\n  }\n};\n\n\n/**\n * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS is\n * true.\n * @template T\n * @param {T} condition The condition to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {T} The value of the condition.\n * @throws {goog.asserts.AssertionError} When the condition evaluates to false.\n */\nexports.assert = function(condition, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !condition) {\n    exports.doAssertFailure_(\n      '', null, opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return condition;\n};\n\n\n/**\n * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case\n * when we want to add a check in the unreachable area like switch-case\n * statement:\n *\n * <pre>\n *  switch(type) {\n *    case FOO: doSomething(); break;\n *    case BAR: doSomethingElse(); break;\n *    default: goog.asserts.fail('Unrecognized type: ' + type);\n *      // We have only 2 types - \"default:\" section is unreachable code.\n *  }\n * </pre>\n *\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} Failure.\n */\nexports.fail = function(opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS) {\n    exports.errorHandler_(\n      new exports.AssertionError(\n        `Failure${opt_message ? `: ${opt_message}` : ''}`,\n        Array.prototype.slice.call(arguments, 1)));\n  }\n};\n\n\n/**\n * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {number} The value, guaranteed to be a number when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n */\nexports.assertNumber = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isNumber(value)) {\n    exports.doAssertFailure_(\n      'Expected number but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {number} */ (value);\n};\n\n\n/**\n * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {string} The value, guaranteed to be a string when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a string.\n */\nexports.assertString = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isString(value)) {\n    exports.doAssertFailure_(\n      'Expected string but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {string} */ (value);\n};\n\n\n/**\n * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Function} The value, guaranteed to be a function when asserts\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a function.\n */\nexports.assertFunction = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isFunction(value)) {\n    exports.doAssertFailure_(\n      'Expected function but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Function} */ (value);\n};\n\n\n/**\n * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Object} The value, guaranteed to be a non-null object.\n * @throws {goog.asserts.AssertionError} When the value is not an object.\n */\nexports.assertObject = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isObject(value)) {\n    exports.doAssertFailure_(\n      'Expected object but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Object} */ (value);\n};\n\n\n/**\n * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Array<?>} The value, guaranteed to be a non-null array.\n * @throws {goog.asserts.AssertionError} When the value is not an array.\n */\nexports.assertArray = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isArray(value)) {\n    exports.doAssertFailure_(\n      'Expected array but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Array<?>} */ (value);\n};\n\n\n/**\n * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {boolean} The value, guaranteed to be a boolean when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a boolean.\n */\nexports.assertBoolean = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !goog.isBoolean(value)) {\n    exports.doAssertFailure_(\n      'Expected boolean but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {boolean} */ (value);\n};\n\n\n/**\n * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Element} The value, likely to be a DOM Element when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not an Element.\n */\nexports.assertElement = function(value, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS &&\n      (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {\n    exports.doAssertFailure_(\n      'Expected Element but got %s: %s.', [goog.typeOf(value), value],\n      opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Element} */ (value);\n};\n\n\n/**\n * Checks if the value is an instance of the user-defined type if\n * goog.asserts.ENABLE_ASSERTS is true.\n *\n * The compiler may tighten the type returned by this function.\n *\n * @param {?} value The value to check.\n * @param {function(new: T, ...)} type A user-defined constructor.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} When the value is not an instance of\n *     type.\n * @return {T}\n * @template T\n */\nexports.assertInstanceof = function(value, type, opt_message, var_args) {\n  if (exports.ENABLE_ASSERTS && !(value instanceof type)) {\n    exports.doAssertFailure_(\n      'Expected instanceof %s but got %s.',\n      [exports.getType_(type), exports.getType_(value)],\n      opt_message, Array.prototype.slice.call(arguments, 3));\n  }\n  return value;\n};\n\n\n/**\n * Checks that no enumerable keys are present in Object.prototype. Such keys\n * would break most code that use {@code for (var ... in ...)} loops.\n */\nexports.assertObjectPrototypeIsIntact = function() {\n  for (const key in Object.prototype) {\n    exports.fail(`${key} should not be enumerable in Object.prototype.`);\n  }\n};\n\n\n/**\n * Returns the type of a value. If a constructor is passed, and a suitable\n * string cannot be found, 'unknown type name' will be returned.\n * @param {*} value A constructor, object, or primitive.\n * @return {string} The best display name for the value, or 'unknown type name'.\n * @private\n */\nexports.getType_ = function(value) {\n  if (value instanceof Function) {\n    return value.displayName || value.name || 'unknown type name';\n  } else if (value instanceof Object) {\n    return value.constructor.displayName || value.constructor.name ||\n        Object.prototype.toString.call(value);\n  } else {\n    return value === null ? 'null' : typeof value;\n  }\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/goog.asserts.js","/**\n * @module app.popupservice\n*/\nconst exports = {};\n\nimport './popupservice.css';\nimport './common_dependencies.js';\nimport ngeoMessagePopup from 'ngeo/message/Popup.js';\n\n\n/** @type {!angular.Module} **/\napp.module = angular.module('app', [\n  ngeo.module.name,\n  ngeoMessagePopup.module.name,\n]);\n\n\n/**\n * @param {angular.$sce} $sce Angular sce service.\n * @param {ngeox.PopupFactory} ngeoCreatePopup Popup service.\n *//* @ngInject\n * @constructor\n */\napp.MainController = function($sce, ngeoCreatePopup) {\n\n  /**\n   * @private\n   * @type {angular.$sce}\n   */\n  this.sce_ = $sce;\n\n  /**\n   * @private\n   * @type {ngeox.PopupFactory}\n   */\n  this.createPopup_ = ngeoCreatePopup;\n\n  // initialize tooltips\n  $('[data-toggle=\"tooltip\"]').tooltip({\n    container: 'body',\n    trigger: 'hover'\n  });\n\n};\n\n\n/**\n * @export\n */\napp.MainController.prototype.simplePopup = function() {\n  const popup = this.createPopup_();\n  popup.setAutoDestroy(true);\n  popup.setTitle('Simple popup');\n  const content = this.sce_.trustAsHtml('This is a simple 400x300 px popup.');\n  popup.setContent(content);\n  popup.setWidth('400px');\n  popup.setHeight('300px');\n  popup.setOpen(true);\n};\n\n\n/**\n * @export\n */\napp.MainController.prototype.iframePopup = function() {\n  const popup = this.createPopup_();\n  popup.setAutoDestroy(true);\n  popup.addClass('popup-with-iframe');\n  popup.setTitle('Iframe popup');\n  popup.setUrl('http://geomapfish.org/');\n  popup.setSize('400px', '300px');\n  popup.setOpen(true);\n};\n\n\n/**\n * @export\n */\napp.MainController.prototype.heavyPopup = function() {\n  const popup = this.createPopup_();\n  popup.setAutoDestroy(true);\n  popup.setTitle(\n    'This is a popup with lots and lots of content and a very long title');\n  const content = this.sce_.trustAsHtml(\n    'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla eget' +\n    'quam at ex euismod bibendum et eget enim. Nulla sodales tortor ac' +\n    'sagittis aliquet. Ut malesuada quam vitae pulvinar porta. Nunc id' +\n    'magna id risus malesuada elementum eget id purus. Curabitur vel augue' +\n    'blandit, faucibus nulla quis, consequat tellus. Phasellus commodo,' +\n    'tellus et vulputate ultricies, nulla libero ornare arcu, quis' +\n    'fermentum sem diam quis tellus. Aliquam ut sapien tristique, lacinia' +\n    'ante et, lacinia arcu. Quisque sagittis eros at quam blandit' +\n    'gravida. Nulla sit amet enim semper, efficitur eros sit amet,' +\n    'porttitor libero. Fusce quis tellus est. Quisque ornare, ex eget' +\n    'luctus pharetra, nisl leo lobortis purus, sed tristique neque leo eget' +\n    'odio. Maecenas lobortis nisl ac magna mollis, ac pulvinar risus' +\n    'convallis. Donec ullamcorper sollicitudin maximus. Quisque bibendum' +\n    'elit sit amet ultrices ornare. Donec aliquam felis id urna ultrices' +\n    'scelerisque.'\n  );\n  popup.setContent(content);\n  popup.setOpen(true);\n};\n\n\n/**\n * @export\n */\napp.MainController.prototype.openPopupWithContent = function() {\n  const popup = this.createPopup_();\n  const content = this.sce_.trustAsHtml(\n    'This popup was opened using the <code>open</code> method.');\n  popup.open({\n    autoDestroy: true,\n    content: content,\n    height: '200px',\n    title: 'Opened with \"open\"',\n    width: '300px'\n  });\n};\n\n\n/**\n * @export\n */\napp.MainController.prototype.openPopupWithUrl = function() {\n  const popup = this.createPopup_();\n  popup.open({\n    autoDestroy: true,\n    cls: 'popup-with-iframe',\n    height: '300px',\n    title: 'Opened with \"open\" and \"iframe\"',\n    url: 'http://geomapfish.org/',\n    width: '400px'\n  });\n};\n\n\napp.module.controller('MainController', app.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/popupservice.js"],"sourceRoot":""}