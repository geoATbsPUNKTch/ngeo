{"version":3,"sources":["webpack:///./node_modules/openlayers/src/ol/source/OSM.js","webpack:///./examples/simple3d.js","webpack:///./src/olcs/olcsModule.js","webpack:///./src/olcs/Service.js","webpack:///./src/olcs/constants.js","webpack:///./src/olcs/controls3d.js","webpack:///./src/olcs/Manager.js","webpack:///./node_modules/olcs/AutoRenderLoop.js","webpack:///./node_modules/olcs/Camera.js","webpack:///./node_modules/openlayers/src/ol/source/XYZ.js","webpack:///./node_modules/olcs/core/OLImageryProvider.js","webpack:///./node_modules/olcs/core.js"],"names":["__WEBPACK_IMPORTED_MODULE_1__source_XYZ_js__","__webpack_require__","OSM","opt_options","options","attributions","undefined","ATTRIBUTION","crossOrigin","url","call","this","cacheSize","opaque","maxZoom","reprojectionErrorThreshold","tileLoadFunction","wrapX","Object","__WEBPACK_IMPORTED_MODULE_0__index_js__","__webpack_exports__","exports","module","angular","_module2","default","name","_olcsModule2","MainController","$rootScope","ngeoOlcsService","map","_Map2","layers","_Tile2","source","_OSM2","view","_View2","center","zoom","ol3dm","_Manager2","initialize","controller","_controls3d2","_Service2","e","Error","code","Service","ngeoDebounce","ngeoLocation","ngeoStateManager","_classCallCheck","manager_","ngeoDebounce_","ngeoLocation_","ngeoStateManager_","$inject","_createClass","key","value","manager","_this","on","cameraToState_","getInitialBooleanValue","initialStateToCamera_","stateManager","lon","getInitialNumberValue","_constants2","Permalink3dParam","LON","lat","LAT","elevation","ELEVATION","heading","HEADING","pitch","PITCH","_asserts2","assert","set3dWithView","_this2","camera","getOl3d","getCesiumScene","moveEnd","addEventListener","_this2$ngeoStateManag","position","positionCartographic","updateState","_defineProperty","ENABLED","Cesium","Math","toDegrees","longitude","toFixed","latitude","height","event","target","is3dEnabled","remove3dState_","_this3","getParamKeysWithPrefix","PREFIX","forEach","deleteParam","_debounce2","_Location2","service","olEasing","Controller","$element","element_","minTilt","maxTilt","tiltRightEl_","tiltLeftEl_","rotation3dEl_","angle3dEl_","previousRotation_","previousViewMatrix_","animationFrameRequestId_","olcsService_","older","newer","newRotation","getOlView","getRotation","Number","isFinite","abs","rotateElement_","newViewMatrix","getCesiumViewMatrix","Matrix4","equalsEpsilon","newTilt","getTiltOnGlobe","clone","addClass","hasClass","removeClass","requestAnimationFrame","updateWidget_","cancelAnimationFrame","PI","getManager","find","element","angle","r","css","-moz-transform","-webkit-transform","-o-transform","-ms-transform","transform","toRadians","setHeading","tiltOnGlobe","scene","_core2","rotateAroundBottomCenter","delta","cur","getResolution","newResolution","constrainResolution","getAnimating","cancelAnimations","animate","resolution","duration","easing","easeOut","ngeoOlcsControls3dTemplateUrlInjectable","$attrs","ngeoOlcsControls3dTemplateUrl","templateUrl","_index2","baseModuleTemplateUrl","component","bindings","_Manager","Manager","_possibleConstructorReturn","__proto__","getPrototypeOf","rootScope_","_inherits","promise","then","$apply","AutoRenderLoop_exports","ol3d","debug","scene_","canvas_","canvas","verboseRendering","_boundNotifyRepaintRequired","notifyRepaintRequired","bind","lastCameraViewMatrix_","lastCameraMoveTime_","stoppedRendering","_removePostRenderListener","postRender","repaintEventNames_","CameraPrototype","Camera","prototype","interceptedAPIs_","originalAPIs_","tuple","originalLoadWithXhr_","loadWithXhr","load","originalScheduleTask_","TaskProcessor","scheduleTask","enable","repaintKey","window","that","responseType","method","data","headers","deferred","overrideMimeType","preferText","timeout","arguments","parameters","transferableObjects","result","taskProcessor","_originalWorkerMessageSinkRepaint","worker","onmessage","i","length","api","parent","original","args","apply","getOlMap","getLayerGroup","disable","removeEventListener","un","date","now","Date","viewMatrix","cameraMovedInLastSecond","surface","globe","tilesWaiting","ready","tweens","console","log","setBlockCesiumRendering","restartRenderLoop","setDebug","__WEBPACK_IMPORTED_MODULE_2__tilegrid_js__","XYZ","projection","tileGrid","extent","minZoom","tileSize","__WEBPACK_IMPORTED_MODULE_1__source_TileImage_js__","tilePixelRatio","tileUrlFunction","urls","transition","OLImageryProvider_exports","opt_fallbackProj","source_","projection_","fallbackProj_","ready_","credit_","tilingScheme_","rectangle_","proxy","get","proxy_","getURL","DefaultProxy","errorEvent_","Event","emptyCanvas_","document","createElement","width","events","EventType","CHANGE","handleSourceChanged_","defineProperties","rectangle","tileWidth","tg","getTileGrid","getTileSize","tileHeight","maximumLevel","getMaxZoom","minimumLevel","tilingScheme","tileDiscardPolicy","errorEvent","credit","hasAlphaChannel","pickFeatures","getState","proj","getProjection","ol_proj","GeographicTilingScheme","WebMercatorTilingScheme","createCreditForSource","text","getAttributions","imageUrl","link","el","getHTML","replace","logo","getLogo","src","href","Credit","getTileCredits","x","y","level","requestImage","getTileUrlFunction","z_","y_","ImageryProvider","loadImage"],"mappings":"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","file":"simple3d.17959a9dcf6996c9ec1b.js","sourcesContent":["/**\n * @module ol/source/OSM\n */\nimport {inherits} from '../index.js';\nimport XYZ from '../source/XYZ.js';\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n *\n * @constructor\n * @extends {ol.source.XYZ}\n * @param {olx.source.OSMOptions=} opt_options Open Street Map options.\n * @api\n */\nconst OSM = function(opt_options) {\n\n  const options = opt_options || {};\n\n  let attributions;\n  if (options.attributions !== undefined) {\n    attributions = options.attributions;\n  } else {\n    attributions = [OSM.ATTRIBUTION];\n  }\n\n  const crossOrigin = options.crossOrigin !== undefined ?\n    options.crossOrigin : 'anonymous';\n\n  const url = options.url !== undefined ?\n    options.url : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n  XYZ.call(this, {\n    attributions: attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: crossOrigin,\n    opaque: options.opaque !== undefined ? options.opaque : true,\n    maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileLoadFunction: options.tileLoadFunction,\n    url: url,\n    wrapX: options.wrapX\n  });\n\n};\n\ninherits(OSM, XYZ);\n\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nOSM.ATTRIBUTION = '&copy; ' +\n      '<a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> ' +\n      'contributors.';\nexport default OSM;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/OSM.js\n// module id = 3\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module app.simple3d\n */\nlet exports = {};\n\n// webpack: import './simple3d.css';\n// webpack: import './common_dependencies.js';\n/** @suppress {extraRequire} */\nimport olMap from 'ol/Map.js';\n\nimport olView from 'ol/View.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport olSourceOSM from 'ol/source/OSM.js';\nimport ngeoOlcsOlcsModule from 'ngeo/olcs/olcsModule.js';\nimport ngeoMapModule from 'ngeo/map/module.js';\nimport ngeoOlcsManager from 'ngeo/olcs/Manager.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('app', [\n  ngeoMapModule.name,\n  ngeoOlcsOlcsModule.name\n]);\n\n\n/**\n * @constructor\n * @ngInject\n * @param {angular.Scope} $rootScope Root scope.\n * @param {ngeo.olcs.Service} ngeoOlcsService The service.\n */\nexports.MainController = function($rootScope, ngeoOlcsService) {\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map = new olMap({\n    layers: [\n      new olLayerTile({\n        source: new olSourceOSM()\n      })\n    ],\n    view: new olView({\n      center: [0, 0],\n      zoom: 4\n    })\n  });\n\n  // TODO: detect and use different URL for DEBUG MODE\n  const cesiumUrl = '../node_modules/@camptocamp/cesium/Build/Cesium/Cesium.js';\n\n  /**\n   * @export\n   * @type {olcs.contrib.Manager}\n   */\n  this.ol3dm = new ngeoOlcsManager(cesiumUrl, $rootScope, {\n    map: this.map\n  });\n\n  // Optionally, the manager can be registered into the olcs service\n  ngeoOlcsService.initialize(this.ol3dm);\n};\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/simple3d.js","/**\n * @module ngeo.olcs.olcsModule\n */\nimport Service from 'ngeo/olcs/Service.js';\nimport control from 'ngeo/olcs/controls3d.js';\n\n\n/**\n * @type {!angular.Module}\n */\nconst m = angular.module('ngeoOlcsModule', [\n  control.name,\n  Service.module.name\n]);\n\nconst exports = m;\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/olcs/olcsModule.js","/**\n * @module ngeo.olcs.Service\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoMiscDebounce from 'ngeo/misc/debounce.js';\nimport ngeoStatemanagerLocation from 'ngeo/statemanager/Location.js';\nimport ngeoOlcsConstants from 'ngeo/olcs/constants.js';\nimport ngeoStatemanagerService from 'ngeo/statemanager/Service.js';\n\nconst Service = class {\n\n  /**\n   * @ngInject\n   * @param {!ngeox.miscDebounce} ngeoDebounce ngeo debounce service.\n   * @param {!ngeo.statemanager.Location} ngeoLocation ngeo location service.\n   * @param {ngeo.statemanager.Service} ngeoStateManager The ngeo StateManager service.\n   */\n  constructor(ngeoDebounce, ngeoLocation, ngeoStateManager) {\n    /**\n     * @private\n     * @type {olcs.contrib.Manager|undefined}\n     */\n    this.manager_;\n\n    /**\n     * @private\n     * @type {!ngeox.miscDebounce}\n     */\n    this.ngeoDebounce_ = ngeoDebounce;\n\n    /**\n     * @private\n     * @type {!ngeo.statemanager.Location}\n     */\n    this.ngeoLocation_ = ngeoLocation;\n\n    /**\n     * @private\n     * @type {ngeo.statemanager.Service}\n     */\n    this.ngeoStateManager_ = ngeoStateManager;\n\n  }\n\n  /**\n   * @export\n   * @param {olcs.contrib.Manager} manager Manager.\n   */\n  initialize(manager) {\n    this.manager_ = manager;\n\n    this.manager_.on('load', () => {\n      this.cameraToState_();\n    });\n\n    if (this.ngeoStateManager_.getInitialBooleanValue('3d_enabled')) {\n      this.initialStateToCamera_();\n    }\n  }\n\n  /**\n   * @export\n   * @return {olcs.contrib.Manager|undefined} the manager.\n   */\n  getManager() {\n    return this.manager_;\n  }\n\n  /**\n   * @private\n   * @return {Promise<undefined>} A promise after load & enabled.\n   */\n  initialStateToCamera_() {\n    const stateManager = this.ngeoStateManager_;\n\n    const lon = stateManager.getInitialNumberValue(ngeoOlcsConstants.Permalink3dParam.LON);\n    const lat = stateManager.getInitialNumberValue(ngeoOlcsConstants.Permalink3dParam.LAT);\n    const elevation = stateManager.getInitialNumberValue(ngeoOlcsConstants.Permalink3dParam.ELEVATION);\n    const heading = stateManager.getInitialNumberValue(ngeoOlcsConstants.Permalink3dParam.HEADING) || 0;\n    const pitch = stateManager.getInitialNumberValue(ngeoOlcsConstants.Permalink3dParam.PITCH) || 0;\n\n    googAsserts.assert(lon !== undefined);\n    googAsserts.assert(lat !== undefined);\n    googAsserts.assert(elevation !== undefined);\n    return this.manager_.set3dWithView(lon, lat, elevation, heading, pitch);\n  }\n\n  /**\n   * @private\n   */\n  cameraToState_() {\n    const manager = this.manager_;\n    const scene = manager.getOl3d().getCesiumScene();\n    const camera = scene.camera;\n\n    camera.moveEnd.addEventListener(this.ngeoDebounce_(() => {\n      const position = camera.positionCartographic;\n      this.ngeoStateManager_.updateState({\n        [ngeoOlcsConstants.Permalink3dParam.ENABLED]: true,\n        [ngeoOlcsConstants.Permalink3dParam.LON]: Cesium.Math.toDegrees(position.longitude).toFixed(5),\n        [ngeoOlcsConstants.Permalink3dParam.LAT]: Cesium.Math.toDegrees(position.latitude).toFixed(5),\n        [ngeoOlcsConstants.Permalink3dParam.ELEVATION]: position.height.toFixed(0),\n        [ngeoOlcsConstants.Permalink3dParam.HEADING]: Cesium.Math.toDegrees(camera.heading).toFixed(3),\n        [ngeoOlcsConstants.Permalink3dParam.PITCH]: Cesium.Math.toDegrees(camera.pitch).toFixed(3)\n      });\n    }, 1000, true));\n\n    this.manager_.on('toggle', (event) => {\n      if (!event.target.is3dEnabled()) {\n        this.remove3dState_();\n      }\n    });\n  }\n\n  /**\n   * @private\n   */\n  remove3dState_() {\n    this.ngeoLocation_.getParamKeysWithPrefix(ngeoOlcsConstants.Permalink3dParam.PREFIX).forEach((key) => {\n      this.ngeoStateManager_.deleteParam(key);\n    });\n  }\n\n};\n\nconst name = 'ngeoOlcsService';\nService.module = angular.module(name, [\n  ngeoMiscDebounce.name,\n  ngeoStatemanagerLocation.module.name,\n  ngeoStatemanagerService.module.name,\n]).service(name, Service);\n\nconst exports = Service;\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/olcs/Service.js","/**\n * @module ngeo.olcs.constants\n */\nlet exports = {};\n\n/**\n * @enum {string}\n * @export\n */\nexports.Permalink3dParam = {\n  /**\n   * @type {string}\n   * @export\n   */\n  ENABLED: '3d_enabled',\n  /**\n   * @type {string}\n   * @export\n   */\n  LON: '3d_lon',\n  /**\n   * @type {string}\n   * @export\n   */\n  LAT: '3d_lat',\n  /**\n   * @type {string}\n   * @export\n   */\n  ELEVATION: '3d_elevation',\n  /**\n   * @type {string}\n   * @export\n   */\n  HEADING: '3d_heading',\n  /**\n   * @type {string}\n   * @export\n   */\n  PITCH: '3d_pitch',\n  /**\n   * @type {string}\n   * @export\n   */\n  PREFIX: '3d_'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/olcs/constants.js","/**\n * @module ngeo.olcs.controls3d\n */\nimport googAsserts from 'goog/asserts.js';\nimport * as olEasing from 'ol/easing.js';\nimport olcsCore from 'olcs/core.js';\nimport ngeoBase from 'ngeo/index.js';\nconst exports = angular.module('ngeoOlcsControls3d', []);\n\n\nfunction shouldUpdate(older, newer) {\n  return Number.isFinite(newer) && (!Number.isFinite(older) || Math.abs(newer - older) > 0.05);\n}\n\n\nconst Controller = class {\n\n  /**\n   * @ngInject\n   * @param {!jQuery} $element The element\n   * @param {ngeo.olcs.Service} ngeoOlcsService The ol-cesium service.\n   */\n  constructor($element, ngeoOlcsService) {\n\n    /**\n     * @type {jQuery}\n     * @private\n     */\n    this.element_ = $element;\n\n    /**\n     * @type {olcs.contrib.Manager}\n     * @export\n     */\n    this.ol3dm;\n\n    /**\n     * @type {number}\n     * @export\n     */\n    this.minTilt;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxTilt;\n\n    /**\n     * @type {jQuery}\n     * @private\n     */\n    this.tiltRightEl_;\n\n    /**\n     * @type {jQuery}\n     * @private\n     */\n    this.tiltLeftEl_;\n\n    /**\n     * @type {jQuery}\n     * @private\n     */\n    this.rotation3dEl_;\n\n    /**\n     * @type {jQuery}\n     * @private\n     */\n    this.angle3dEl_;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.previousRotation_;\n\n    /**\n     * @type {Cesium.Matrix4}\n     * @private\n     */\n    this.previousViewMatrix_;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.animationFrameRequestId_;\n\n    /**\n     * @type {ngeo.olcs.Service}\n     * @private\n     */\n    this.olcsService_ = ngeoOlcsService;\n  }\n\n  updateWidget_() {\n    const newRotation = this.ol3dm.getOl3d().getOlView().getRotation();\n    if (shouldUpdate(this.previousRotation_, newRotation)) {\n      this.rotateElement_(this.rotation3dEl_, newRotation);\n      this.previousRotation_ = newRotation;\n    }\n\n    const newViewMatrix = this.ol3dm.getCesiumViewMatrix();\n    if (!Cesium.Matrix4.equalsEpsilon(this.previousViewMatrix_, newViewMatrix, 1e-5)) {\n      const newTilt = this.ol3dm.getTiltOnGlobe(); // this is expensive!!\n      if (Number.isFinite(newTilt || 0)) { // Workaround https://github.com/google/closure-compiler/pull/2712\n        this.rotateElement_(this.angle3dEl_, newTilt);\n        this.previousViewMatrix_ = Cesium.Matrix4.clone(newViewMatrix);\n\n        // if min or max tilt is reached, disable the tilting buttons\n        const buffer = 0.01; // rad\n        if (newTilt - this.minTilt < buffer) {\n          this.tiltRightEl_.addClass('ngeo-right-inactive');\n        } else if (this.tiltRightEl_.hasClass('ngeo-right-inactive')) {\n          this.tiltRightEl_.removeClass('ngeo-right-inactive');\n        }\n        if (this.maxTilt - newTilt < buffer) {\n          this.tiltLeftEl_.addClass('ngeo-left-inactive');\n        } else if (this.tiltLeftEl_.hasClass('ngeo-left-inactive')) {\n          this.tiltLeftEl_.removeClass('ngeo-left-inactive');\n        }\n      }\n    }\n\n    this.animationFrameRequestId_ = requestAnimationFrame(() => this.updateWidget_());\n  }\n\n  $onDestroy() {\n    if (this.animationFrameRequestId_) {\n      cancelAnimationFrame(this.animationFrameRequestId_);\n    }\n  }\n\n  $onInit() {\n    if (this.minTilt === undefined) {\n      this.minTilt = 0;\n    }\n    if (this.maxTilt === undefined) {\n      this.maxTilt = 7 * Math.PI / 16;\n    }\n    if (!this.ol3dm) {\n      this.ol3dm = googAsserts.assert(this.olcsService_.getManager());\n    }\n    this.tiltRightEl_ = this.element_.find('.ngeo-tilt-right');\n    this.tiltLeftEl_ = this.element_.find('.ngeo-tilt-left');\n    this.rotation3dEl_ = this.element_.find('.ngeo-rotation3d');\n    this.angle3dEl_ = this.element_.find('.ngeo-angle3d');\n    this.updateWidget_();\n  }\n\n\n  /**\n   * @param {jQuery} element Element to rotate.\n   * @param {(number|undefined)} angle Angle in radians\n   * @private\n   */\n  rotateElement_(element, angle) {\n    const r = `rotate(${angle}rad)`;\n    element.css({\n      '-moz-transform': r,\n      '-webkit-transform': r,\n      '-o-transform': r,\n      '-ms-transform': r,\n      'transform': r\n    });\n  }\n\n\n  /**\n   * @param {number} angle Angle in degrees.\n   * @export\n   */\n  rotate(angle) {\n    angle = Cesium.Math.toRadians(angle);\n    this.ol3dm.setHeading(angle);\n  }\n\n\n  /**\n   * @param {number} angle Angle in degrees.\n   * @export\n   */\n  tilt(angle) {\n    angle = Cesium.Math.toRadians(angle);\n    const tiltOnGlobe = this.ol3dm.getTiltOnGlobe();\n    if (tiltOnGlobe + angle < this.minTilt) {\n      angle = this.minTilt - tiltOnGlobe;\n    } else if (tiltOnGlobe + angle > this.maxTilt) {\n      angle = this.maxTilt - tiltOnGlobe;\n    }\n    const scene = this.ol3dm.getCesiumScene();\n    olcsCore.rotateAroundBottomCenter(scene, angle);\n  }\n\n\n  /**\n   * @param {number} delta -1 to zoom out and 1 to zoom in.\n   * @export\n   */\n  zoom(delta) {\n    const view = this.ol3dm.getOlView();\n    const cur = view.getResolution();\n    const newResolution = view.constrainResolution(cur, delta);\n    if (view.getAnimating()) {\n      view.cancelAnimations();\n    }\n    view.animate({\n      resolution: newResolution,\n      duration: 250,\n      easing: olEasing.easeOut\n    });\n  }\n};\n\n\n/**\n * @param {!angular.Attributes} $attrs Attributes.\n * @param {!string} ngeoOlcsControls3dTemplateUrl Template function.\n * @return {string} Template URL.\n * @ngInject\n */\nfunction ngeoOlcsControls3dTemplateUrlInjectable($attrs, ngeoOlcsControls3dTemplateUrl) {\n  if (ngeoOlcsControls3dTemplateUrl) {\n    return ngeoOlcsControls3dTemplateUrl;\n  }\n  const templateUrl = $attrs['ngeoOlcsControls3dTemplateUrl'];\n  return templateUrl ? templateUrl :\n    `${ngeoBase.baseModuleTemplateUrl}/olcs/controls3d.html`; // nowebpack\n  // webpack: 'ngeo/olsc/controls3d';\n}\n\n// webpack: exports.run(/* @ngInject */ ($templateCache) => {\n// webpack:   $templateCache.put('ngeo/olsc/controls3d', require('./controls3d.html'));\n// webpack: });\n\n\n/**\n * Provides the \"ngeoOlcsControls3d\" component, a widget for\n * controlling the 3D camera.\n *\n * Example:\n *\n *     <ngeo-olcs-controls3d ng-if=\"$ctrl.manager && $ctrl.manager.is3dEnabled()\">\n *     </ngeo-olcs-controls3d>\n *\n * By default the directive uses \"controls3d.html\" as its templateUrl. This\n * can be changed by redefining the \"ngeoOlcsControls3dTemplateUrl\" value.\n *\n * See our live example: [../examples/simple3d.html](../examples/simple3d.html)\n *\n * @htmlAttribute {olcs.contrib.Manager} ngeo-olcs-manager The OL-Cesium manager.\n * @type {!angular.Component}\n * @ngdoc component\n * @ngname ngeoOlcsControls3d\n */\nexports.component({\n  bindings: {\n    'minTilt': '<?',\n    'maxTilt': '<?',\n    'ol3dm': '<?'\n  },\n  controller: Controller,\n  templateUrl: ngeoOlcsControls3dTemplateUrlInjectable\n});\n\n\nexports.value('ngeoOlcsControls3dTemplateUrl', '');\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/olcs/controls3d.js","/**\n * @module ngeo.olcs.Manager\n */\nimport olcsContribManager from 'olcs/contrib/Manager.js';\n\nconst Manager = class extends olcsContribManager {\n  /**\n   * @param {string} url .\n   * @param {angular.Scope} $rootScope .\n   * @param {olcsx.contrib.ManagerOptions} options .\n   */\n  constructor(url, $rootScope, options) {\n    super(url, options);\n    /**\n     * @type {angular.Scope}\n     * @private\n     */\n    this.rootScope_ = $rootScope;\n  }\n\n\n  /**\n   * @override\n   * @export\n   */\n  toggle3d() {\n    // The transition is asynchronous and at the end of it the state of OLCesium is changed.\n    // In order to have all code dependent on OLCesium state updated, we kick an Angular digest cycle.\n    const promise = super.toggle3d();\n    return promise.then(() => {\n      this.rootScope_.$apply();\n    });\n  }\n};\n\nconst exports = Manager;\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/olcs/Manager.js","/**\n * @module\n */\n// Apache v2 license\n// https://github.com/TerriaJS/terriajs/blob/\n// ebd382a8278a817fce316730d9e459bbb9b829e9/lib/Models/Cesium.js\n\nconst exports = function(ol3d, debug) {\n  this.ol3d = ol3d;\n  this.scene_ = ol3d.getCesiumScene();\n  this.canvas_ = this.scene_.canvas;\n  this.verboseRendering = debug;\n  this._boundNotifyRepaintRequired = this.notifyRepaintRequired.bind(this);\n\n  this.lastCameraViewMatrix_ = new Cesium.Matrix4();\n  this.lastCameraMoveTime_ = 0;\n  this.stoppedRendering = false;\n\n  this._removePostRenderListener = this.scene_.postRender.addEventListener(this.postRender.bind(this));\n\n  this.repaintEventNames_ = [\n    'mousemove', 'mousedown', 'mouseup',\n    'touchstart', 'touchend', 'touchmove',\n    'pointerdown', 'pointerup', 'pointermove',\n    'wheel'\n  ];\n\n  const CameraPrototype = Cesium.Camera.prototype;\n  this.interceptedAPIs_ = [\n    [CameraPrototype, 'setView'],\n    [CameraPrototype, 'move'],\n    [CameraPrototype, 'rotate'],\n    [CameraPrototype, 'lookAt'],\n    [CameraPrototype, 'flyTo'],\n    [CameraPrototype, 'flyToHome'],\n    [CameraPrototype, 'flyToBoundingSphere']\n  ];\n\n  this.originalAPIs_ = this.interceptedAPIs_.map(tuple => tuple[0][tuple[1]]);\n\n  this.originalLoadWithXhr_ = Cesium.loadWithXhr.load;\n  this.originalScheduleTask_ = Cesium.TaskProcessor.prototype.scheduleTask;\n  this.enable();\n};\n\n\n/**\n * Enable.\n */\nexports.prototype.enable = function() {\n  for (const repaintKey of this.repaintEventNames_) {\n    this.canvas_.addEventListener(repaintKey, this._boundNotifyRepaintRequired, false);\n  }\n\n  window.addEventListener('resize', this._boundNotifyRepaintRequired, false);\n\n  // Hacky way to force a repaint when an async load request completes\n  const that = this;\n  Cesium.loadWithXhr.load = function(url, responseType, method, data, headers, deferred, overrideMimeType, preferText, timeout) {\n    deferred['promise']['always'](that._boundNotifyRepaintRequired);\n    that.originalLoadWithXhr_(...arguments); // eslint-disable-line prefer-rest-params\n  };\n\n  // Hacky way to force a repaint when a web worker sends something back.\n  Cesium.TaskProcessor.prototype.scheduleTask = function(parameters, transferableObjects) {\n    const result = that.originalScheduleTask_.call(this, parameters, transferableObjects);\n\n    const taskProcessor = this;\n    if (!taskProcessor._originalWorkerMessageSinkRepaint) {\n      const worker = taskProcessor['_worker'];\n      taskProcessor._originalWorkerMessageSinkRepaint = worker.onmessage;\n      worker.onmessage = function(event) {\n        taskProcessor._originalWorkerMessageSinkRepaint(event);\n        that.notifyRepaintRequired();\n      };\n    }\n\n    return result;\n  };\n\n  // Intercept API calls to trigger a repaint\n  for (let i = 0; i < this.interceptedAPIs_.length; ++i) {\n    const api = this.interceptedAPIs_[i];\n    const parent = api[0];\n    const original = this.originalAPIs_[i];\n    // Not using an arrow function to keep the \"this\" unbounded.\n    parent[api[1]] = function(...args) {\n      original.apply(this, args);\n      that.notifyRepaintRequired();\n    };\n  }\n\n  // Listen for changes on the layer group\n  this.ol3d.getOlMap().getLayerGroup().on('change', this._boundNotifyRepaintRequired);\n};\n\n\n/**\n * Disable.\n */\nexports.prototype.disable = function() {\n  if (!!this._removePostRenderListener) {\n    this._removePostRenderListener();\n    this._removePostRenderListener = undefined;\n  }\n  for (const repaintKey of this.repaintEventNames_) {\n    this.canvas_.removeEventListener(repaintKey, this._boundNotifyRepaintRequired, false);\n  }\n\n  window.removeEventListener('resize', this._boundNotifyRepaintRequired, false);\n\n  Cesium.loadWithXhr.load = this.originalLoadWithXhr_;\n  Cesium.TaskProcessor.prototype.scheduleTask = this.originalScheduleTask_;\n\n  // Restore original APIs\n  for (let i = 0; i < this.interceptedAPIs_.length; ++i) {\n    const api = this.interceptedAPIs_[i];\n    const parent = api[0];\n    const original = this.originalAPIs_[i];\n    parent[api[1]] = original;\n  }\n\n  this.ol3d.getOlMap().getLayerGroup().un('change', this._boundNotifyRepaintRequired);\n};\n\n\n/**\n * @param {number} date\n */\nexports.prototype.postRender = function(date) {\n  // We can safely stop rendering when:\n  //  - the camera position hasn't changed in over a second,\n  //  - there are no tiles waiting to load, and\n  //  - the clock is not animating\n  //  - there are no tweens in progress\n\n  const now = Date.now();\n\n  const scene = this.scene_;\n  const camera = scene.camera;\n\n  if (!Cesium.Matrix4.equalsEpsilon(this.lastCameraViewMatrix_, camera.viewMatrix, 1e-5)) {\n    this.lastCameraMoveTime_ = now;\n  }\n\n  const cameraMovedInLastSecond = now - this.lastCameraMoveTime_ < 1000;\n\n  const surface = scene.globe['_surface'];\n  const tilesWaiting = !surface['tileProvider'].ready ||\n      surface['_tileLoadQueueHigh'].length > 0 ||\n      surface['_tileLoadQueueMedium'].length > 0 ||\n      surface['_tileLoadQueueLow'].length > 0 ||\n      surface['_debug']['tilesWaitingForChildren'] > 0;\n\n  const tweens = scene['tweens'];\n  if (!cameraMovedInLastSecond && !tilesWaiting && tweens.length == 0) {\n    if (this.verboseRendering) {\n      console.log(`stopping rendering @ ${Date.now()}`);\n    }\n    this.ol3d.setBlockCesiumRendering(true);\n    this.stoppedRendering = true;\n  }\n\n  Cesium.Matrix4.clone(camera.viewMatrix, this.lastCameraViewMatrix_);\n};\n\n\n/**\n * Restart render loop.\n * Force a restart of the render loop.\n * @api\n */\nexports.prototype.restartRenderLoop = function() {\n  this.notifyRepaintRequired();\n};\n\n\n/**\n * Notifies the viewer that a repaint is required.\n */\nexports.prototype.notifyRepaintRequired = function() {\n  if (this.verboseRendering && this.stoppedRendering) {\n    console.log(`starting rendering @ ${Date.now()}`);\n  }\n  this.lastCameraMoveTime_ = Date.now();\n  // TODO: do not unblock if not blocked by us\n  this.ol3d.setBlockCesiumRendering(false);\n  this.stoppedRendering = false;\n};\n\n\n/**\n * @param {boolean} debug\n * @api\n */\nexports.prototype.setDebug = function(debug) {\n  this.verboseRendering = debug;\n};\nexport default exports;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/olcs/AutoRenderLoop.js\n// module id = null\n// module chunks = ","/**\n * @module\n */\nimport googAsserts from 'goog/asserts';\nimport olObservable from 'ol/Observable';\nimport olEvents from 'ol/events';\nimport olMath from 'ol/math';\nimport olProj from 'ol/proj';\nimport olcsCore from './core.js';\n\nconst exports = function(scene, map) {\n  /**\n   * @type {!Cesium.Scene}\n   * @private\n   */\n  this.scene_ = scene;\n\n  /**\n   * @type {!Cesium.Camera}\n   * @private\n   */\n  this.cam_ = scene.camera;\n\n  /**\n   * @type {!ol.Map}\n   * @private\n   */\n  this.map_ = map;\n\n  /**\n   * @type {?ol.View}\n   * @private\n   */\n  this.view_ = null;\n\n  /**\n   * @type {?ol.EventsKey}\n   * @private\n   */\n  this.viewListenKey_ = null;\n\n  /**\n   * @type {!ol.TransformFunction}\n   * @private\n   */\n  this.toLonLat_ = exports.identityProjection;\n\n  /**\n   * @type {!ol.TransformFunction}\n   * @private\n   */\n  this.fromLonLat_ = exports.identityProjection;\n\n  /**\n   * 0 -- topdown, PI/2 -- the horizon\n   * @type {number}\n   * @private\n   */\n  this.tilt_ = 0;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.distance_ = 0;\n\n  /**\n   * @type {?Cesium.Matrix4}\n   * @private\n   */\n  this.lastCameraViewMatrix_ = null;\n\n  /**\n   * This is used to discard change events on view caused by updateView method.\n   * @type {boolean}\n   * @private\n   */\n  this.viewUpdateInProgress_ = false;\n\n  this.map_.on('change:view', function(e) {\n    this.setView_(this.map_.getView());\n  }, this);\n  this.setView_(this.map_.getView());\n};\n\n\n/**\n * @param {Array.<number>} input Input coordinate array.\n * @param {Array.<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension.\n * @return {Array.<number>} Input coordinate array (same array as input).\n */\nexports.identityProjection = function(input, opt_output, opt_dimension) {\n  const dim = opt_dimension || input.length;\n  if (opt_output) {\n    for (let i = 0; i < dim; ++i) {\n      opt_output[i] = input[i];\n    }\n  }\n  return input;\n};\n\n\n/**\n * @param {?ol.View} view New view to use.\n * @private\n */\nexports.prototype.setView_ = function(view) {\n  if (this.view_) {\n    olObservable.unByKey(this.viewListenKey_);\n    this.viewListenKey_ = null;\n  }\n\n  this.view_ = view;\n  if (view) {\n    const toLonLat = olProj.getTransform(view.getProjection(), 'EPSG:4326');\n    const fromLonLat = olProj.getTransform('EPSG:4326', view.getProjection());\n    googAsserts.assert(toLonLat && fromLonLat);\n\n    this.toLonLat_ = toLonLat;\n    this.fromLonLat_ = fromLonLat;\n\n    this.viewListenKey_ = olEvents.listen(view, 'propertychange',\n        this.handleViewEvent_, this);\n\n    this.readFromView();\n  } else {\n    this.toLonLat_ = exports.identityProjection;\n    this.fromLonLat_ = exports.identityProjection;\n  }\n};\n\n\n/**\n * @param {?} e\n * @private\n */\nexports.prototype.handleViewEvent_ = function(e) {\n  if (!this.viewUpdateInProgress_) {\n    this.readFromView();\n  }\n};\n\n\n/**\n * @param {number} heading In radians.\n * @api\n */\nexports.prototype.setHeading = function(heading) {\n  if (!this.view_) {\n    return;\n  }\n\n  this.view_.setRotation(heading);\n};\n\n\n/**\n * @return {number|undefined} Heading in radians.\n * @api\n */\nexports.prototype.getHeading = function() {\n  if (!this.view_) {\n    return undefined;\n  }\n  const rotation = this.view_.getRotation();\n  return rotation || 0;\n};\n\n\n/**\n * @param {number} tilt In radians.\n * @api\n */\nexports.prototype.setTilt = function(tilt) {\n  this.tilt_ = tilt;\n  this.updateCamera_();\n};\n\n\n/**\n * @return {number} Tilt in radians.\n * @api\n */\nexports.prototype.getTilt = function() {\n  return this.tilt_;\n};\n\n\n/**\n * @param {number} distance In meters.\n * @api\n */\nexports.prototype.setDistance = function(distance) {\n  this.distance_ = distance;\n  this.updateCamera_();\n  this.updateView();\n};\n\n\n/**\n * @return {number} Distance in meters.\n * @api\n */\nexports.prototype.getDistance = function() {\n  return this.distance_;\n};\n\n\n/**\n * Shortcut for ol.View.setCenter().\n * @param {!ol.Coordinate} center Same projection as the ol.View.\n * @api\n */\nexports.prototype.setCenter = function(center) {\n  if (!this.view_) {\n    return;\n  }\n  this.view_.setCenter(center);\n};\n\n\n/**\n * Shortcut for ol.View.getCenter().\n * @return {ol.Coordinate|undefined} Same projection as the ol.View.\n * @api\n */\nexports.prototype.getCenter = function() {\n  if (!this.view_) {\n    return undefined;\n  }\n  return this.view_.getCenter();\n};\n\n\n/**\n * Sets the position of the camera.\n * @param {!ol.Coordinate} position Same projection as the ol.View.\n * @api\n */\nexports.prototype.setPosition = function(position) {\n  if (!this.toLonLat_) {\n    return;\n  }\n  const ll = this.toLonLat_(position);\n  googAsserts.assert(ll);\n\n  const carto = new Cesium.Cartographic(\n      olMath.toRadians(ll[0]),\n      olMath.toRadians(ll[1]),\n      this.getAltitude());\n\n  this.cam_.position = Cesium.Ellipsoid.WGS84.cartographicToCartesian(carto);\n  this.updateView();\n};\n\n\n/**\n * Calculates position under the camera.\n * @return {!ol.Coordinate|undefined} Same projection as the ol.View.\n * @api\n */\nexports.prototype.getPosition = function() {\n  if (!this.fromLonLat_) {\n    return undefined;\n  }\n  const carto = Cesium.Ellipsoid.WGS84.cartesianToCartographic(this.cam_.position);\n\n  const pos = this.fromLonLat_([\n    olMath.toDegrees(carto.longitude),\n    olMath.toDegrees(carto.latitude)\n  ]);\n  googAsserts.assert(pos);\n  return pos;\n};\n\n\n/**\n * @param {number} altitude In meters.\n * @api\n */\nexports.prototype.setAltitude = function(altitude) {\n  const carto = Cesium.Ellipsoid.WGS84.cartesianToCartographic(\n      this.cam_.position);\n  carto.height = altitude;\n  this.cam_.position = Cesium.Ellipsoid.WGS84.cartographicToCartesian(carto);\n\n  this.updateView();\n};\n\n\n/**\n * @return {number} Altitude in meters.\n * @api\n */\nexports.prototype.getAltitude = function() {\n  const carto = Cesium.Ellipsoid.WGS84.cartesianToCartographic(\n      this.cam_.position);\n\n  return carto.height;\n};\n\n\n/**\n * Rotates the camera to point at the specified target.\n * @param {!ol.Coordinate} position Same projection as the ol.View.\n * @api\n */\nexports.prototype.lookAt = function(position) {\n  if (!this.toLonLat_) {\n    return;\n  }\n  const ll = this.toLonLat_(position);\n  googAsserts.assert(ll);\n\n  const carto = Cesium.Cartographic.fromDegrees(ll[0], ll[1]);\n  olcsCore.lookAt(this.cam_, carto, this.scene_.globe);\n\n  this.updateView();\n};\n\n\n/**\n * Updates the state of the underlying Cesium.Camera\n * according to the current values of the properties.\n * @private\n */\nexports.prototype.updateCamera_ = function() {\n  if (!this.view_ || !this.toLonLat_) {\n    return;\n  }\n  const center = this.view_.getCenter();\n  if (!center) {\n    return;\n  }\n  const ll = this.toLonLat_(center);\n  googAsserts.assert(ll);\n\n  const carto = new Cesium.Cartographic(olMath.toRadians(ll[0]),\n      olMath.toRadians(ll[1]));\n  if (this.scene_.globe) {\n    const height = this.scene_.globe.getHeight(carto);\n    carto.height = height || 0;\n  }\n\n  const destination = Cesium.Ellipsoid.WGS84.cartographicToCartesian(carto);\n\n  /** @type {Cesium.optionsOrientation} */\n  const orientation = {\n    pitch: this.tilt_ - Cesium.Math.PI_OVER_TWO,\n    heading: -this.view_.getRotation(),\n    roll: undefined\n  };\n  this.cam_.setView({\n    destination,\n    orientation\n  });\n\n  this.cam_.moveBackward(this.distance_);\n\n  this.checkCameraChange(true);\n};\n\n\n/**\n * Calculates the values of the properties from the current ol.View state.\n * @api\n */\nexports.prototype.readFromView = function() {\n  if (!this.view_ || !this.toLonLat_) {\n    return;\n  }\n  const center = this.view_.getCenter();\n  if (center === undefined || center === null) {\n    return;\n  }\n  const ll = this.toLonLat_(center);\n  googAsserts.assert(ll);\n\n  const resolution = this.view_.getResolution();\n  this.distance_ = this.calcDistanceForResolution(\n      resolution || 0, olMath.toRadians(ll[1]));\n\n  this.updateCamera_();\n};\n\n\n/**\n * Calculates the values of the properties from the current Cesium.Camera state.\n * Modifies the center, resolution and rotation properties of the view.\n * @api\n */\nexports.prototype.updateView = function() {\n  if (!this.view_ || !this.fromLonLat_) {\n    return;\n  }\n  this.viewUpdateInProgress_ = true;\n\n  // target & distance\n  const ellipsoid = Cesium.Ellipsoid.WGS84;\n  const scene = this.scene_;\n  const target = olcsCore.pickCenterPoint(scene);\n\n  let bestTarget = target;\n  if (!bestTarget) {\n    //TODO: how to handle this properly ?\n    const globe = scene.globe;\n    const carto = this.cam_.positionCartographic.clone();\n    const height = globe.getHeight(carto);\n    carto.height = height || 0;\n    bestTarget = Cesium.Ellipsoid.WGS84.cartographicToCartesian(carto);\n  }\n  this.distance_ = Cesium.Cartesian3.distance(bestTarget, this.cam_.position);\n  const bestTargetCartographic = ellipsoid.cartesianToCartographic(bestTarget);\n  this.view_.setCenter(this.fromLonLat_([\n    olMath.toDegrees(bestTargetCartographic.longitude),\n    olMath.toDegrees(bestTargetCartographic.latitude)]));\n\n  // resolution\n  this.view_.setResolution(\n      this.calcResolutionForDistance(this.distance_,\n          bestTargetCartographic ? bestTargetCartographic.latitude : 0));\n\n\n  /*\n   * Since we are positioning the target, the values of heading and tilt\n   * need to be calculated _at the target_.\n   */\n  if (target) {\n    const pos = this.cam_.position;\n\n    // normal to the ellipsoid at the target\n    const targetNormal = new Cesium.Cartesian3();\n    ellipsoid.geocentricSurfaceNormal(target, targetNormal);\n\n    // vector from the target to the camera\n    const targetToCamera = new Cesium.Cartesian3();\n    Cesium.Cartesian3.subtract(pos, target, targetToCamera);\n    Cesium.Cartesian3.normalize(targetToCamera, targetToCamera);\n\n\n    // HEADING\n    const up = this.cam_.up;\n    const right = this.cam_.right;\n    const normal = new Cesium.Cartesian3(-target.y, target.x, 0); // what is it?\n    const heading = Cesium.Cartesian3.angleBetween(right, normal);\n    const cross = Cesium.Cartesian3.cross(target, up, new Cesium.Cartesian3());\n    const orientation = cross.z;\n\n    this.view_.setRotation((orientation < 0 ? heading : -heading));\n\n    // TILT\n    const tiltAngle = Math.acos(\n        Cesium.Cartesian3.dot(targetNormal, targetToCamera));\n    this.tilt_ = isNaN(tiltAngle) ? 0 : tiltAngle;\n  } else {\n    // fallback when there is no target\n    this.view_.setRotation(this.cam_.heading);\n    this.tilt_ = -this.cam_.pitch + Math.PI / 2;\n  }\n\n  this.viewUpdateInProgress_ = false;\n};\n\n\n/**\n * Check if the underlying camera state has changed and ensure synchronization.\n * @param {boolean=} opt_dontSync Do not synchronize the view.\n */\nexports.prototype.checkCameraChange = function(opt_dontSync) {\n  const old = this.lastCameraViewMatrix_;\n  const current = this.cam_.viewMatrix;\n\n  if (!old || !Cesium.Matrix4.equalsEpsilon(old, current, 1e-5)) {\n    this.lastCameraViewMatrix_ = current.clone();\n    if (opt_dontSync !== true) {\n      this.updateView();\n    }\n  }\n};\n\n\n/**\n * calculate the distance between camera and centerpoint based on the resolution and latitude value\n * @param {number} resolution Number of map units per pixel.\n * @param {number} latitude Latitude in radians.\n * @return {number} The calculated distance.\n * @api\n */\nexports.prototype.calcDistanceForResolution = function(resolution, latitude) {\n  const canvas = this.scene_.canvas;\n  const fovy = this.cam_.frustum.fovy; // vertical field of view\n  googAsserts.assert(!isNaN(fovy));\n  const metersPerUnit = this.view_.getProjection().getMetersPerUnit();\n\n  // number of \"map units\" visible in 2D (vertically)\n  const visibleMapUnits = resolution * canvas.clientHeight;\n\n  // The metersPerUnit does not take latitude into account, but it should\n  // be lower with increasing latitude -- we have to compensate.\n  // In 3D it is not possible to maintain the resolution at more than one point,\n  // so it only makes sense to use the latitude of the \"target\" point.\n  const relativeCircumference = Math.cos(Math.abs(latitude));\n\n  // how many meters should be visible in 3D\n  const visibleMeters = visibleMapUnits * metersPerUnit * relativeCircumference;\n\n  // distance required to view the calculated length in meters\n  //\n  //  fovy/2\n  //    |\\\n  //  x | \\\n  //    |--\\\n  // visibleMeters/2\n  const requiredDistance = (visibleMeters / 2) / Math.tan(fovy / 2);\n\n  // NOTE: This calculation is not absolutely precise, because metersPerUnit\n  // is a great simplification. It does not take ellipsoid/terrain into account.\n\n  return requiredDistance;\n};\n\n\n/**\n * calculate the resolution based on a distance(camera to position) and latitude value\n * @param {number} distance\n * @param {number} latitude\n * @return {number} The calculated resolution.\n * @api\n */\nexports.prototype.calcResolutionForDistance = function(distance, latitude) {\n  // See the reverse calculation (calcDistanceForResolution) for details\n  const canvas = this.scene_.canvas;\n  const fovy = this.cam_.frustum.fovy;\n  const metersPerUnit = this.view_.getProjection().getMetersPerUnit();\n\n  const visibleMeters = 2 * distance * Math.tan(fovy / 2);\n  const relativeCircumference = Math.cos(Math.abs(latitude));\n  const visibleMapUnits = visibleMeters / metersPerUnit / relativeCircumference;\n  const resolution = visibleMapUnits / canvas.clientHeight;\n\n  return resolution;\n};\nexport default exports;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/olcs/Camera.js\n// module id = null\n// module chunks = ","/**\n * @module ol/source/XYZ\n */\nimport {inherits} from '../index.js';\nimport TileImage from '../source/TileImage.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\n\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case,\n * {@link ol.source.TileImage} can be used with a `tileUrlFunction`\n * such as:\n *\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *        coordinate[1] + '/' + coordinate[2] + '.png';\n *    }\n *\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.XYZOptions=} opt_options XYZ options.\n * @api\n */\nconst XYZ = function(opt_options) {\n  const options = opt_options || {};\n  const projection = options.projection !== undefined ?\n    options.projection : 'EPSG:3857';\n\n  const tileGrid = options.tileGrid !== undefined ? options.tileGrid :\n    createXYZ({\n      extent: extentFromProjection(projection),\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize\n    });\n\n  TileImage.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    opaque: options.opaque,\n    projection: projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileGrid: tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n};\n\ninherits(XYZ, TileImage);\nexport default XYZ;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/XYZ.js\n// module id = 4\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module\n */\nimport olEvents from 'ol/events';\nimport olProj from 'ol/proj';\n\nconst exports = function(source, opt_fallbackProj) {\n  // Do not ol.inherit() or call super constructor from\n  // Cesium.ImageryProvider since this particular function is a\n  // 'non instanciable interface' which throws on instanciation.\n\n  /**\n   * @type {!ol.source.TileImage}\n   * @private\n   */\n  this.source_ = source;\n\n  /**\n   * @type {?ol.proj.Projection}\n   * @private\n   */\n  this.projection_ = null;\n\n  /**\n   * @type {?ol.proj.Projection}\n   * @private\n   */\n  this.fallbackProj_ = opt_fallbackProj || null;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.ready_ = false;\n\n  /**\n   * @type {?Cesium.Credit}\n   * @private\n   */\n  this.credit_ = null;\n\n  /**\n   * @type {?Cesium.TilingScheme}\n   * @private\n   */\n  this.tilingScheme_ = null;\n\n  /**\n   * @type {?Cesium.Rectangle}\n   * @private\n   */\n  this.rectangle_ = null;\n\n  const proxy = this.source_.get('olcs.proxy');\n  if (proxy) {\n    if (typeof proxy === 'function') {\n      this.proxy_ = {\n        'getURL': proxy\n      };\n    } else if (typeof proxy === 'string') {\n      this.proxy_ = new Cesium.DefaultProxy(proxy);\n    }\n  }\n\n  this.errorEvent_ = new Cesium.Event();\n\n  this.emptyCanvas_ = document.createElement('canvas');\n  this.emptyCanvas_.width = 1;\n  this.emptyCanvas_.height = 1;\n\n  this.source_.on(olEvents.EventType.CHANGE, function(e) {\n    this.handleSourceChanged_();\n  }, this);\n  this.handleSourceChanged_();\n};\n\n\n// definitions of getters that are required to be present\n// in the Cesium.ImageryProvider instance:\nObject.defineProperties(exports.prototype, {\n  'ready': {\n    'get': /** @this {olcs.core.OLImageryProvider} */\n        function() {return this.ready_;}\n  },\n\n  'rectangle': {\n    'get': /** @this {olcs.core.OLImageryProvider} */\n        function() {return this.rectangle_;}\n  },\n\n  'tileWidth': {\n    'get': /** @this {olcs.core.OLImageryProvider} */\n        function() {\n          const tg = this.source_.getTileGrid();\n          return tg ? tg.getTileSize(0) : 256;\n        }\n  },\n\n  'tileHeight': {\n    'get': /** @this {olcs.core.OLImageryProvider} */\n        function() {return this.tileWidth;}\n  },\n\n  'maximumLevel': {\n    'get': /** @this {olcs.core.OLImageryProvider} */\n        function() {\n          const tg = this.source_.getTileGrid();\n          return tg ? tg.getMaxZoom() : 18;\n        }\n  },\n\n  'minimumLevel': {\n    'get': /** @this {olcs.core.OLImageryProvider} */\n        function() {\n          // WARNING: Do not use the minimum level (at least until the extent is\n          // properly set). Cesium assumes the minimumLevel to contain only\n          // a few tiles and tries to load them all at once -- this can\n          // freeze and/or crash the browser !\n          return 0;\n          //var tg = this.source_.getTileGrid();\n          //return tg ? tg.getMinZoom() : 0;\n        }\n  },\n\n  'tilingScheme': {\n    'get': /** @this {olcs.core.OLImageryProvider} */\n        function() {return this.tilingScheme_;}\n  },\n\n  'tileDiscardPolicy': {\n    'get': function() {return undefined;}\n  },\n\n  'errorEvent': {\n    'get': /** @this {olcs.core.OLImageryProvider} */\n        function() {return this.errorEvent_;}\n  },\n\n  'credit': {\n    'get': /** @this {olcs.core.OLImageryProvider} */\n        function() {return this.credit_;}\n  },\n\n  'proxy': {\n    'get': /** @this {olcs.core.OLImageryProvider} */\n        function() {return this.proxy_;}\n  },\n\n  'hasAlphaChannel': {\n    'get': function() {return true;}\n  },\n\n  'pickFeatures': {\n    'get': function() {return undefined;}\n  }\n});\n\n\n/**\n * Checks if the underlying source is ready and cached required data.\n * @private\n */\nexports.prototype.handleSourceChanged_ = function() {\n  if (!this.ready_ && this.source_.getState() == 'ready') {\n    const proj = this.source_.getProjection();\n    this.projection_ = proj ? proj : this.fallbackProj_;\n    if (this.projection_ == olProj.get('EPSG:4326')) {\n      this.tilingScheme_ = new Cesium.GeographicTilingScheme();\n    } else if (this.projection_ == olProj.get('EPSG:3857')) {\n      this.tilingScheme_ = new Cesium.WebMercatorTilingScheme();\n    } else {\n      return;\n    }\n    this.rectangle_ = this.tilingScheme_.rectangle;\n\n    const credit = exports.createCreditForSource(this.source_);\n    this.credit_ = credit || null;\n\n    this.ready_ = true;\n  }\n};\n\n\n/**\n * Tries to create proper Cesium.Credit for\n * the given ol.source.Source as closely as possible.\n * @param {!ol.source.Source} source\n * @return {?Cesium.Credit}\n */\nexports.createCreditForSource = function(source) {\n  let text = '';\n  const attributions = source.getAttributions();\n  if (attributions) {\n    attributions.forEach((el) => {\n      // strip html tags (not supported in Cesium)\n      text += `${el.getHTML().replace(/<\\/?[^>]+(>|$)/g, '')} `;\n    });\n  }\n\n  let imageUrl, link;\n  if (text.length == 0) {\n    // only use logo if no text is specified\n    // otherwise the Cesium will automatically skip the text:\n    // \"The text to be displayed on the screen if no imageUrl is specified.\"\n    const logo = source.getLogo();\n    if (logo) {\n      if (typeof logo == 'string') {\n        imageUrl = logo;\n      } else {\n        imageUrl = logo.src;\n        link = logo.href;\n      }\n    }\n  }\n\n  return (imageUrl || text.length > 0) ? new Cesium.Credit(text, imageUrl, link) : null;\n};\n\n\n/**\n * TODO: attributions for individual tile ranges\n * @export\n * @override\n */\nexports.prototype.getTileCredits = function(x, y, level) {\n  return undefined;\n};\n\n\n/**\n * @export\n * @override\n */\nexports.prototype.requestImage = function(x, y, level) {\n  const tileUrlFunction = this.source_.getTileUrlFunction();\n  if (tileUrlFunction && this.projection_) {\n\n    // Perform mapping of Cesium tile coordinates to OpenLayers tile coordinates:\n    // 1) Cesium zoom level 0 is OpenLayers zoom level 1 for EPSG:4326\n    const z_ = this.tilingScheme_ instanceof Cesium.GeographicTilingScheme ? level + 1 : level;\n    // 2) OpenLayers tile coordinates increase from bottom to top\n    const y_ = -y - 1;\n\n    let url = tileUrlFunction.call(this.source_,\n        [z_, x, y_], 1, this.projection_);\n    if (this.proxy_) {\n      url = this.proxy_.getURL(url);\n    }\n    return url ? Cesium.ImageryProvider.loadImage(this, url) : this.emptyCanvas_;\n  } else {\n    // return empty canvas to stop Cesium from retrying later\n    return this.emptyCanvas_;\n  }\n};\nexport default exports;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/olcs/core/OLImageryProvider.js\n// module id = null\n// module chunks = ","/**\n * @module\n */\nconst exports = {};\nimport olEasing from 'ol/easing';\nimport googAsserts from 'goog/asserts';\nimport olLayerTile from 'ol/layer/Tile';\nimport olLayerImage from 'ol/layer/Image';\nimport olProj from 'ol/proj';\nimport olSourceImage from 'ol/source/Image';\nimport olSourceImageWMS from 'ol/source/ImageWMS';\nimport olSourceTileImage from 'ol/source/TileImage';\nimport olSourceTileWMS from 'ol/source/TileWMS';\nimport olcsCoreOLImageryProvider from './core/OLImageryProvider.js';\n\n\n/**\n * Compute the pixel width and height of a point in meters using the\n * camera frustum.\n * @param {!Cesium.Scene} scene\n * @param {!Cesium.Cartesian3} target\n * @return {!Cesium.Cartesian2} the pixel size\n * @api\n */\nexports.computePixelSizeAtCoordinate = function(scene, target) {\n  const camera = scene.camera;\n  const canvas = scene.canvas;\n  const frustum = camera.frustum;\n  const distance = Cesium.Cartesian3.magnitude(Cesium.Cartesian3.subtract(\n      camera.position, target, new Cesium.Cartesian3()));\n  const pixelSize = new Cesium.Cartesian2();\n  return frustum.getPixelDimensions(canvas.clientWidth, canvas.clientHeight,\n      distance, pixelSize);\n};\n\n\n/**\n * Compute bounding box around a target point.\n * @param {!Cesium.Scene} scene\n * @param {!Cesium.Cartesian3} target\n * @param {number} amount Half the side of the box, in pixels.\n * @return {Array<Cesium.Cartographic>} bottom left and top right\n * coordinates of the box\n */\nexports.computeBoundingBoxAtTarget = function(scene, target, amount) {\n  const pixelSize = exports.computePixelSizeAtCoordinate(scene, target);\n  const transform = Cesium.Transforms.eastNorthUpToFixedFrame(target);\n\n  const bottomLeft = Cesium.Matrix4.multiplyByPoint(\n      transform,\n      new Cesium.Cartesian3(-pixelSize.x * amount, -pixelSize.y * amount, 0),\n      new Cesium.Cartesian3());\n\n  const topRight = Cesium.Matrix4.multiplyByPoint(\n      transform,\n      new Cesium.Cartesian3(pixelSize.x * amount, pixelSize.y * amount, 0),\n      new Cesium.Cartesian3());\n\n  return Cesium.Ellipsoid.WGS84.cartesianArrayToCartographicArray(\n      [bottomLeft, topRight]);\n};\n\n\n/**\n *\n * @param {!ol.geom.Geometry} geometry\n * @param {number} height\n * @api\n */\nexports.applyHeightOffsetToGeometry = function(geometry, height) {\n  geometry.applyTransform((input, output, stride) => {\n    googAsserts.assert(input === output);\n    if (stride !== undefined && stride >= 3) {\n      for (let i = 0; i < output.length; i += stride) {\n        output[i + 2] = output[i + 2] + height;\n      }\n    }\n    return output;\n  });\n};\n\n\n/**\n * @param {!Cesium.Camera} camera\n * @param {number} angle\n * @param {!Cesium.Cartesian3} axis\n * @param {!Cesium.Matrix4} transform\n * @param {olcsx.core.RotateAroundAxisOption=} opt_options\n * @api\n */\nexports.rotateAroundAxis = function(camera, angle, axis, transform,\n    opt_options) {\n  const clamp = Cesium.Math.clamp;\n  const defaultValue = Cesium.defaultValue;\n\n  const options = opt_options || {};\n  const duration = defaultValue(options.duration, 500); // ms\n  const easing = defaultValue(options.easing, olEasing.linear);\n  const callback = options.callback;\n\n  let lastProgress = 0;\n  const oldTransform = new Cesium.Matrix4();\n\n  const start = Date.now();\n  const step = function() {\n    const timestamp = Date.now();\n    const timeDifference = timestamp - start;\n    const progress = easing(clamp(timeDifference / duration, 0, 1));\n    googAsserts.assert(progress >= lastProgress);\n\n    camera.transform.clone(oldTransform);\n    const stepAngle = (progress - lastProgress) * angle;\n    lastProgress = progress;\n    camera.lookAtTransform(transform);\n    camera.rotate(axis, stepAngle);\n    camera.lookAtTransform(oldTransform);\n\n    if (progress < 1) {\n      window.requestAnimationFrame(step);\n    } else {\n      if (callback) {\n        callback();\n      }\n    }\n  };\n  window.requestAnimationFrame(step);\n};\n\n\n/**\n * @param {!Cesium.Scene} scene\n * @param {number} heading\n * @param {!Cesium.Cartesian3} bottomCenter\n * @param {olcsx.core.RotateAroundAxisOption=} opt_options\n * @api\n */\nexports.setHeadingUsingBottomCenter = function(scene, heading,\n    bottomCenter, opt_options) {\n  const camera = scene.camera;\n  // Compute the camera position to zenith quaternion\n  const angleToZenith = exports.computeAngleToZenith(scene, bottomCenter);\n  const axis = camera.right;\n  const quaternion = Cesium.Quaternion.fromAxisAngle(axis, angleToZenith);\n  const rotation = Cesium.Matrix3.fromQuaternion(quaternion);\n\n  // Get the zenith point from the rotation of the position vector\n  const vector = new Cesium.Cartesian3();\n  Cesium.Cartesian3.subtract(camera.position, bottomCenter, vector);\n  const zenith = new Cesium.Cartesian3();\n  Cesium.Matrix3.multiplyByVector(rotation, vector, zenith);\n  Cesium.Cartesian3.add(zenith, bottomCenter, zenith);\n\n  // Actually rotate around the zenith normal\n  const transform = Cesium.Matrix4.fromTranslation(zenith);\n  const rotateAroundAxis = exports.rotateAroundAxis;\n  rotateAroundAxis(camera, heading, zenith, transform, opt_options);\n};\n\n\n/**\n * Get the 3D position of the given pixel of the canvas.\n * @param {!Cesium.Scene} scene\n * @param {!Cesium.Cartesian2} pixel\n * @return {!Cesium.Cartesian3|undefined}\n * @api\n */\nexports.pickOnTerrainOrEllipsoid = function(scene, pixel) {\n  const ray = scene.camera.getPickRay(pixel);\n  const target = scene.globe.pick(ray, scene);\n  return target || scene.camera.pickEllipsoid(pixel);\n};\n\n\n/**\n * Get the 3D position of the point at the bottom-center of the screen.\n * @param {!Cesium.Scene} scene\n * @return {!Cesium.Cartesian3|undefined}\n * @api\n */\nexports.pickBottomPoint = function(scene) {\n  const canvas = scene.canvas;\n  const bottom = new Cesium.Cartesian2(\n      canvas.clientWidth / 2, canvas.clientHeight);\n  return exports.pickOnTerrainOrEllipsoid(scene, bottom);\n};\n\n\n/**\n * Get the 3D position of the point at the center of the screen.\n * @param {!Cesium.Scene} scene\n * @return {!Cesium.Cartesian3|undefined}\n * @api\n */\nexports.pickCenterPoint = function(scene) {\n  const canvas = scene.canvas;\n  const center = new Cesium.Cartesian2(\n      canvas.clientWidth / 2,\n      canvas.clientHeight / 2);\n  return exports.pickOnTerrainOrEllipsoid(scene, center);\n};\n\n\n/**\n * Compute the signed tilt angle on globe, between the opposite of the\n * camera direction and the target normal. Return undefined if there is no\n * intersection of the camera direction with the globe.\n * @param {!Cesium.Scene} scene\n * @return {number|undefined}\n * @api\n */\nexports.computeSignedTiltAngleOnGlobe = function(scene) {\n  const camera = scene.camera;\n  const ray = new Cesium.Ray(camera.position, camera.direction);\n  let target = scene.globe.pick(ray, scene);\n\n  if (!target) {\n    // no tiles in the area were loaded?\n    const ellipsoid = Cesium.Ellipsoid.WGS84;\n    const obj = Cesium.IntersectionTests.rayEllipsoid(ray, ellipsoid);\n    if (obj) {\n      target = Cesium.Ray.getPoint(ray, obj.start);\n    }\n  }\n\n  if (!target) {\n    return undefined;\n  }\n\n  const normal = new Cesium.Cartesian3();\n  Cesium.Ellipsoid.WGS84.geocentricSurfaceNormal(target, normal);\n\n  const angleBetween = exports.signedAngleBetween;\n  const angle = angleBetween(camera.direction, normal, camera.right) - Math.PI;\n  return Cesium.Math.convertLongitudeRange(angle);\n};\n\n\n/**\n * Compute the ray from the camera to the bottom-center of the screen.\n * @param {!Cesium.Scene} scene\n * @return {!Cesium.Ray}\n */\nexports.bottomFovRay = function(scene) {\n  const camera = scene.camera;\n  const fovy2 = camera.frustum.fovy / 2;\n  const direction = camera.direction;\n  const rotation = Cesium.Quaternion.fromAxisAngle(camera.right, fovy2);\n  const matrix = Cesium.Matrix3.fromQuaternion(rotation);\n  const vector = new Cesium.Cartesian3();\n  Cesium.Matrix3.multiplyByVector(matrix, direction, vector);\n  return new Cesium.Ray(camera.position, vector);\n};\n\n\n/**\n * Compute the angle between two Cartesian3.\n * @param {!Cesium.Cartesian3} first\n * @param {!Cesium.Cartesian3} second\n * @param {!Cesium.Cartesian3} normal Normal to test orientation against.\n * @return {number}\n */\nexports.signedAngleBetween = function(first, second, normal) {\n  // We are using the dot for the angle.\n  // Then the cross and the dot for the sign.\n  const a = new Cesium.Cartesian3();\n  const b = new Cesium.Cartesian3();\n  const c = new Cesium.Cartesian3();\n  Cesium.Cartesian3.normalize(first, a);\n  Cesium.Cartesian3.normalize(second, b);\n  Cesium.Cartesian3.cross(a, b, c);\n\n  const cosine = Cesium.Cartesian3.dot(a, b);\n  const sine = Cesium.Cartesian3.magnitude(c);\n\n  // Sign of the vector product and the orientation normal\n  const sign = Cesium.Cartesian3.dot(normal, c);\n  const angle = Math.atan2(sine, cosine);\n  return sign >= 0 ? angle : -angle;\n};\n\n\n/**\n * Compute the rotation angle around a given point, needed to reach the\n * zenith position.\n * At a zenith position, the camera direction is going througth the earth\n * center and the frustrum bottom ray is going through the chosen pivot\n * point.\n * The bottom-center of the screen is a good candidate for the pivot point.\n * @param {!Cesium.Scene} scene\n * @param {!Cesium.Cartesian3} pivot Point around which the camera rotates.\n * @return {number}\n * @api\n */\nexports.computeAngleToZenith = function(scene, pivot) {\n  // This angle is the sum of the angles 'fy' and 'a', which are defined\n  // using the pivot point and its surface normal.\n  //        Zenith |    camera\n  //           \\   |   /\n  //            \\fy|  /\n  //             \\ |a/\n  //              \\|/pivot\n  const camera = scene.camera;\n  const fy = camera.frustum.fovy / 2;\n  const ray = exports.bottomFovRay(scene);\n  const direction = Cesium.Cartesian3.clone(ray.direction);\n  Cesium.Cartesian3.negate(direction, direction);\n\n  const normal = new Cesium.Cartesian3();\n  Cesium.Ellipsoid.WGS84.geocentricSurfaceNormal(pivot, normal);\n\n  const left = new Cesium.Cartesian3();\n  Cesium.Cartesian3.negate(camera.right, left);\n\n  const a = exports.signedAngleBetween(normal, direction, left);\n  return a + fy;\n};\n\n\n/**\n * Rotate the camera so that its direction goes through the target point.\n * If a globe is given, the target height is first interpolated from terrain.\n * @param {!Cesium.Camera} camera\n * @param {!Cesium.Cartographic} target\n * @param {Cesium.Globe=} opt_globe\n * @api\n */\nexports.lookAt = function(camera, target, opt_globe) {\n  if (opt_globe) {\n    const height = opt_globe.getHeight(target);\n    target.height = height || 0;\n  }\n\n  const ellipsoid = Cesium.Ellipsoid.WGS84;\n  const targetb = ellipsoid.cartographicToCartesian(target);\n\n  const position = camera.position;\n  const up = new Cesium.Cartesian3();\n  ellipsoid.geocentricSurfaceNormal(position, up);\n\n  camera.lookAt(position, targetb, up);\n};\n\n\n/**\n * Convert an OpenLayers extent to a Cesium rectangle.\n * @param {ol.Extent} extent Extent.\n * @param {ol.ProjectionLike} projection Extent projection.\n * @return {Cesium.Rectangle} The corresponding Cesium rectangle.\n * @api\n */\nexports.extentToRectangle = function(extent, projection) {\n  if (extent && projection) {\n    const ext = olProj.transformExtent(extent, projection, 'EPSG:4326');\n    return Cesium.Rectangle.fromDegrees(ext[0], ext[1], ext[2], ext[3]);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Creates Cesium.ImageryLayer best corresponding to the given ol.layer.Layer.\n * Only supports raster layers\n * @param {!ol.layer.Base} olLayer\n * @param {!ol.proj.Projection} viewProj Projection of the view.\n * @return {?Cesium.ImageryLayer} null if not possible (or supported)\n * @api\n */\nexports.tileLayerToImageryLayer = function(olLayer, viewProj) {\n\n  if (!(olLayer instanceof olLayerTile) && !(olLayer instanceof olLayerImage)) {\n    return null;\n  }\n\n  let provider = null;\n  let source = olLayer.getSource();\n\n  // Convert ImageWMS to TileWMS\n  if (source instanceof olSourceImageWMS && source.getUrl() &&\n    source.getImageLoadFunction() === olSourceImage.defaultImageLoadFunction) {\n    source = new olSourceTileWMS({\n      url: source.getUrl(),\n      params: source.getParams(),\n      attributions: source.getAttributions(),\n      projection: source.getProjection(),\n      logo: source.getLogo(),\n      'olcs.proxy': source.get('olcs.proxy'),\n      'olcs.imagesource': source\n    });\n  }\n\n  if (source instanceof olSourceTileImage) {\n    let projection = source.getProjection();\n\n    if (!projection) {\n      // if not explicit, assume the same projection as view\n      projection = viewProj;\n    } else if (projection !== viewProj) {\n      return null; // do not sync layers with projections different than view\n    }\n\n    const is3857 = projection === olProj.get('EPSG:3857');\n    const is4326 = projection === olProj.get('EPSG:4326');\n    if (is3857 || is4326) {\n      provider = new olcsCoreOLImageryProvider(source, viewProj);\n    } else {\n      return null;\n    }\n  } else {\n    // sources other than TileImage are currently not supported\n    return null;\n  }\n\n  // the provider is always non-null if we got this far\n\n  const layerOptions = {};\n\n  const forcedExtent = /** @type {ol.Extent} */ (olLayer.get('olcs.extent'));\n  const ext = forcedExtent || olLayer.getExtent();\n  if (ext) {\n    layerOptions.rectangle = exports.extentToRectangle(ext, viewProj);\n  }\n\n  const cesiumLayer = new Cesium.ImageryLayer(provider, layerOptions);\n  return cesiumLayer;\n};\n\n\n/**\n * Synchronizes the layer rendering properties (opacity, visible)\n * to the given Cesium ImageryLayer.\n * @param {olcsx.LayerWithParents} olLayerWithParents\n * @param {!Cesium.ImageryLayer} csLayer\n * @api\n */\nexports.updateCesiumLayerProperties = function(olLayerWithParents, csLayer) {\n  let opacity = 1;\n  let visible = true;\n  [olLayerWithParents.layer].concat(olLayerWithParents.parents).forEach((olLayer) => {\n    const layerOpacity = olLayer.getOpacity();\n    if (layerOpacity !== undefined) {\n      opacity *= layerOpacity;\n    }\n    const layerVisible = olLayer.getVisible();\n    if (layerVisible !== undefined) {\n      visible &= layerVisible;\n    }\n  });\n  csLayer.alpha = opacity;\n  csLayer.show = visible;\n};\n\n\n/**\n * Convert a 2D or 3D OpenLayers coordinate to Cesium.\n * @param {ol.Coordinate} coordinate Ol3 coordinate.\n * @return {!Cesium.Cartesian3} Cesium cartesian coordinate\n * @api\n */\nexports.ol4326CoordinateToCesiumCartesian = function(coordinate) {\n  const coo = coordinate;\n  return coo.length > 2 ?\n    Cesium.Cartesian3.fromDegrees(coo[0], coo[1], coo[2]) :\n    Cesium.Cartesian3.fromDegrees(coo[0], coo[1]);\n};\n\n\n/**\n * Convert an array of 2D or 3D OpenLayers coordinates to Cesium.\n * @param {Array.<!ol.Coordinate>} coordinates Ol3 coordinates.\n * @return {!Array.<Cesium.Cartesian3>} Cesium cartesian coordinates\n * @api\n */\nexports.ol4326CoordinateArrayToCsCartesians = function(coordinates) {\n  googAsserts.assert(coordinates !== null);\n  const toCartesian = exports.ol4326CoordinateToCesiumCartesian;\n  const cartesians = [];\n  for (let i = 0; i < coordinates.length; ++i) {\n    cartesians.push(toCartesian(coordinates[i]));\n  }\n  return cartesians;\n};\n\n\n/**\n * Reproject an OpenLayers geometry to EPSG:4326 if needed.\n * The geometry will be cloned only when original projection is not EPSG:4326\n * and the properties will be shallow copied.\n * @param {!T} geometry\n * @param {!ol.ProjectionLike} projection\n * @return {!T}\n * @template T\n * @api\n */\nexports.olGeometryCloneTo4326 = function(geometry, projection) {\n  googAsserts.assert(projection);\n\n  const proj4326 = olProj.get('EPSG:4326');\n  const proj = olProj.get(projection);\n  if (proj !== proj4326) {\n    const properties = geometry.getProperties();\n    geometry = geometry.clone();\n    geometry.transform(proj, proj4326);\n    geometry.setProperties(properties);\n  }\n  return geometry;\n};\n\n\n/**\n * Convert an OpenLayers color to Cesium.\n * @param {ol.Color|CanvasGradient|CanvasPattern|string} olColor\n * @return {!Cesium.Color}\n * @api\n */\nexports.convertColorToCesium = function(olColor) {\n  olColor = olColor || 'black';\n  if (Array.isArray(olColor)) {\n    return new Cesium.Color(\n        Cesium.Color.byteToFloat(olColor[0]),\n        Cesium.Color.byteToFloat(olColor[1]),\n        Cesium.Color.byteToFloat(olColor[2]),\n        olColor[3]\n    );\n  } else if (typeof olColor == 'string') {\n    return Cesium.Color.fromCssColorString(olColor);\n  }\n  googAsserts.fail('impossible');\n};\n\n\n/**\n * Convert an OpenLayers url to Cesium.\n * @param {string} url\n * @return {!olcsx.core.CesiumUrlDefinition}\n * @api\n */\nexports.convertUrlToCesium = function(url) {\n  let subdomains = '';\n  const re = /\\{(\\d|[a-z])-(\\d|[a-z])\\}/;\n  const match = re.exec(url);\n  if (match) {\n    url = url.replace(re, '{s}');\n    const startCharCode = match[1].charCodeAt(0);\n    const stopCharCode = match[2].charCodeAt(0);\n    let charCode;\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\n      subdomains += String.fromCharCode(charCode);\n    }\n  }\n  return {\n    url,\n    subdomains\n  };\n};\n\n\n/**\n * Animate the return to a top-down view from the zenith.\n * The camera is rotated to orient to the North.\n * @param {!ol.Map} map\n * @param {!Cesium.Scene} scene\n * @return {Promise<undefined>}\n * @api\n */\nexports.resetToNorthZenith = function(map, scene) {\n  return new Promise((resolve, reject) => {\n    const camera = scene.camera;\n    const pivot = exports.pickBottomPoint(scene);\n    if (!pivot) {\n      reject('Could not get bottom pivot');\n      return;\n    }\n\n    const currentHeading = map.getView().getRotation();\n    if (currentHeading === undefined) {\n      reject('The view is not initialized');\n      return;\n    }\n    const angle = exports.computeAngleToZenith(scene, pivot);\n\n    // Point to North\n    exports.setHeadingUsingBottomCenter(scene, currentHeading, pivot);\n\n    // Go to zenith\n    const transform = Cesium.Matrix4.fromTranslation(pivot);\n    const axis = camera.right;\n    const options = {\n      callback: () => {\n        const view = map.getView();\n        exports.normalizeView(view);\n        resolve();\n      }\n    };\n    exports.rotateAroundAxis(camera, -angle, axis, transform, options);\n  });\n};\n\n\n/**\n * @param {!Cesium.Scene} scene\n * @param {number} angle in radian\n * @return {Promise<undefined>}\n * @api\n */\nexports.rotateAroundBottomCenter = function(scene, angle) {\n  return new Promise((resolve, reject) => {\n    const camera = scene.camera;\n    const pivot = exports.pickBottomPoint(scene);\n    if (!pivot) {\n      reject('could not get bottom pivot');\n      return;\n    }\n\n    const options = {callback: resolve};\n    const transform = Cesium.Matrix4.fromTranslation(pivot);\n    const axis = camera.right;\n    const rotateAroundAxis = exports.rotateAroundAxis;\n    rotateAroundAxis(camera, -angle, axis, transform, options);\n  });\n};\n\n\n/**\n * Set the OpenLayers view to a specific rotation and\n * the nearest resolution.\n * @param {ol.View} view\n * @param {number=} angle\n * @api\n */\nexports.normalizeView = function(view, angle = 0) {\n  const resolution = view.getResolution();\n  view.setRotation(angle);\n  view.setResolution(view.constrainResolution(resolution));\n};\nexport default exports;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/olcs/core.js\n// module id = null\n// module chunks = "],"sourceRoot":""}