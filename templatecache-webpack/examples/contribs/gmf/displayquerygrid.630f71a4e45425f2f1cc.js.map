{"version":3,"sources":["webpack:///./contribs/gmf/examples/partials/queryresult.html","webpack:///./contribs/gmf/examples/displayquerygrid.js","webpack:///./contribs/gmf/src/query/gridComponent.js","webpack:///./node_modules/openlayers/src/ol/source/XYZ.js","webpack:///./node_modules/openlayers/src/ol/source/OSM.js"],"names":["module","exports","__webpack_require__","angular","_Manager2","default","name","_component2","_component4","_gridComponent2","_Themes2","_module2","_module4","_btnComponent2","_bboxQueryComponent2","_mapQueryComponent2","constant","limit","queryCountFirst","queryresultComponent","controller","controllerAs","template","component","QueryresultController","ngeoQueryResult","this","result","MainController","gmfThemes","gmfDataSourcesManager","ngeoFeatureOverlayMgr","_this","loadThemes","fill","_Fill2","color","stroke","_Stroke2","width","featureStyle","_Style2","image","_Circle2","radius","map","_Map2","layers","_Tile2","source","_OSM2","view","_View2","projection","resolutions","center","zoom","setDatasourceMap","themes","undefined","treeSource","queryActive","queryGridActive","getThemesObject","then","init","e","Error","code","olExtent","_Csv2","_service2","_Config2","_FeatureOverlayMgr2","_MapQuerent2","gmfDisplayquerygridTemplateUrl","$element","$attrs","value","templateUrl","_index2","baseModuleTemplateUrl","component_","bindings","active","featuresStyleFn","selectedFeatureStyleFn","getMapFn","removeEmptyColumnsFn","maxResultsFn","maxRecenterZoomFn","mergeTabsFn","Controller_","$injector","$scope","ngeoMapQuerent","$timeout","ngeoCsvDownload","queryOptions","has","get","$scope_","$timeout_","ngeoMapQuerent_","ngeoCsvDownload_","$element_","maxResults","pending","gridSources","loadedGridSources","selectedTab","removeEmptyColumns_","maxRecenterZoom","mergeTabs_","featuresForSources_","features_","_Collection2","ngeoFeatureOverlayMgr_","highlightFeatures_","filename_","map_","$watchCollection","newQueryResult","oldQueryResult","updateData_","unregisterSelectWatcher_","prototype","$onInit","featuresOverlay","getFeatureOverlay","setFeatures","featuresStyle","_asserts2","assertInstanceof","setStyle","highlightFeaturesOverlay","highlightFeatureStyle","zIndex","mapFn","getGridSources","_this2","sourceLabel","_this3","total","hasOneWithTooManyResults_","oldActive","clear","sources","Object","keys","length","getMergedSources_","forEach","tooManyResults","makeGrid_","id","escapeValue_","features","collectData_","firstSourceId","selectTab","some","Number","isInteger","toEscape","match","replace","isSelected","gridSource","label","_this4","allSources","mergedSources","mergedSourceId","getMergedSource_","push","mergeSourceId","currentMergeSourceId","mergeSource","queried","totalFeatureCount","feature","allProperties","featureGeometriesNames","featuresForSource","properties","featureGeometryName","getProperties","getGeometryName","indexOf","getRowUid","cleanProperties_","removeEmptyColumnsFn_","keysToKeep","i","key","keyToRemove","data","gridConfig","getGridConfiguration_","configuration","assert","clone","assign","ol_uid","columnDefs","column","_this5","selectedRows","newSelected","oldSelectedRows","onSelectionChanged_","updateFeatures_","reflowGrid_","sourceId","activePane","find","removeClass","addClass","rowId","getActiveGridSource","isOneSelected","getSelectedCount","getSelectedRowCount","selectAll","unselectAll","invertSelection","zoomToSelection","extent","createEmpty","extend","getGeometry","getExtent","size","getSize","maxZoom","getView","fit","downloadCsv","getSelectedRows","startDownload","XYZ","opt_options","options","tileGrid","tilegrid","minZoom","tileSize","TileImage","call","attributions","cacheSize","crossOrigin","opaque","reprojectionErrorThreshold","tileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","ol","source_XYZ","OSM","ATTRIBUTION","__webpack_exports__"],"mappings":"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","file":"displayquerygrid.630f71a4e45425f2f1cc.js","sourcesContent":["module.exports = \"<h3>Total: {{ qrCtrl.result.total }}</h3> <ul class=\\\"nav nav-tabs\\\" role=tablist> <li ng-repeat=\\\"source in qrCtrl.result.sources\\\" role=presentation ng-if=source.features.length> <a href=\\\"#{{ ::source.id }}\\\" aria-controls=\\\"{{ ::source.id }}\\\" role=tab data-toggle=tab> <span>{{ ::source.label }}</span> <span>({{ ::source.features.length }})</span> </a> </li> </ul> <div class=tab-content> <div ng-repeat=\\\"source in qrCtrl.result.sources\\\" role=tabpanel class=tab-pane ng-if=source.features.length id=\\\"{{ ::source.id }}\\\"> <div ng-repeat=\\\"feature in ::source.features\\\"> <h3>{{ ::feature.get('display_name') }}</h3> <div ng-repeat=\\\"(key, value) in ::feature.getProperties()\\\" ng-init=\\\"value = value !== undefined ? value : ''\\\"> <span ng-if=\\\"::(key !== feature.getGeometryName() && key !== 'ngeo_feature_type_')\\\"> <span ng-bind=::key></span>: <span ng-bind=::value></span> </span> </div> </div> </div> </div> \";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./contribs/gmf/examples/partials/queryresult.html\n// module id = 199\n// module chunks = 1 2","/**\n * @module gmfapp.displayquerygrid\n */\nlet exports = {};\n\n// webpack: import './displayquerygrid.css';\n// webpack: import './common_dependencies.js';\nimport gmfDatasourceManager from 'gmf/datasource/Manager.js';\n\nimport gmfLayertreeComponent from 'gmf/layertree/component.js';\n\n/** @suppress {extraRequire} */\nimport gmfMapComponent from 'gmf/map/component.js';\n\n/** @suppress {extraRequire} */\nimport gmfQueryGridComponent from 'gmf/query/gridComponent.js';\n\nimport gmfThemeThemes from 'gmf/theme/Themes.js';\nimport ngeoGridModule from 'ngeo/grid/module.js';\nimport ngeoMapModule from 'ngeo/map/module.js';\nimport ngeoMiscBtnComponent from 'ngeo/misc/btnComponent.js';\nimport EPSG21781 from 'ngeo/proj/EPSG21781.js';\nimport ngeoQueryBboxQueryComponent from 'ngeo/query/bboxQueryComponent.js';\nimport ngeoQueryMapQueryComponent from 'ngeo/query/mapQueryComponent.js';\nimport olMap from 'ol/Map.js';\nimport olView from 'ol/View.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport olSourceOSM from 'ol/source/OSM.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('gmfapp', [\n  gmfDatasourceManager.module.name,\n  gmfLayertreeComponent.name,\n  gmfMapComponent.name,\n  gmfQueryGridComponent.name,\n  gmfThemeThemes.module.name,\n  ngeoGridModule.name,\n  ngeoMapModule.name, // for ngeo.map.FeatureOverlay, perhaps remove me\n  ngeoMiscBtnComponent.name,\n  ngeoQueryBboxQueryComponent.name,\n  ngeoQueryMapQueryComponent.name,\n]);\n\n\nexports.module.constant('ngeoQueryOptions', {\n  'limit': 20,\n  'queryCountFirst': true\n});\n\n\nexports.module.constant(\n  'gmfTreeUrl',\n  'https://geomapfish-demo.camptocamp.net/2.2/wsgi/themes?' +\n        'version=2&background=background');\n\nexports.constant('defaultTheme', 'Demo');\nexports.constant('angularLocaleScript', '../build/angular-locale_{{locale}}.js');\n\n\n/**\n * Demo, NOT USED.\n * A sample component to display the result.\n *\n * @type {!angular.Component}\n */\nexports.queryresultComponent = {\n  controller: 'gmfappQueryresultController',\n  controllerAs: 'qrCtrl',\n  template: require('./partials/queryresult.html')\n};\n\nexports.module.component('gmfappQueryresult', exports.queryresultComponent);\n\n\n/**\n * Demo, NOT USED.\n * @param {ngeox.QueryResult} ngeoQueryResult Query service.\n * @constructor\n * @ngInject\n */\nexports.QueryresultController = function(ngeoQueryResult) {\n\n  /**\n   * @type {ngeox.QueryResult}\n   * @export\n   */\n  this.result = ngeoQueryResult;\n\n};\n\n\nexports.module.controller('gmfappQueryresultController', exports.QueryresultController);\n\n\n/**\n * @constructor\n * @param {gmf.theme.Themes} gmfThemes The gmf themes service.\n * @param {gmf.datasource.Manager} gmfDataSourcesManager The gmf\n *     data sources manager service.\n * @param {ngeo.map.FeatureOverlayMgr} ngeoFeatureOverlayMgr The ngeo feature\n *   overlay manager service.\n * @ngInject\n */\nexports.MainController = function(gmfThemes, gmfDataSourcesManager,\n  ngeoFeatureOverlayMgr) {\n\n  gmfThemes.loadThemes();\n\n  const fill = new olStyleFill({color: [255, 170, 0, 0.6]});\n  const stroke = new olStyleStroke({color: [255, 170, 0, 1], width: 2});\n\n  /**\n   * FeatureStyle used by the displayquerygrid directive\n   * @type {ol.style.Style}\n   * @export\n   */\n  this.featureStyle = new olStyleStyle({\n    fill: fill,\n    image: new olStyleCircle({\n      fill: fill,\n      radius: 5,\n      stroke: stroke\n    }),\n    stroke: stroke\n  });\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map = new olMap({\n    layers: [\n      new olLayerTile({\n        source: new olSourceOSM()\n      })\n    ],\n    view: new olView({\n      projection: EPSG21781,\n      resolutions: [200, 100, 50, 20, 10, 5, 2.5, 2, 1, 0.5],\n      center: [537635, 152640],\n      zoom: 3\n    })\n  });\n\n  // Init the datasources with our map.\n  gmfDataSourcesManager.setDatasourceMap(this.map);\n\n  /**\n   * @type {Array.<Object>|undefined}\n   * export\n   */\n  this.themes = undefined;\n\n  /**\n   * @type {Object|undefined}\n   * @export\n   */\n  this.treeSource = undefined;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.queryActive = true;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.queryGridActive = true;\n\n  gmfThemes.getThemesObject().then((themes) => {\n    if (themes) {\n      this.themes = themes;\n      this.treeSource = themes[3];\n    }\n  });\n\n  ngeoFeatureOverlayMgr.init(this.map);\n};\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/examples/displayquerygrid.js","/**\n * @module gmf.query.gridComponent\n */\nimport gmfBase from 'gmf/index.js';\nimport googAsserts from 'goog/asserts.js';\n\n/** @suppress {extraRequire} */\nimport ngeoDownloadCsv from 'ngeo/download/Csv.js';\n\n/** @suppress {extraRequire} */\nimport ngeoDownloadService from 'ngeo/download/service.js';\n\n/** @suppress {extraRequire} */\nimport ngeoGridComponent from 'ngeo/grid/component.js';\n\nimport ngeoGridConfig from 'ngeo/grid/Config.js';\nimport ngeoMapFeatureOverlayMgr from 'ngeo/map/FeatureOverlayMgr.js';\n\n/** @suppress {extraRequire} - required for `ngeoQueryResult` */\nimport ngeoQueryMapQuerent from 'ngeo/query/MapQuerent.js';\n\nimport olCollection from 'ol/Collection.js';\nimport * as olExtent from 'ol/extent.js';\nimport olMap from 'ol/Map.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('gmfQueryGridComponent', [\n  ngeoDownloadCsv.module.name,\n  ngeoDownloadService.name,\n  ngeoGridComponent.name,\n  ngeoGridConfig.module.name,\n  ngeoMapFeatureOverlayMgr.module.name,\n  ngeoQueryMapQuerent.module.name,\n]);\n\n\nexports.value('gmfDisplayquerygridTemplateUrl',\n  /**\n   * @param {!angular.JQLite} $element Element.\n   * @param {!angular.Attributes} $attrs Attributes.\n   * @return {string} Template URL.\n   */\n  ($element, $attrs) => {\n    const templateUrl = $attrs['gmfDisplayquerygridTemplateurl'];\n    return templateUrl !== undefined ? templateUrl :\n      `${gmfBase.baseModuleTemplateUrl}/query/gridComponent.html`; // nowebpack\n    // webpack: 'gmf/query/gridComponent';\n  }\n);\n\n// webpack: exports.run(/* @ngInject */ ($templateCache) => {\n// webpack:   $templateCache.put('gmf/query/gridComponent', require('./gridComponent.html'));\n// webpack: });\n\n\n/**\n * @param {!angular.JQLite} $element Element.\n * @param {!angular.Attributes} $attrs Attributes.\n * @param {!function(!angular.JQLite, !angular.Attributes): string} gmfDisplayquerygridTemplateUrl Template function.\n * @return {string} Template URL.\n * @ngInject\n */\nfunction gmfDisplayquerygridTemplateUrl($element, $attrs, gmfDisplayquerygridTemplateUrl) {\n  return gmfDisplayquerygridTemplateUrl($element, $attrs);\n}\n\n\n/**\n * Provides a component to display results of the {@link ngeo.queryResult} in a\n * grid and shows related features on the map using\n * the {@link ngeo.map.FeatureOverlayMgr}.\n *\n * You can override the default component's template by setting the\n * value `gmfDisplayquerygridTemplateUrl`.\n *\n * Features displayed on the map use a default style but you can override these\n * styles by passing ol.style.Style objects as attributes of this component.\n *\n * Note: the following ng-class need to be present in the interface <body> element to display the footer\n * when the grid is active (initially there should be the code for the profile tool):\n *      <body ng-class=\"{'gmf-profile-chart-active': !!profileChartActive, 'gmf-query-grid-active': !!queryGridActive}\">\n *\n * Example:\n *\n *      <gmf-displayquerygrid\n *        gmf-displayquerygrid-map=\"ctrl.map\"\n *        gmf-displayquerygrid-featuresstyle=\"ctrl.styleForAllFeatures\"\n *        gmf-displayquerygrid-selectedfeaturestyle=\"ctrl.styleForTheCurrentFeature\">\n *      </gmf-displayquerygrid>\n *\n * @htmlAttribute {boolean} gmf-displayquerygrid-active The active state of the component.\n * @htmlAttribute {ol.style.Style} gmf-displayquerygrid-featuresstyle A style\n *     object for all features from the result of the query.\n * @htmlAttribute {ol.style.Style} gmf-displayquerygrid-selectedfeaturestyle A style\n *     object for the currently selected features.\n * @htmlAttribute {ol.Map} gmf-displayquerygrid-map The map.\n * @htmlAttribute {boolean?} gmf-displayquerygrid-removeemptycolumns Optional. Should\n *     empty columns be hidden? Default: `false`.\n * @htmlAttribute {number?} gmf-displayquerygrid-maxrecenterzoom Optional. Maximum\n *     zoom-level to use when zooming to selected features.\n * @htmlAttribute {gmfx.GridMergeTabs?} gmf-displayquerygrid-gridmergetabs Optional.\n *     Configuration to merge grids with the same attributes into a single grid.\n *\n * @ngdoc component\n * @ngname gmfDisplayquerygrid\n */\nexports.component_ = {\n  controller: 'GmfDisplayquerygridController as ctrl',\n  bindings: {\n    'active': '=?gmfDisplayquerygridActive',\n    'featuresStyleFn': '&gmfDisplayquerygridFeaturesstyle',\n    'selectedFeatureStyleFn': '&gmfDisplayquerygridSelectedfeaturestyle',\n    'getMapFn': '&gmfDisplayquerygridMap',\n    'removeEmptyColumnsFn': '&?gmfDisplayquerygridRemoveemptycolumns',\n    'maxResultsFn': '&?gmfDisplayquerygridMaxresults',\n    'maxRecenterZoomFn': '&?gmfDisplayquerygridMaxrecenterzoom',\n    'mergeTabsFn': '&?gmfDisplayquerygridMergetabs'\n  },\n  templateUrl: gmfDisplayquerygridTemplateUrl\n};\n\n\nexports.component('gmfDisplayquerygrid', exports.component_);\n\n\n/**\n * Controller for the query grid.\n *\n * @param {!angular.$injector} $injector Main injector.\n * @param {!angular.Scope} $scope Angular scope.\n * @param {!ngeox.QueryResult} ngeoQueryResult ngeo query result.\n * @param {!ngeo.query.MapQuerent} ngeoMapQuerent ngeo map querent service.\n * @param {!ngeo.map.FeatureOverlayMgr} ngeoFeatureOverlayMgr The ngeo feature\n *     overlay manager service.\n * @param {!angular.$timeout} $timeout Angular timeout service.\n * @param {!ngeo.download.Csv} ngeoCsvDownload CSV download service.\n * @param {!angular.JQLite} $element Element.\n * @constructor\n * @private\n * @ngInject\n * @ngdoc controller\n * @ngname GmfDisplayquerygridController\n */\nexports.Controller_ = function($injector, $scope, ngeoQueryResult, ngeoMapQuerent,\n  ngeoFeatureOverlayMgr, $timeout, ngeoCsvDownload, $element) {\n\n  const queryOptions = /** @type {ngeox.QueryOptions} */ (\n    $injector.has('ngeoQueryOptions') ?\n      $injector.get('ngeoQueryOptions') : {});\n\n  /**\n   * @type {!angular.Scope}\n   * @private\n   */\n  this.$scope_ = $scope;\n\n  /**\n   * @type {!angular.$timeout}\n   * @private\n   */\n  this.$timeout_ = $timeout;\n\n  /**\n   * @type {!ngeox.QueryResult}\n   * @export\n   */\n  this.ngeoQueryResult = ngeoQueryResult;\n\n  /**\n   * @type {!ngeo.query.MapQuerent}\n   * @private\n   */\n  this.ngeoMapQuerent_ = ngeoMapQuerent;\n\n  /**\n   * @type {!ngeo.download.Csv}\n   * @private\n   */\n  this.ngeoCsvDownload_ = ngeoCsvDownload;\n\n  /**\n   * @type {!angular.JQLite}\n   * @private\n   */\n  this.$element_ = $element;\n\n  /**\n   * @type {number}\n   * @export\n   */\n  this.maxResults = queryOptions.limit !== undefined ? queryOptions.limit : 50;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.active = false;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.pending = false;\n\n  /**\n   * @type {!Object.<string, gmfx.GridSource>}\n   * @export\n   */\n  this.gridSources = {};\n\n  /**\n   * IDs of the grid sources in the order they were loaded.\n   * @type {!Array.<string>}\n   * @export\n   */\n  this.loadedGridSources = [];\n\n  /**\n   * The id of the currently shown query source.\n   * @type {string|number|null}\n   * @export\n   */\n  this.selectedTab = null;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.removeEmptyColumns_ = false;\n\n  /**\n   * @type {number|undefined}\n   * @export\n   */\n  this.maxRecenterZoom;\n\n  /**\n   * @type {!gmfx.GridMergeTabs}\n   * @private\n   */\n  this.mergeTabs_ = {};\n\n  /**\n   * A mapping between row uid and the corresponding feature for each\n   * source.\n   * @type {!Object.<string, Object.<string, ol.Feature>>}\n   * @private\n   */\n  this.featuresForSources_ = {};\n\n  // Styles for displayed features (features) and selected features\n  // (highlightFeatures_) (user can set both styles).\n  /**\n   * @type {!ol.Collection}\n   * @private\n   */\n  this.features_ = new olCollection();\n\n  /**\n   * @type {!ngeo.map.FeatureOverlayMgr}\n   * @private\n   */\n  this.ngeoFeatureOverlayMgr_ = ngeoFeatureOverlayMgr;\n\n  /**\n   * @type {!ol.Collection}\n   * @private\n   */\n  this.highlightFeatures_ = new olCollection();\n\n  /**\n   * Filename\n   * @type {string}\n   * @private\n   */\n  this.filename_ = $injector.has('gmfCsvFilename') ?\n    $injector.get('gmfCsvFilename') : 'query-results.csv';\n\n  /**\n   * @type {ol.Map}\n   * @private\n   */\n  this.map_ = null;\n\n  // Watch the ngeo query result service.\n  this.$scope_.$watchCollection(\n    () => ngeoQueryResult,\n    (newQueryResult, oldQueryResult) => {\n      if (newQueryResult !== oldQueryResult) {\n        this.updateData_();\n      }\n    });\n\n  /**\n   * An unregister function returned from `$scope.$watchCollection` for\n   * \"on-select\" changes (when rows are selected/unselected).\n   * @type {?function()}\n   * @private\n   */\n  this.unregisterSelectWatcher_ = null;\n};\n\n/**\n * Init the controller\n */\nexports.Controller_.prototype.$onInit = function() {\n  this.removeEmptyColumns_ = this['removeEmptyColumnsFn'] ? this['removeEmptyColumnsFn']() === true : false;\n  this.maxRecenterZoom = this['maxRecenterZoomFn'] ? this['maxRecenterZoomFn']() : undefined;\n  this.mergeTabs_ = this['mergeTabsFn'] ? this['mergeTabsFn']() : {};\n\n  const featuresOverlay = this.ngeoFeatureOverlayMgr_.getFeatureOverlay();\n  featuresOverlay.setFeatures(this.features_);\n  const featuresStyle = this['featuresStyleFn']();\n  if (featuresStyle !== undefined) {\n    googAsserts.assertInstanceof(featuresStyle, olStyleStyle);\n    featuresOverlay.setStyle(featuresStyle);\n  }\n\n  const highlightFeaturesOverlay = this.ngeoFeatureOverlayMgr_.getFeatureOverlay();\n  highlightFeaturesOverlay.setFeatures(this.highlightFeatures_);\n  let highlightFeatureStyle = this['selectedFeatureStyleFn']();\n  if (highlightFeatureStyle !== undefined) {\n    googAsserts.assertInstanceof(highlightFeatureStyle, olStyleStyle);\n  } else {\n    const fill = new olStyleFill({color: [255, 0, 0, 0.6]});\n    const stroke = new olStyleStroke({color: [255, 0, 0, 1], width: 2});\n    highlightFeatureStyle = new olStyleStyle({\n      fill: fill,\n      image: new olStyleCircle({\n        fill: fill,\n        radius: 5,\n        stroke: stroke\n      }),\n      stroke: stroke,\n      zIndex: 10\n    });\n  }\n  highlightFeaturesOverlay.setStyle(highlightFeatureStyle);\n\n  const mapFn = this['getMapFn'];\n  if (mapFn) {\n    const map = mapFn();\n    googAsserts.assertInstanceof(map, olMap);\n    this.map_ = map;\n  }\n};\n\n/**\n * Returns a list of grid sources in the order they were loaded.\n * @export\n * @return {Array.<gmfx.GridSource>} Grid sources.\n */\nexports.Controller_.prototype.getGridSources = function() {\n  return this.loadedGridSources.map(sourceLabel => this.gridSources[sourceLabel]);\n};\n\n\n/**\n * @private\n */\nexports.Controller_.prototype.updateData_ = function() {\n  // close if there are no results\n  if (this.ngeoQueryResult.total === 0 && !this.hasOneWithTooManyResults_()) {\n    const oldActive = this.active;\n    this.clear();\n    if (oldActive) {\n      // don't close if there are pending queries\n      this.active = this.ngeoQueryResult.pending;\n      this.pending = this.ngeoQueryResult.pending;\n    }\n    return;\n  }\n\n  this.active = true;\n  this.pending = false;\n  let sources = this.ngeoQueryResult.sources;\n  // merge sources if requested\n  if (Object.keys(this.mergeTabs_).length > 0) {\n    sources = this.getMergedSources_(sources);\n  }\n\n  // create grids (only for source with features or with too many results)\n  sources.forEach((source) => {\n    if (source.tooManyResults) {\n      this.makeGrid_(null, source);\n    } else {\n      source.id = this.escapeValue_(source.id);\n      const features = source.features;\n      if (features.length > 0) {\n        this.collectData_(source);\n      }\n    }\n  });\n\n  if (this.loadedGridSources.length === 0) {\n    // if no grids were created, do not show\n    this.active = false;\n    return;\n  }\n\n  // keep the first existing navigation tab open\n  if (this.selectedTab === null || !((`${this.selectedTab}`) in this.gridSources)) {\n    // selecting the tab is done in a timeout, because otherwise in rare cases\n    // `ng-class` might set the `active` class on multiple tabs.\n    this.$timeout_(() => {\n      const firstSourceId = this.loadedGridSources[0];\n      this.selectTab(this.gridSources[firstSourceId]);\n    }, 0);\n  }\n};\n\n\n/**\n * @private\n * @return {boolean} If one of the source has too many results.\n */\nexports.Controller_.prototype.hasOneWithTooManyResults_ = function() {\n  return this.ngeoQueryResult.sources.some(source => source.tooManyResults);\n};\n\n/**\n * Returns an escaped value.\n * @param {string|number} value A value to escape.\n * @returns {string|number} value An escaped value.\n * @private\n */\nexports.Controller_.prototype.escapeValue_ = function(value) {\n  // Work-around for Number.isInteger() when not always getting a number ...\n  if (Number.isInteger(/** @type {number} */ (value))) {\n    return value;\n  } else {\n    const toEscape = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\ |]/g;\n    if (value.match(toEscape) !== null) {\n      return value.replace(toEscape, '_');\n    } else {\n      return value;\n    }\n  }\n};\n\n\n/**\n * Returns if the given grid source is selected?\n * @export\n * @param {gmfx.GridSource} gridSource Grid source.\n * @return {boolean} Is selected?\n */\nexports.Controller_.prototype.isSelected = function(gridSource) {\n  return this.selectedTab === gridSource.source.label;\n};\n\n\n/**\n * Try to merge the mergable sources.\n * @param {Array.<ngeox.QueryResultSource>} sources Sources.\n * @return {Array.<ngeox.QueryResultSource>} The merged sources.\n * @private\n */\nexports.Controller_.prototype.getMergedSources_ = function(sources) {\n  const allSources = [];\n  /** @type {Object.<string, ngeox.QueryResultSource>} */\n  const mergedSources = {};\n\n  sources.forEach((source) => {\n    // check if this source can be merged\n    const mergedSource = this.getMergedSource_(source, mergedSources);\n\n    if (mergedSource === null) {\n      // this source should not be merged, add as is\n      allSources.push(source);\n    }\n  });\n\n  for (const mergedSourceId in mergedSources) {\n    allSources.push(mergedSources[mergedSourceId]);\n  }\n\n  return allSources;\n};\n\n\n/**\n * Check if the given source should be merged. If so, an artificial source\n * that will contain the features of all mergable sources is returned. If not,\n * `null` is returned.\n * @param {ngeox.QueryResultSource} source Source.\n * @param {Object.<string, ngeox.QueryResultSource>} mergedSources Merged sources.\n * @return {?ngeox.QueryResultSource} A merged source of null if the source should\n *    not be merged.\n * @private\n */\nexports.Controller_.prototype.getMergedSource_ = function(source, mergedSources) {\n  let mergeSourceId = null;\n\n  for (const currentMergeSourceId in this.mergeTabs_) {\n    const sourceLabels = this.mergeTabs_[currentMergeSourceId];\n    const containsSource = sourceLabels.some(sourceLabel => sourceLabel == source.label);\n    if (containsSource) {\n      mergeSourceId = currentMergeSourceId;\n      break;\n    }\n  }\n\n  if (mergeSourceId === null) {\n    // this source should not be merged\n    return null;\n  }\n\n  /** @type {ngeox.QueryResultSource} */\n  let mergeSource;\n  if (mergeSourceId in mergedSources) {\n    mergeSource = mergedSources[mergeSourceId];\n  } else {\n    mergeSource = {\n      features: [],\n      id: mergeSourceId,\n      label: mergeSourceId,\n      limit: this.maxResults,\n      pending: false,\n      queried: true,\n      tooManyResults: false,\n      totalFeatureCount: undefined\n    };\n    mergedSources[mergeSourceId] = mergeSource;\n  }\n\n  // add features of source to merge source\n  source.features.forEach((feature) => {\n    mergeSource.features.push(feature);\n  });\n\n  // if one of the source has too many results, the resulting merged source will\n  // also be marked with `tooManyResults` and will not contain any features.\n  mergeSource.tooManyResults = mergeSource.tooManyResults || source.tooManyResults;\n  if (mergeSource.tooManyResults) {\n    mergeSource.totalFeatureCount = (mergeSource.totalFeatureCount !== undefined) ?\n      mergeSource.totalFeatureCount + mergeSource.features.length : mergeSource.features.length;\n    mergeSource.features = [];\n  }\n  if (source.totalFeatureCount !== undefined) {\n    mergeSource.totalFeatureCount = (mergeSource.totalFeatureCount !== undefined) ?\n      mergeSource.totalFeatureCount + source.totalFeatureCount : source.totalFeatureCount;\n  }\n\n  return mergeSource;\n};\n\n\n/**\n * Collect all features in the queryResult object.\n * @param {ngeox.QueryResultSource} source Result source.\n * @private\n */\nexports.Controller_.prototype.collectData_ = function(source) {\n  const features = source.features;\n  const allProperties = [];\n  const featureGeometriesNames = [];\n  const featuresForSource = {};\n  let properties, featureGeometryName;\n  features.forEach((feature) => {\n    properties = feature.getProperties();\n    if (properties !== undefined) {\n      // Keeps distinct geometry names to remove theme later.\n      featureGeometryName = feature.getGeometryName();\n      if (featureGeometriesNames.indexOf(featureGeometryName) === -1) {\n        featureGeometriesNames.push(featureGeometryName);\n      }\n\n      allProperties.push(properties);\n      featuresForSource[ngeoGridConfig.getRowUid(properties)] = feature;\n    }\n  });\n\n  this.cleanProperties_(allProperties, featureGeometriesNames);\n  if (allProperties.length > 0) {\n    const gridCreated = this.makeGrid_(allProperties, source);\n    if (gridCreated) {\n      this.featuresForSources_[`${source.label}`] = featuresForSource;\n    }\n  }\n};\n\n\n/**\n * Remove all unwanted columns.\n * @param {Array.<Object>} allProperties A row.\n * @param {Array.<string>} featureGeometriesNames Geometry names.\n * @private\n */\nexports.Controller_.prototype.cleanProperties_ = function(\n  allProperties, featureGeometriesNames) {\n  allProperties.forEach((properties) => {\n    featureGeometriesNames.forEach((featureGeometryName) => {\n      delete properties[featureGeometryName];\n    });\n    delete properties['boundedBy'];\n    delete properties['ngeo_feature_type_'];\n  });\n\n  if (this.removeEmptyColumns_ === true) {\n    this.removeEmptyColumnsFn_(allProperties);\n  }\n};\n\n\n/**\n * Remove columns that will be completely empty between each properties.\n * @param {Array.<Object>} allProperties A row.\n * @private\n */\nexports.Controller_.prototype.removeEmptyColumnsFn_ = function(\n  allProperties) {\n  // Keep all keys that correspond to at least one value in a properties object.\n  const keysToKeep = [];\n  let i, key;\n  for (key in allProperties[0]) {\n    for (i = 0; i < allProperties.length; i++) {\n      if (allProperties[i][key] !== undefined) {\n        keysToKeep.push(key);\n        break;\n      }\n    }\n  }\n  // Get all keys that previously always refers always to an empty value.\n  let keyToRemove;\n  allProperties.forEach((properties) => {\n    keyToRemove = [];\n    for (key in properties) {\n      if (keysToKeep.indexOf(key) === -1) {\n        keyToRemove.push(key);\n      }\n    }\n    // Remove these keys.\n    keyToRemove.forEach((key) => {\n      delete properties[key];\n    });\n  });\n};\n\n\n/**\n * @param {?Array.<Object>} data Grid rows.\n * @param {ngeox.QueryResultSource} source Query source.\n * @return {boolean} Returns true if a grid was created.\n * @private\n */\nexports.Controller_.prototype.makeGrid_ = function(data, source) {\n  const sourceLabel = `${source.label}`;\n  let gridConfig = null;\n  if (data !== null) {\n    gridConfig = this.getGridConfiguration_(data);\n    if (gridConfig === null) {\n      return false;\n    }\n  }\n  if (this.loadedGridSources.indexOf(sourceLabel) == -1) {\n    this.loadedGridSources.push(sourceLabel);\n  }\n  this.gridSources[sourceLabel] = {\n    configuration: gridConfig,\n    source: source\n  };\n  return true;\n};\n\n\n/**\n * @param {Array.<!Object>} data Grid rows.\n * @return {?ngeo.grid.Config} Grid config.\n * @private\n */\nexports.Controller_.prototype.getGridConfiguration_ = function(\n  data) {\n  googAsserts.assert(data.length > 0);\n  const clone = {};\n  Object.assign(clone, data[0]);\n  delete clone.ol_uid;\n  const columns = Object.keys(clone);\n\n  /** @type {Array.<ngeox.GridColumnDef>} */\n  const columnDefs = [];\n  columns.forEach((column) => {\n    columnDefs.push(/** @type {ngeox.GridColumnDef} */ ({\n      name: column\n    }));\n  });\n\n  if (columnDefs.length > 0) {\n    return new ngeoGridConfig(data, columnDefs);\n  } else {\n    // no columns, do not show grid\n    return null;\n  }\n};\n\n\n/**\n * Remove the current selected feature and source and remove all features\n * from the map.\n * @export\n */\nexports.Controller_.prototype.clear = function() {\n  this.active = false;\n  this.pending = false;\n  this.gridSources = {};\n  this.loadedGridSources = [];\n  this.selectedTab = null;\n  this.tooManyResults = false;\n  this.features_.clear();\n  this.highlightFeatures_.clear();\n  this.ngeoMapQuerent_.clear();\n  this.featuresForSources_ = {};\n  if (this.unregisterSelectWatcher_) {\n    this.unregisterSelectWatcher_();\n  }\n};\n\n\n/**\n * Select the tab for the given grid source.\n * @param {gmfx.GridSource} gridSource Grid source.\n * @export\n */\nexports.Controller_.prototype.selectTab = function(gridSource) {\n  const source = gridSource.source;\n  this.selectedTab = source.label;\n\n  if (this.unregisterSelectWatcher_) {\n    this.unregisterSelectWatcher_();\n    this.unregisterSelectWatcher_ = null;\n  }\n\n  if (gridSource.configuration !== null) {\n    this.unregisterSelectWatcher_ = this.$scope_.$watchCollection(\n      () => gridSource.configuration.selectedRows,\n      (newSelected, oldSelectedRows) => {\n        if (Object.keys(newSelected) !== Object.keys(oldSelectedRows)) {\n          this.onSelectionChanged_();\n        }\n      });\n  }\n  this.updateFeatures_(gridSource);\n\n  this.reflowGrid_(source.id);\n};\n\n\n/**\n * @private\n * @param {string|number} sourceId Id of the source that should be refreshed.\n */\nexports.Controller_.prototype.reflowGrid_ = function(sourceId) {\n  // This is a \"work-around\" to make sure that the grid is rendered correctly.\n  // When a pane is activated by setting `this.selectedTab`, the class `active`\n  // is not yet set on the pane. That's why the class is set manually, and\n  // after the pane is shown (in the next digest loop), the grid table can\n  // be refreshed.\n  const activePane = this.$element_.find(`div.tab-pane#${sourceId}`);\n  activePane.removeClass('active').addClass('active');\n  this.$timeout_(() => {\n    activePane.find('div.ngeo-grid-table-container table')['trigger']('reflow');\n  });\n};\n\n\n/**\n * Called when the row selection has changed.\n * @private\n */\nexports.Controller_.prototype.onSelectionChanged_ = function() {\n  if (this.selectedTab === null) {\n    return;\n  }\n\n  const gridSource = this.gridSources[`${this.selectedTab}`];\n  this.updateFeatures_(gridSource);\n};\n\n\n/**\n * @param {gmfx.GridSource} gridSource Grid source\n * @private\n */\nexports.Controller_.prototype.updateFeatures_ = function(gridSource) {\n  this.features_.clear();\n  this.highlightFeatures_.clear();\n\n  if (gridSource.configuration === null) {\n    return;\n  }\n\n  const sourceLabel = `${gridSource.source.label}`;\n  const featuresForSource = this.featuresForSources_[sourceLabel];\n  const selectedRows = gridSource.configuration.selectedRows;\n\n  for (const rowId in featuresForSource) {\n    const feature = featuresForSource[rowId];\n    if (rowId in selectedRows) {\n      this.highlightFeatures_.push(feature);\n    } else {\n      this.features_.push(feature);\n    }\n  }\n};\n\n\n/**\n * Get the currently shown grid source.\n * @export\n * @return {gmfx.GridSource|null} Grid source.\n */\nexports.Controller_.prototype.getActiveGridSource = function() {\n  if (this.selectedTab === null) {\n    return null;\n  } else {\n    return this.gridSources[`${this.selectedTab}`];\n  }\n};\n\n\n/**\n * Returns if a row of the currently active grid is selected?\n * @export\n * @return {boolean} Is one selected?\n */\nexports.Controller_.prototype.isOneSelected = function() {\n  const source = this.getActiveGridSource();\n  if (source === null || source.configuration === null) {\n    return false;\n  } else {\n    return source.configuration.getSelectedCount() > 0;\n  }\n};\n\n\n/**\n * Returns the number of selected rows of the currently active grid.\n * @export\n * @return {number} The number of selected rows.\n */\nexports.Controller_.prototype.getSelectedRowCount = function() {\n  const source = this.getActiveGridSource();\n  if (source === null || source.configuration === null) {\n    return 0;\n  } else {\n    return source.configuration.getSelectedCount();\n  }\n};\n\n\n/**\n * Select all rows of the currently active grid.\n * @export\n */\nexports.Controller_.prototype.selectAll = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.selectAll();\n  }\n};\n\n\n/**\n * Unselect all rows of the currently active grid.\n * @export\n */\nexports.Controller_.prototype.unselectAll = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.unselectAll();\n  }\n};\n\n\n/**\n * Invert the selection of the currently active grid.\n * @export\n */\nexports.Controller_.prototype.invertSelection = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.invertSelection();\n  }\n};\n\n\n/**\n * Zoom to the selected features.\n * @export\n */\nexports.Controller_.prototype.zoomToSelection = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    const extent = olExtent.createEmpty();\n    this.highlightFeatures_.forEach((feature) => {\n      olExtent.extend(extent, feature.getGeometry().getExtent());\n    });\n    const size = this.map_.getSize();\n    googAsserts.assert(size !== undefined);\n    const maxZoom = this.maxRecenterZoom;\n    this.map_.getView().fit(extent, {size, maxZoom});\n  }\n};\n\n\n/**\n * Start a CSV download for the selected features.\n * @export\n */\nexports.Controller_.prototype.downloadCsv = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    const columnDefs = source.configuration.columnDefs;\n    googAsserts.assert(columnDefs !== undefined);\n    const selectedRows = source.configuration.getSelectedRows();\n\n    this.ngeoCsvDownload_.startDownload(\n      selectedRows, columnDefs, this.filename_);\n  }\n};\n\n\nexports.controller('GmfDisplayquerygridController',\n  exports.Controller_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/query/gridComponent.js","/**\n * @module ol/source/XYZ\n */\nimport {inherits} from '../index.js';\nimport TileImage from '../source/TileImage.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\n\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case,\n * {@link ol.source.TileImage} can be used with a `tileUrlFunction`\n * such as:\n *\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *        coordinate[1] + '/' + coordinate[2] + '.png';\n *    }\n *\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.XYZOptions=} opt_options XYZ options.\n * @api\n */\nconst XYZ = function(opt_options) {\n  const options = opt_options || {};\n  const projection = options.projection !== undefined ?\n    options.projection : 'EPSG:3857';\n\n  const tileGrid = options.tileGrid !== undefined ? options.tileGrid :\n    createXYZ({\n      extent: extentFromProjection(projection),\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize\n    });\n\n  TileImage.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    opaque: options.opaque,\n    projection: projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileGrid: tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n};\n\ninherits(XYZ, TileImage);\nexport default XYZ;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/XYZ.js\n// module id = null\n// module chunks = ","/**\n * @module ol/source/OSM\n */\nimport {inherits} from '../index.js';\nimport XYZ from '../source/XYZ.js';\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n *\n * @constructor\n * @extends {ol.source.XYZ}\n * @param {olx.source.OSMOptions=} opt_options Open Street Map options.\n * @api\n */\nconst OSM = function(opt_options) {\n\n  const options = opt_options || {};\n\n  let attributions;\n  if (options.attributions !== undefined) {\n    attributions = options.attributions;\n  } else {\n    attributions = [OSM.ATTRIBUTION];\n  }\n\n  const crossOrigin = options.crossOrigin !== undefined ?\n    options.crossOrigin : 'anonymous';\n\n  const url = options.url !== undefined ?\n    options.url : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n  XYZ.call(this, {\n    attributions: attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: crossOrigin,\n    opaque: options.opaque !== undefined ? options.opaque : true,\n    maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileLoadFunction: options.tileLoadFunction,\n    url: url,\n    wrapX: options.wrapX\n  });\n\n};\n\ninherits(OSM, XYZ);\n\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nOSM.ATTRIBUTION = '&copy; ' +\n      '<a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> ' +\n      'contributors.';\nexport default OSM;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/OSM.js\n// module id = null\n// module chunks = "],"sourceRoot":""}