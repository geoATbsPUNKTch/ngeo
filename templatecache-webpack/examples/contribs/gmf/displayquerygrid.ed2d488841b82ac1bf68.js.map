{"version":3,"sources":["webpack:///./contribs/gmf/examples/displayquerygrid.js","webpack:///./contribs/gmf/src/query/gridComponent.js","webpack:///./node_modules/openlayers/src/ol/source/XYZ.js","webpack:///./node_modules/openlayers/src/ol/source/OSM.js"],"names":["__webpack_require__","exports","module","angular","_Manager2","default","name","_component2","_component4","_gridComponent2","_Themes2","_module2","_module4","_btnComponent2","_bboxQueryComponent2","_mapQueryComponent2","constant","limit","queryCountFirst","queryresultComponent","controller","controllerAs","template","e","Error","code","component","QueryresultController","ngeoQueryResult","this","result","MainController","gmfThemes","gmfDataSourcesManager","ngeoFeatureOverlayMgr","_this","loadThemes","fill","_Fill2","color","stroke","_Stroke2","width","featureStyle","_Style2","image","_Circle2","radius","map","_Map2","layers","_Tile2","source","_OSM2","view","_View2","projection","resolutions","center","zoom","setDatasourceMap","themes","undefined","treeSource","queryActive","queryGridActive","getThemesObject","then","init","olExtent","_Csv2","_service2","_Config2","_FeatureOverlayMgr2","_MapQuerent2","gmfDisplayquerygridTemplateUrl","$element","$attrs","value","templateUrl","component_","bindings","active","featuresStyleFn","selectedFeatureStyleFn","getMapFn","removeEmptyColumnsFn","maxResultsFn","maxRecenterZoomFn","mergeTabsFn","Controller_","$injector","$scope","ngeoMapQuerent","$timeout","ngeoCsvDownload","queryOptions","has","get","$scope_","$timeout_","ngeoMapQuerent_","ngeoCsvDownload_","$element_","maxResults","pending","gridSources","loadedGridSources","selectedTab","removeEmptyColumns_","maxRecenterZoom","mergeTabs_","featuresForSources_","features_","_Collection2","ngeoFeatureOverlayMgr_","highlightFeatures_","filename_","map_","$watchCollection","newQueryResult","oldQueryResult","updateData_","unregisterSelectWatcher_","prototype","$onInit","featuresOverlay","getFeatureOverlay","setFeatures","featuresStyle","_asserts2","assertInstanceof","setStyle","highlightFeaturesOverlay","highlightFeatureStyle","zIndex","mapFn","getGridSources","_this2","sourceLabel","_this3","total","hasOneWithTooManyResults_","oldActive","clear","sources","Object","keys","length","getMergedSources_","forEach","tooManyResults","makeGrid_","id","escapeValue_","features","collectData_","firstSourceId","selectTab","some","Number","isInteger","toEscape","match","replace","isSelected","gridSource","label","_this4","allSources","mergedSources","mergedSourceId","getMergedSource_","push","mergeSourceId","currentMergeSourceId","mergeSource","queried","totalFeatureCount","feature","allProperties","featureGeometriesNames","featuresForSource","properties","featureGeometryName","getProperties","getGeometryName","indexOf","getRowUid","cleanProperties_","removeEmptyColumnsFn_","keysToKeep","i","key","keyToRemove","data","gridConfig","getGridConfiguration_","configuration","assert","clone","assign","ol_uid","columnDefs","column","_this5","selectedRows","newSelected","oldSelectedRows","onSelectionChanged_","updateFeatures_","reflowGrid_","sourceId","activePane","find","removeClass","addClass","rowId","getActiveGridSource","isOneSelected","getSelectedCount","getSelectedRowCount","selectAll","unselectAll","invertSelection","zoomToSelection","extent","createEmpty","extend","getGeometry","getExtent","size","getSize","maxZoom","getView","fit","downloadCsv","getSelectedRows","startDownload","XYZ","opt_options","options","tileGrid","tilegrid","createXYZ","extentFromProjection","minZoom","tileSize","TileImage","call","attributions","cacheSize","crossOrigin","opaque","reprojectionErrorThreshold","tileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","ol","source_XYZ","OSM","ATTRIBUTION","__webpack_exports__"],"mappings":"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","file":"displayquerygrid.ed2d488841b82ac1bf68.js","sourcesContent":["/**\n * @module gmfapp.displayquerygrid\n */\nconst exports = {};\n\nimport './displayquerygrid.css';\nimport './common_dependencies.js';\nimport gmfDatasourceManager from 'gmf/datasource/Manager.js';\n\nimport gmfLayertreeComponent from 'gmf/layertree/component.js';\n\n/** @suppress {extraRequire} */\nimport gmfMapComponent from 'gmf/map/component.js';\n\n/** @suppress {extraRequire} */\nimport gmfQueryGridComponent from 'gmf/query/gridComponent.js';\n\nimport gmfThemeThemes from 'gmf/theme/Themes.js';\nimport ngeoGridModule from 'ngeo/grid/module.js';\nimport ngeoMapModule from 'ngeo/map/module.js';\nimport ngeoMiscBtnComponent from 'ngeo/misc/btnComponent.js';\nimport EPSG21781 from 'ngeo/proj/EPSG21781.js';\nimport ngeoQueryBboxQueryComponent from 'ngeo/query/bboxQueryComponent.js';\nimport ngeoQueryMapQueryComponent from 'ngeo/query/mapQueryComponent.js';\nimport olMap from 'ol/Map.js';\nimport olView from 'ol/View.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport olSourceOSM from 'ol/source/OSM.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('gmfapp', [\n  gmfDatasourceManager.module.name,\n  gmfLayertreeComponent.name,\n  gmfMapComponent.name,\n  gmfQueryGridComponent.name,\n  gmfThemeThemes.module.name,\n  ngeoGridModule.name,\n  ngeoMapModule.name, // for ngeo.map.FeatureOverlay, perhaps remove me\n  ngeoMiscBtnComponent.name,\n  ngeoQueryBboxQueryComponent.name,\n  ngeoQueryMapQueryComponent.name,\n]);\n\n\nexports.module.constant('ngeoQueryOptions', {\n  'limit': 20,\n  'queryCountFirst': true\n});\n\n\nexports.module.constant(\n  'gmfTreeUrl',\n  'https://geomapfish-demo.camptocamp.net/2.2/wsgi/themes?' +\n        'version=2&background=background');\n\nexports.constant('defaultTheme', 'Demo');\nexports.constant('angularLocaleScript', '../build/angular-locale_{{locale}}.js');\n\n\n/**\n * Demo, NOT USED.\n * A sample component to display the result.\n *\n * @type {!angular.Component}\n */\nexports.queryresultComponent = {\n  controller: 'gmfappQueryresultController',\n  controllerAs: 'qrCtrl',\n  template: require('html-loader!partials/queryresult.html')\n};\n\nexports.module.component('gmfappQueryresult', exports.queryresultComponent);\n\n\n/**\n * Demo, NOT USED.\n * @param {ngeox.QueryResult} ngeoQueryResult Query service.\n * @constructor\n * @ngInject\n */\nexports.QueryresultController = function(ngeoQueryResult) {\n\n  /**\n   * @type {ngeox.QueryResult}\n   * @export\n   */\n  this.result = ngeoQueryResult;\n\n};\n\n\nexports.module.controller('gmfappQueryresultController', exports.QueryresultController);\n\n\n/**\n * @constructor\n * @param {gmf.theme.Themes} gmfThemes The gmf themes service.\n * @param {gmf.datasource.Manager} gmfDataSourcesManager The gmf\n *     data sources manager service.\n * @param {ngeo.map.FeatureOverlayMgr} ngeoFeatureOverlayMgr The ngeo feature\n *   overlay manager service.\n * @ngInject\n */\nexports.MainController = function(gmfThemes, gmfDataSourcesManager,\n  ngeoFeatureOverlayMgr) {\n\n  gmfThemes.loadThemes();\n\n  const fill = new olStyleFill({color: [255, 170, 0, 0.6]});\n  const stroke = new olStyleStroke({color: [255, 170, 0, 1], width: 2});\n\n  /**\n   * FeatureStyle used by the displayquerygrid directive\n   * @type {ol.style.Style}\n   * @export\n   */\n  this.featureStyle = new olStyleStyle({\n    fill: fill,\n    image: new olStyleCircle({\n      fill: fill,\n      radius: 5,\n      stroke: stroke\n    }),\n    stroke: stroke\n  });\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map = new olMap({\n    layers: [\n      new olLayerTile({\n        source: new olSourceOSM()\n      })\n    ],\n    view: new olView({\n      projection: EPSG21781,\n      resolutions: [200, 100, 50, 20, 10, 5, 2.5, 2, 1, 0.5],\n      center: [537635, 152640],\n      zoom: 3\n    })\n  });\n\n  // Init the datasources with our map.\n  gmfDataSourcesManager.setDatasourceMap(this.map);\n\n  /**\n   * @type {Array.<Object>|undefined}\n   * export\n   */\n  this.themes = undefined;\n\n  /**\n   * @type {Object|undefined}\n   * @export\n   */\n  this.treeSource = undefined;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.queryActive = true;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.queryGridActive = true;\n\n  gmfThemes.getThemesObject().then((themes) => {\n    if (themes) {\n      this.themes = themes;\n      this.treeSource = themes[3];\n    }\n  });\n\n  ngeoFeatureOverlayMgr.init(this.map);\n};\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/examples/displayquerygrid.js","/**\n * @module gmf.query.gridComponent\n */\nimport gmfBase from 'gmf/index.js';\nimport googAsserts from 'goog/asserts.js';\n\n/** @suppress {extraRequire} */\nimport ngeoDownloadCsv from 'ngeo/download/Csv.js';\n\n/** @suppress {extraRequire} */\nimport ngeoDownloadService from 'ngeo/download/service.js';\n\n/** @suppress {extraRequire} */\nimport ngeoGridComponent from 'ngeo/grid/component.js';\n\nimport ngeoGridConfig from 'ngeo/grid/Config.js';\nimport ngeoMapFeatureOverlayMgr from 'ngeo/map/FeatureOverlayMgr.js';\n\n/** @suppress {extraRequire} - required for `ngeoQueryResult` */\nimport ngeoQueryMapQuerent from 'ngeo/query/MapQuerent.js';\n\nimport olCollection from 'ol/Collection.js';\nimport * as olExtent from 'ol/extent.js';\nimport olMap from 'ol/Map.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('gmfQueryGridComponent', [\n  ngeoDownloadCsv.module.name,\n  ngeoDownloadService.name,\n  ngeoGridComponent.name,\n  ngeoGridConfig.module.name,\n  ngeoMapFeatureOverlayMgr.module.name,\n  ngeoQueryMapQuerent.module.name,\n]);\n\n\nexports.value('gmfDisplayquerygridTemplateUrl',\n  /**\n   * @param {!angular.JQLite} $element Element.\n   * @param {!angular.Attributes} $attrs Attributes.\n   * @return {string} Template URL.\n   */\n  ($element, $attrs) => {\n    const templateUrl = $attrs['gmfDisplayquerygridTemplateurl'];\n    return templateUrl !== undefined ? templateUrl :\n      require('file-loader!gridComponent.html');\n  }\n);\n\n\n/**\n * @param {!angular.JQLite} $element Element.\n * @param {!angular.Attributes} $attrs Attributes.\n * @param {!function(!angular.JQLite, !angular.Attributes): string} gmfDisplayquerygridTemplateUrl Template function.\n * @return {string} Template URL.\n * @ngInject\n */\nfunction gmfDisplayquerygridTemplateUrl($element, $attrs, gmfDisplayquerygridTemplateUrl) {\n  return gmfDisplayquerygridTemplateUrl($element, $attrs);\n}\n\n\n/**\n * Provides a component to display results of the {@link ngeo.queryResult} in a\n * grid and shows related features on the map using\n * the {@link ngeo.map.FeatureOverlayMgr}.\n *\n * You can override the default component's template by setting the\n * value `gmfDisplayquerygridTemplateUrl`.\n *\n * Features displayed on the map use a default style but you can override these\n * styles by passing ol.style.Style objects as attributes of this component.\n *\n * Note: the following ng-class need to be present in the interface <body> element to display the footer\n * when the grid is active (initially there should be the code for the profile tool):\n *      <body ng-class=\"{'gmf-profile-chart-active': !!profileChartActive, 'gmf-query-grid-active': !!queryGridActive}\">\n *\n * Example:\n *\n *      <gmf-displayquerygrid\n *        gmf-displayquerygrid-map=\"ctrl.map\"\n *        gmf-displayquerygrid-featuresstyle=\"ctrl.styleForAllFeatures\"\n *        gmf-displayquerygrid-selectedfeaturestyle=\"ctrl.styleForTheCurrentFeature\">\n *      </gmf-displayquerygrid>\n *\n * @htmlAttribute {boolean} gmf-displayquerygrid-active The active state of the component.\n * @htmlAttribute {ol.style.Style} gmf-displayquerygrid-featuresstyle A style\n *     object for all features from the result of the query.\n * @htmlAttribute {ol.style.Style} gmf-displayquerygrid-selectedfeaturestyle A style\n *     object for the currently selected features.\n * @htmlAttribute {ol.Map} gmf-displayquerygrid-map The map.\n * @htmlAttribute {boolean?} gmf-displayquerygrid-removeemptycolumns Optional. Should\n *     empty columns be hidden? Default: `false`.\n * @htmlAttribute {number?} gmf-displayquerygrid-maxrecenterzoom Optional. Maximum\n *     zoom-level to use when zooming to selected features.\n * @htmlAttribute {gmfx.GridMergeTabs?} gmf-displayquerygrid-gridmergetabs Optional.\n *     Configuration to merge grids with the same attributes into a single grid.\n *\n * @ngdoc component\n * @ngname gmfDisplayquerygrid\n */\nexports.component_ = {\n  controller: 'GmfDisplayquerygridController as ctrl',\n  bindings: {\n    'active': '=?gmfDisplayquerygridActive',\n    'featuresStyleFn': '&gmfDisplayquerygridFeaturesstyle',\n    'selectedFeatureStyleFn': '&gmfDisplayquerygridSelectedfeaturestyle',\n    'getMapFn': '&gmfDisplayquerygridMap',\n    'removeEmptyColumnsFn': '&?gmfDisplayquerygridRemoveemptycolumns',\n    'maxResultsFn': '&?gmfDisplayquerygridMaxresults',\n    'maxRecenterZoomFn': '&?gmfDisplayquerygridMaxrecenterzoom',\n    'mergeTabsFn': '&?gmfDisplayquerygridMergetabs'\n  },\n  templateUrl: gmfDisplayquerygridTemplateUrl\n};\n\n\nexports.component('gmfDisplayquerygrid', exports.component_);\n\n\n/**\n * Controller for the query grid.\n *\n * @param {!angular.$injector} $injector Main injector.\n * @param {!angular.Scope} $scope Angular scope.\n * @param {!ngeox.QueryResult} ngeoQueryResult ngeo query result.\n * @param {!ngeo.query.MapQuerent} ngeoMapQuerent ngeo map querent service.\n * @param {!ngeo.map.FeatureOverlayMgr} ngeoFeatureOverlayMgr The ngeo feature\n *     overlay manager service.\n * @param {!angular.$timeout} $timeout Angular timeout service.\n * @param {!ngeo.download.Csv} ngeoCsvDownload CSV download service.\n * @param {!angular.JQLite} $element Element.\n * @constructor\n * @private\n * @ngInject\n * @ngdoc controller\n * @ngname GmfDisplayquerygridController\n */\nexports.Controller_ = function($injector, $scope, ngeoQueryResult, ngeoMapQuerent,\n  ngeoFeatureOverlayMgr, $timeout, ngeoCsvDownload, $element) {\n\n  const queryOptions = /** @type {ngeox.QueryOptions} */ (\n    $injector.has('ngeoQueryOptions') ?\n      $injector.get('ngeoQueryOptions') : {});\n\n  /**\n   * @type {!angular.Scope}\n   * @private\n   */\n  this.$scope_ = $scope;\n\n  /**\n   * @type {!angular.$timeout}\n   * @private\n   */\n  this.$timeout_ = $timeout;\n\n  /**\n   * @type {!ngeox.QueryResult}\n   * @export\n   */\n  this.ngeoQueryResult = ngeoQueryResult;\n\n  /**\n   * @type {!ngeo.query.MapQuerent}\n   * @private\n   */\n  this.ngeoMapQuerent_ = ngeoMapQuerent;\n\n  /**\n   * @type {!ngeo.download.Csv}\n   * @private\n   */\n  this.ngeoCsvDownload_ = ngeoCsvDownload;\n\n  /**\n   * @type {!angular.JQLite}\n   * @private\n   */\n  this.$element_ = $element;\n\n  /**\n   * @type {number}\n   * @export\n   */\n  this.maxResults = queryOptions.limit !== undefined ? queryOptions.limit : 50;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.active = false;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.pending = false;\n\n  /**\n   * @type {!Object.<string, gmfx.GridSource>}\n   * @export\n   */\n  this.gridSources = {};\n\n  /**\n   * IDs of the grid sources in the order they were loaded.\n   * @type {!Array.<string>}\n   * @export\n   */\n  this.loadedGridSources = [];\n\n  /**\n   * The id of the currently shown query source.\n   * @type {string|number|null}\n   * @export\n   */\n  this.selectedTab = null;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.removeEmptyColumns_ = false;\n\n  /**\n   * @type {number|undefined}\n   * @export\n   */\n  this.maxRecenterZoom;\n\n  /**\n   * @type {!gmfx.GridMergeTabs}\n   * @private\n   */\n  this.mergeTabs_ = {};\n\n  /**\n   * A mapping between row uid and the corresponding feature for each\n   * source.\n   * @type {!Object.<string, Object.<string, ol.Feature>>}\n   * @private\n   */\n  this.featuresForSources_ = {};\n\n  // Styles for displayed features (features) and selected features\n  // (highlightFeatures_) (user can set both styles).\n  /**\n   * @type {!ol.Collection}\n   * @private\n   */\n  this.features_ = new olCollection();\n\n  /**\n   * @type {!ngeo.map.FeatureOverlayMgr}\n   * @private\n   */\n  this.ngeoFeatureOverlayMgr_ = ngeoFeatureOverlayMgr;\n\n  /**\n   * @type {!ol.Collection}\n   * @private\n   */\n  this.highlightFeatures_ = new olCollection();\n\n  /**\n   * Filename\n   * @type {string}\n   * @private\n   */\n  this.filename_ = $injector.has('gmfCsvFilename') ?\n    $injector.get('gmfCsvFilename') : 'query-results.csv';\n\n  /**\n   * @type {ol.Map}\n   * @private\n   */\n  this.map_ = null;\n\n  // Watch the ngeo query result service.\n  this.$scope_.$watchCollection(\n    () => ngeoQueryResult,\n    (newQueryResult, oldQueryResult) => {\n      if (newQueryResult !== oldQueryResult) {\n        this.updateData_();\n      }\n    });\n\n  /**\n   * An unregister function returned from `$scope.$watchCollection` for\n   * \"on-select\" changes (when rows are selected/unselected).\n   * @type {?function()}\n   * @private\n   */\n  this.unregisterSelectWatcher_ = null;\n};\n\n/**\n * Init the controller\n */\nexports.Controller_.prototype.$onInit = function() {\n  this.removeEmptyColumns_ = this['removeEmptyColumnsFn'] ? this['removeEmptyColumnsFn']() === true : false;\n  this.maxRecenterZoom = this['maxRecenterZoomFn'] ? this['maxRecenterZoomFn']() : undefined;\n  this.mergeTabs_ = this['mergeTabsFn'] ? this['mergeTabsFn']() : {};\n\n  const featuresOverlay = this.ngeoFeatureOverlayMgr_.getFeatureOverlay();\n  featuresOverlay.setFeatures(this.features_);\n  const featuresStyle = this['featuresStyleFn']();\n  if (featuresStyle !== undefined) {\n    googAsserts.assertInstanceof(featuresStyle, olStyleStyle);\n    featuresOverlay.setStyle(featuresStyle);\n  }\n\n  const highlightFeaturesOverlay = this.ngeoFeatureOverlayMgr_.getFeatureOverlay();\n  highlightFeaturesOverlay.setFeatures(this.highlightFeatures_);\n  let highlightFeatureStyle = this['selectedFeatureStyleFn']();\n  if (highlightFeatureStyle !== undefined) {\n    googAsserts.assertInstanceof(highlightFeatureStyle, olStyleStyle);\n  } else {\n    const fill = new olStyleFill({color: [255, 0, 0, 0.6]});\n    const stroke = new olStyleStroke({color: [255, 0, 0, 1], width: 2});\n    highlightFeatureStyle = new olStyleStyle({\n      fill: fill,\n      image: new olStyleCircle({\n        fill: fill,\n        radius: 5,\n        stroke: stroke\n      }),\n      stroke: stroke,\n      zIndex: 10\n    });\n  }\n  highlightFeaturesOverlay.setStyle(highlightFeatureStyle);\n\n  const mapFn = this['getMapFn'];\n  if (mapFn) {\n    const map = mapFn();\n    googAsserts.assertInstanceof(map, olMap);\n    this.map_ = map;\n  }\n};\n\n/**\n * Returns a list of grid sources in the order they were loaded.\n * @export\n * @return {Array.<gmfx.GridSource>} Grid sources.\n */\nexports.Controller_.prototype.getGridSources = function() {\n  return this.loadedGridSources.map(sourceLabel => this.gridSources[sourceLabel]);\n};\n\n\n/**\n * @private\n */\nexports.Controller_.prototype.updateData_ = function() {\n  // close if there are no results\n  if (this.ngeoQueryResult.total === 0 && !this.hasOneWithTooManyResults_()) {\n    const oldActive = this.active;\n    this.clear();\n    if (oldActive) {\n      // don't close if there are pending queries\n      this.active = this.ngeoQueryResult.pending;\n      this.pending = this.ngeoQueryResult.pending;\n    }\n    return;\n  }\n\n  this.active = true;\n  this.pending = false;\n  let sources = this.ngeoQueryResult.sources;\n  // merge sources if requested\n  if (Object.keys(this.mergeTabs_).length > 0) {\n    sources = this.getMergedSources_(sources);\n  }\n\n  // create grids (only for source with features or with too many results)\n  sources.forEach((source) => {\n    if (source.tooManyResults) {\n      this.makeGrid_(null, source);\n    } else {\n      source.id = this.escapeValue_(source.id);\n      const features = source.features;\n      if (features.length > 0) {\n        this.collectData_(source);\n      }\n    }\n  });\n\n  if (this.loadedGridSources.length === 0) {\n    // if no grids were created, do not show\n    this.active = false;\n    return;\n  }\n\n  // keep the first existing navigation tab open\n  if (this.selectedTab === null || !((`${this.selectedTab}`) in this.gridSources)) {\n    // selecting the tab is done in a timeout, because otherwise in rare cases\n    // `ng-class` might set the `active` class on multiple tabs.\n    this.$timeout_(() => {\n      const firstSourceId = this.loadedGridSources[0];\n      this.selectTab(this.gridSources[firstSourceId]);\n    }, 0);\n  }\n};\n\n\n/**\n * @private\n * @return {boolean} If one of the source has too many results.\n */\nexports.Controller_.prototype.hasOneWithTooManyResults_ = function() {\n  return this.ngeoQueryResult.sources.some(source => source.tooManyResults);\n};\n\n/**\n * Returns an escaped value.\n * @param {string|number} value A value to escape.\n * @returns {string|number} value An escaped value.\n * @private\n */\nexports.Controller_.prototype.escapeValue_ = function(value) {\n  // Work-around for Number.isInteger() when not always getting a number ...\n  if (Number.isInteger(/** @type {number} */ (value))) {\n    return value;\n  } else {\n    const toEscape = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\ |]/g;\n    if (value.match(toEscape) !== null) {\n      return value.replace(toEscape, '_');\n    } else {\n      return value;\n    }\n  }\n};\n\n\n/**\n * Returns if the given grid source is selected?\n * @export\n * @param {gmfx.GridSource} gridSource Grid source.\n * @return {boolean} Is selected?\n */\nexports.Controller_.prototype.isSelected = function(gridSource) {\n  return this.selectedTab === gridSource.source.label;\n};\n\n\n/**\n * Try to merge the mergable sources.\n * @param {Array.<ngeox.QueryResultSource>} sources Sources.\n * @return {Array.<ngeox.QueryResultSource>} The merged sources.\n * @private\n */\nexports.Controller_.prototype.getMergedSources_ = function(sources) {\n  const allSources = [];\n  /** @type {Object.<string, ngeox.QueryResultSource>} */\n  const mergedSources = {};\n\n  sources.forEach((source) => {\n    // check if this source can be merged\n    const mergedSource = this.getMergedSource_(source, mergedSources);\n\n    if (mergedSource === null) {\n      // this source should not be merged, add as is\n      allSources.push(source);\n    }\n  });\n\n  for (const mergedSourceId in mergedSources) {\n    allSources.push(mergedSources[mergedSourceId]);\n  }\n\n  return allSources;\n};\n\n\n/**\n * Check if the given source should be merged. If so, an artificial source\n * that will contain the features of all mergable sources is returned. If not,\n * `null` is returned.\n * @param {ngeox.QueryResultSource} source Source.\n * @param {Object.<string, ngeox.QueryResultSource>} mergedSources Merged sources.\n * @return {?ngeox.QueryResultSource} A merged source of null if the source should\n *    not be merged.\n * @private\n */\nexports.Controller_.prototype.getMergedSource_ = function(source, mergedSources) {\n  let mergeSourceId = null;\n\n  for (const currentMergeSourceId in this.mergeTabs_) {\n    const sourceLabels = this.mergeTabs_[currentMergeSourceId];\n    const containsSource = sourceLabels.some(sourceLabel => sourceLabel == source.label);\n    if (containsSource) {\n      mergeSourceId = currentMergeSourceId;\n      break;\n    }\n  }\n\n  if (mergeSourceId === null) {\n    // this source should not be merged\n    return null;\n  }\n\n  /** @type {ngeox.QueryResultSource} */\n  let mergeSource;\n  if (mergeSourceId in mergedSources) {\n    mergeSource = mergedSources[mergeSourceId];\n  } else {\n    mergeSource = {\n      features: [],\n      id: mergeSourceId,\n      label: mergeSourceId,\n      limit: this.maxResults,\n      pending: false,\n      queried: true,\n      tooManyResults: false,\n      totalFeatureCount: undefined\n    };\n    mergedSources[mergeSourceId] = mergeSource;\n  }\n\n  // add features of source to merge source\n  source.features.forEach((feature) => {\n    mergeSource.features.push(feature);\n  });\n\n  // if one of the source has too many results, the resulting merged source will\n  // also be marked with `tooManyResults` and will not contain any features.\n  mergeSource.tooManyResults = mergeSource.tooManyResults || source.tooManyResults;\n  if (mergeSource.tooManyResults) {\n    mergeSource.totalFeatureCount = (mergeSource.totalFeatureCount !== undefined) ?\n      mergeSource.totalFeatureCount + mergeSource.features.length : mergeSource.features.length;\n    mergeSource.features = [];\n  }\n  if (source.totalFeatureCount !== undefined) {\n    mergeSource.totalFeatureCount = (mergeSource.totalFeatureCount !== undefined) ?\n      mergeSource.totalFeatureCount + source.totalFeatureCount : source.totalFeatureCount;\n  }\n\n  return mergeSource;\n};\n\n\n/**\n * Collect all features in the queryResult object.\n * @param {ngeox.QueryResultSource} source Result source.\n * @private\n */\nexports.Controller_.prototype.collectData_ = function(source) {\n  const features = source.features;\n  const allProperties = [];\n  const featureGeometriesNames = [];\n  const featuresForSource = {};\n  let properties, featureGeometryName;\n  features.forEach((feature) => {\n    properties = feature.getProperties();\n    if (properties !== undefined) {\n      // Keeps distinct geometry names to remove theme later.\n      featureGeometryName = feature.getGeometryName();\n      if (featureGeometriesNames.indexOf(featureGeometryName) === -1) {\n        featureGeometriesNames.push(featureGeometryName);\n      }\n\n      allProperties.push(properties);\n      featuresForSource[ngeoGridConfig.getRowUid(properties)] = feature;\n    }\n  });\n\n  this.cleanProperties_(allProperties, featureGeometriesNames);\n  if (allProperties.length > 0) {\n    const gridCreated = this.makeGrid_(allProperties, source);\n    if (gridCreated) {\n      this.featuresForSources_[`${source.label}`] = featuresForSource;\n    }\n  }\n};\n\n\n/**\n * Remove all unwanted columns.\n * @param {Array.<Object>} allProperties A row.\n * @param {Array.<string>} featureGeometriesNames Geometry names.\n * @private\n */\nexports.Controller_.prototype.cleanProperties_ = function(\n  allProperties, featureGeometriesNames) {\n  allProperties.forEach((properties) => {\n    featureGeometriesNames.forEach((featureGeometryName) => {\n      delete properties[featureGeometryName];\n    });\n    delete properties['boundedBy'];\n    delete properties['ngeo_feature_type_'];\n  });\n\n  if (this.removeEmptyColumns_ === true) {\n    this.removeEmptyColumnsFn_(allProperties);\n  }\n};\n\n\n/**\n * Remove columns that will be completely empty between each properties.\n * @param {Array.<Object>} allProperties A row.\n * @private\n */\nexports.Controller_.prototype.removeEmptyColumnsFn_ = function(\n  allProperties) {\n  // Keep all keys that correspond to at least one value in a properties object.\n  const keysToKeep = [];\n  let i, key;\n  for (key in allProperties[0]) {\n    for (i = 0; i < allProperties.length; i++) {\n      if (allProperties[i][key] !== undefined) {\n        keysToKeep.push(key);\n        break;\n      }\n    }\n  }\n  // Get all keys that previously always refers always to an empty value.\n  let keyToRemove;\n  allProperties.forEach((properties) => {\n    keyToRemove = [];\n    for (key in properties) {\n      if (keysToKeep.indexOf(key) === -1) {\n        keyToRemove.push(key);\n      }\n    }\n    // Remove these keys.\n    keyToRemove.forEach((key) => {\n      delete properties[key];\n    });\n  });\n};\n\n\n/**\n * @param {?Array.<Object>} data Grid rows.\n * @param {ngeox.QueryResultSource} source Query source.\n * @return {boolean} Returns true if a grid was created.\n * @private\n */\nexports.Controller_.prototype.makeGrid_ = function(data, source) {\n  const sourceLabel = `${source.label}`;\n  let gridConfig = null;\n  if (data !== null) {\n    gridConfig = this.getGridConfiguration_(data);\n    if (gridConfig === null) {\n      return false;\n    }\n  }\n  if (this.loadedGridSources.indexOf(sourceLabel) == -1) {\n    this.loadedGridSources.push(sourceLabel);\n  }\n  this.gridSources[sourceLabel] = {\n    configuration: gridConfig,\n    source: source\n  };\n  return true;\n};\n\n\n/**\n * @param {Array.<!Object>} data Grid rows.\n * @return {?ngeo.grid.Config} Grid config.\n * @private\n */\nexports.Controller_.prototype.getGridConfiguration_ = function(\n  data) {\n  googAsserts.assert(data.length > 0);\n  const clone = {};\n  Object.assign(clone, data[0]);\n  delete clone.ol_uid;\n  const columns = Object.keys(clone);\n\n  /** @type {Array.<ngeox.GridColumnDef>} */\n  const columnDefs = [];\n  columns.forEach((column) => {\n    columnDefs.push(/** @type {ngeox.GridColumnDef} */ ({\n      name: column\n    }));\n  });\n\n  if (columnDefs.length > 0) {\n    return new ngeoGridConfig(data, columnDefs);\n  } else {\n    // no columns, do not show grid\n    return null;\n  }\n};\n\n\n/**\n * Remove the current selected feature and source and remove all features\n * from the map.\n * @export\n */\nexports.Controller_.prototype.clear = function() {\n  this.active = false;\n  this.pending = false;\n  this.gridSources = {};\n  this.loadedGridSources = [];\n  this.selectedTab = null;\n  this.tooManyResults = false;\n  this.features_.clear();\n  this.highlightFeatures_.clear();\n  this.ngeoMapQuerent_.clear();\n  this.featuresForSources_ = {};\n  if (this.unregisterSelectWatcher_) {\n    this.unregisterSelectWatcher_();\n  }\n};\n\n\n/**\n * Select the tab for the given grid source.\n * @param {gmfx.GridSource} gridSource Grid source.\n * @export\n */\nexports.Controller_.prototype.selectTab = function(gridSource) {\n  const source = gridSource.source;\n  this.selectedTab = source.label;\n\n  if (this.unregisterSelectWatcher_) {\n    this.unregisterSelectWatcher_();\n    this.unregisterSelectWatcher_ = null;\n  }\n\n  if (gridSource.configuration !== null) {\n    this.unregisterSelectWatcher_ = this.$scope_.$watchCollection(\n      () => gridSource.configuration.selectedRows,\n      (newSelected, oldSelectedRows) => {\n        if (Object.keys(newSelected) !== Object.keys(oldSelectedRows)) {\n          this.onSelectionChanged_();\n        }\n      });\n  }\n  this.updateFeatures_(gridSource);\n\n  this.reflowGrid_(source.id);\n};\n\n\n/**\n * @private\n * @param {string|number} sourceId Id of the source that should be refreshed.\n */\nexports.Controller_.prototype.reflowGrid_ = function(sourceId) {\n  // This is a \"work-around\" to make sure that the grid is rendered correctly.\n  // When a pane is activated by setting `this.selectedTab`, the class `active`\n  // is not yet set on the pane. That's why the class is set manually, and\n  // after the pane is shown (in the next digest loop), the grid table can\n  // be refreshed.\n  const activePane = this.$element_.find(`div.tab-pane#${sourceId}`);\n  activePane.removeClass('active').addClass('active');\n  this.$timeout_(() => {\n    activePane.find('div.ngeo-grid-table-container table')['trigger']('reflow');\n  });\n};\n\n\n/**\n * Called when the row selection has changed.\n * @private\n */\nexports.Controller_.prototype.onSelectionChanged_ = function() {\n  if (this.selectedTab === null) {\n    return;\n  }\n\n  const gridSource = this.gridSources[`${this.selectedTab}`];\n  this.updateFeatures_(gridSource);\n};\n\n\n/**\n * @param {gmfx.GridSource} gridSource Grid source\n * @private\n */\nexports.Controller_.prototype.updateFeatures_ = function(gridSource) {\n  this.features_.clear();\n  this.highlightFeatures_.clear();\n\n  if (gridSource.configuration === null) {\n    return;\n  }\n\n  const sourceLabel = `${gridSource.source.label}`;\n  const featuresForSource = this.featuresForSources_[sourceLabel];\n  const selectedRows = gridSource.configuration.selectedRows;\n\n  for (const rowId in featuresForSource) {\n    const feature = featuresForSource[rowId];\n    if (rowId in selectedRows) {\n      this.highlightFeatures_.push(feature);\n    } else {\n      this.features_.push(feature);\n    }\n  }\n};\n\n\n/**\n * Get the currently shown grid source.\n * @export\n * @return {gmfx.GridSource|null} Grid source.\n */\nexports.Controller_.prototype.getActiveGridSource = function() {\n  if (this.selectedTab === null) {\n    return null;\n  } else {\n    return this.gridSources[`${this.selectedTab}`];\n  }\n};\n\n\n/**\n * Returns if a row of the currently active grid is selected?\n * @export\n * @return {boolean} Is one selected?\n */\nexports.Controller_.prototype.isOneSelected = function() {\n  const source = this.getActiveGridSource();\n  if (source === null || source.configuration === null) {\n    return false;\n  } else {\n    return source.configuration.getSelectedCount() > 0;\n  }\n};\n\n\n/**\n * Returns the number of selected rows of the currently active grid.\n * @export\n * @return {number} The number of selected rows.\n */\nexports.Controller_.prototype.getSelectedRowCount = function() {\n  const source = this.getActiveGridSource();\n  if (source === null || source.configuration === null) {\n    return 0;\n  } else {\n    return source.configuration.getSelectedCount();\n  }\n};\n\n\n/**\n * Select all rows of the currently active grid.\n * @export\n */\nexports.Controller_.prototype.selectAll = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.selectAll();\n  }\n};\n\n\n/**\n * Unselect all rows of the currently active grid.\n * @export\n */\nexports.Controller_.prototype.unselectAll = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.unselectAll();\n  }\n};\n\n\n/**\n * Invert the selection of the currently active grid.\n * @export\n */\nexports.Controller_.prototype.invertSelection = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.invertSelection();\n  }\n};\n\n\n/**\n * Zoom to the selected features.\n * @export\n */\nexports.Controller_.prototype.zoomToSelection = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    const extent = olExtent.createEmpty();\n    this.highlightFeatures_.forEach((feature) => {\n      olExtent.extend(extent, feature.getGeometry().getExtent());\n    });\n    const size = this.map_.getSize();\n    googAsserts.assert(size !== undefined);\n    const maxZoom = this.maxRecenterZoom;\n    this.map_.getView().fit(extent, {size, maxZoom});\n  }\n};\n\n\n/**\n * Start a CSV download for the selected features.\n * @export\n */\nexports.Controller_.prototype.downloadCsv = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    const columnDefs = source.configuration.columnDefs;\n    googAsserts.assert(columnDefs !== undefined);\n    const selectedRows = source.configuration.getSelectedRows();\n\n    this.ngeoCsvDownload_.startDownload(\n      selectedRows, columnDefs, this.filename_);\n  }\n};\n\n\nexports.controller('GmfDisplayquerygridController',\n  exports.Controller_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/query/gridComponent.js","/**\n * @module ol/source/XYZ\n */\nimport {inherits} from '../index.js';\nimport TileImage from '../source/TileImage.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case,\n * {@link ol.source.TileImage} can be used with a `tileUrlFunction`\n * such as:\n *\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *        coordinate[1] + '/' + coordinate[2] + '.png';\n *    }\n *\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.XYZOptions=} opt_options XYZ options.\n * @api\n */\nconst XYZ = function(opt_options) {\n  const options = opt_options || {};\n  const projection = options.projection !== undefined ?\n    options.projection : 'EPSG:3857';\n\n  const tileGrid = options.tileGrid !== undefined ? options.tileGrid :\n    _ol_tilegrid_.createXYZ({\n      extent: _ol_tilegrid_.extentFromProjection(projection),\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize\n    });\n\n  TileImage.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    opaque: options.opaque,\n    projection: projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileGrid: tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n};\n\ninherits(XYZ, TileImage);\nexport default XYZ;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/XYZ.js\n// module id = null\n// module chunks = ","/**\n * @module ol/source/OSM\n */\nimport {inherits} from '../index.js';\nimport XYZ from '../source/XYZ.js';\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n *\n * @constructor\n * @extends {ol.source.XYZ}\n * @param {olx.source.OSMOptions=} opt_options Open Street Map options.\n * @api\n */\nconst OSM = function(opt_options) {\n\n  const options = opt_options || {};\n\n  let attributions;\n  if (options.attributions !== undefined) {\n    attributions = options.attributions;\n  } else {\n    attributions = [OSM.ATTRIBUTION];\n  }\n\n  const crossOrigin = options.crossOrigin !== undefined ?\n    options.crossOrigin : 'anonymous';\n\n  const url = options.url !== undefined ?\n    options.url : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n  XYZ.call(this, {\n    attributions: attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: crossOrigin,\n    opaque: options.opaque !== undefined ? options.opaque : true,\n    maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileLoadFunction: options.tileLoadFunction,\n    url: url,\n    wrapX: options.wrapX\n  });\n\n};\n\ninherits(OSM, XYZ);\n\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nOSM.ATTRIBUTION = '&copy; ' +\n      '<a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> ' +\n      'contributors.';\nexport default OSM;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/OSM.js\n// module id = null\n// module chunks = "],"sourceRoot":""}