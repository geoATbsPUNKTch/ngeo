{"version":3,"sources":["webpack:///./examples/layerorder.js","webpack:///./src/misc/syncArrays.js","webpack:///./src/source/AsitVD.js"],"names":["__webpack_require__","exports","module","angular","_module2","default","name","_sortableComponent2","MainController","$scope","asitvd","_Tile2","source","_AsitVD2","layer","set","boundaries","_TileWMS2","url","params","LAYERS","serverType","waterBodies","cities","this","map","_Map2","layers","view","_View2","projection","resolutions","center","zoom","roads_","selectedLayers","_syncArrays2","getLayers","getArray","$watchCollection","render","prototype","toggleRoadsLayer","val","undefined","indexOf","addLayer","removeLayer","controller","_asserts","e","Error","code","arr1","arr2","reverse","scope","filter","dereg1","i","ii","j","length","dereg2","_asserts2","assert","asitVDResolutions","asitVDTileGrid","extent","matrixIds","value","index","options","_classCallCheck","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","attributions","requestEncoding","style","matrixSet","format","tileGrid","_inherits","_WMTS2"],"mappings":"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","file":"layerorder.6abd78a7d38c4492d0ef.js","sourcesContent":["/**\n * @module app.layerorder\n */\nlet exports = {};\n\n// webpack: import './layerorder.css';\n// webpack: import './common_dependencies.js';\nimport ngeoMapModule from 'ngeo/map/module.js';\n\n/** @suppress {extraRequire} */\nimport ngeoMiscSortableComponent from 'ngeo/misc/sortableComponent.js';\n\nimport ngeoMiscSyncArrays from 'ngeo/misc/syncArrays.js';\nimport ngeoSourceAsitVD from 'ngeo/source/AsitVD.js';\nimport EPSG21781 from 'ngeo/proj/EPSG21781.js';\nimport olMap from 'ol/Map.js';\nimport olView from 'ol/View.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport olSourceTileWMS from 'ol/source/TileWMS.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('app', [\n  ngeoMapModule.name,\n  ngeoMiscSortableComponent.name,\n]);\n\n\n/**\n * @param {angular.Scope} $scope Scope.\n * @constructor\n * @export\n * @ngInject\n */\nexports.MainController = function($scope) {\n\n  /** @type {ol.layer.Tile} */\n  const asitvd = new olLayerTile({\n    source: new ngeoSourceAsitVD({\n      layer: 'asitvd.fond_couleur'\n    })\n  });\n  asitvd.set('name', 'asitvd');\n\n  /** @type {ol.layer.Tile} */\n  const boundaries = new olLayerTile({\n    source: new olSourceTileWMS({\n      url: 'https://wms.geo.admin.ch',\n      params: {'LAYERS': 'ch.swisstopo.swissboundaries3d-gemeinde-flaeche.fill'},\n      serverType: 'mapserver'\n    })\n  });\n  boundaries.set('name', 'Boundaries');\n\n  /** @type {ol.layer.Tile} */\n  const waterBodies = new olLayerTile({\n    source: new olSourceTileWMS({\n      url: 'https://wms.geo.admin.ch',\n      params: {'LAYERS': 'ch.swisstopo.geologie-gravimetrischer_atlas'},\n      serverType: 'mapserver'\n    })\n  });\n  waterBodies.set('name', 'Water bodies');\n\n  /** @type {ol.layer.Tile} */\n  const cities = new olLayerTile({\n    source: new olSourceTileWMS({\n      url: 'https://wms.geo.admin.ch',\n      params: {'LAYERS': 'ch.swisstopo.dreiecksvermaschung'},\n      serverType: 'mapserver'\n    })\n  });\n  cities.set('name', 'Cities');\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map = new olMap({\n    layers: [\n      asitvd,\n      boundaries,\n      waterBodies,\n      cities\n    ],\n    view: new olView({\n      projection: EPSG21781,\n      resolutions: [1000, 500, 200, 100, 50, 20, 10, 5, 2.5, 2, 1, 0.5],\n      center: [600000, 200000],\n      zoom: 1\n    })\n  });\n\n  const map = this.map;\n\n  /**\n   * @type {ol.layer.Tile}\n   * @private\n   */\n  this.roads_ = new olLayerTile({\n    source: new olSourceTileWMS({\n      url: 'https://wms.geo.admin.ch',\n      params: {'LAYERS': 'ch.bafu.laerm-strassenlaerm_tag'},\n      serverType: 'mapserver'\n    })\n  });\n  this.roads_.set('name', 'Roads');\n\n  /**\n   * @type {Array.<ol.layer.Base>}\n   * @const\n   * @export\n   */\n  this.selectedLayers = [];\n\n  const selectedLayers = this.selectedLayers;\n\n  ngeoMiscSyncArrays(map.getLayers().getArray(), selectedLayers, true, $scope,\n    layerFilter);\n\n  // watch any change on layers array to refresh the map\n  $scope.$watchCollection(() => selectedLayers, () => {\n    map.render();\n  });\n\n  /**\n   * @param {ol.layer.Base} layer Layer.\n   * @return {boolean} `false` if the layer shouldn't be part of the selected\n   *     layers.\n   */\n  function layerFilter(layer) {\n    return layer !== asitvd;\n  }\n\n};\n\n\n/**\n * Add/remove the \"Roads\" layer when used as a setter, and return whether\n * the \"Roads\" layer is in the map when used as a getter.\n * @param {boolean|undefined} val Value.\n * @return {boolean|undefined} `true` if the \"Roads\" layer is in the map,\n *     `false` if the \"Roads\" layer is not in the map, `undefined` if the\n *     function is used as setter.\n * @export\n */\nexports.MainController.prototype.toggleRoadsLayer = function(val) {\n  if (val === undefined) {\n    return this.map.getLayers().getArray().indexOf(this.roads_) >= 0;\n  } else {\n    if (val) {\n      this.map.addLayer(this.roads_);\n    } else {\n      this.map.removeLayer(this.roads_);\n    }\n  }\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/layerorder.js","/**\n * @module ngeo.misc.syncArrays\n */\nimport googAsserts from 'goog/asserts.js';\n\n/**\n * Provides a function that synchronizes two arrays, arr1 and\n * arr2. arr2 is a subset of arr1, it includes the elements of arr1 that passes\n * the filter. When elements are added to/removed from arr1, arr2 is updated to\n * include the elements of arr1 that pass the filter. When the order of\n * elements in arr2 changes, arr1 is reordered to have the same order as arr2.\n *\n * This can for example be used to synchronize the array of layers in the map\n * with the array of selected layers, where layers may be added to/removed from\n * the map, and the order of selected layers may change.\n *\n *     let dereg = ngeoSyncArrays(map.getLayers().getArray(), selectedLayers,\n *         true, scope, function(layer) {\n *           // exclude the layer at index 0 in the map\n *           return map.getLayers().indexOf(layer) !== 0;\n *         });\n *\n * This will return a function that can be called to cancel synchronization.\n *\n * @param {Array.<T>} arr1 Array 1.\n * @param {Array.<T>} arr2 Array 2.\n * @param {boolean} reverse `true` if arr2 is in reverse order, `false`\n *     otherwise.\n * @param {angular.Scope} scope Angular scope. Used to watch arr1 and arr2\n *     using $watchCollection.\n * @param {function(T):boolean} filter Filter function.\n * @return {function()} Function to call to stop synchronization\n * @template T\n */\nconst exports = function(arr1, arr2, reverse, scope, filter) {\n\n\n  // Update arr2 when elements are added to, or removed from, arr1.\n\n  const dereg1 = scope.$watchCollection(() => arr1, () => {\n    let i, ii, j;\n    if (reverse) {\n      for (i = arr1.length - 1, j = 0; i >= 0; --i) {\n        if (filter(arr1[i])) {\n          arr2[j++] = arr1[i];\n        }\n      }\n    } else {\n      for (i = 0, ii = arr1.length, j = 0; i < ii; ++i) {\n        if (filter(arr1[i])) {\n          arr2[j++] = arr1[i];\n        }\n      }\n    }\n    arr2.length = j;\n  });\n\n\n  // Update arr1 when the order of elements changes in arr2.\n\n  const dereg2 = scope.$watchCollection(() => arr2, () => {\n    let i, ii, j;\n    if (reverse) {\n      for (i = 0, ii = arr1.length, j = arr2.length - 1; i < ii; ++i) {\n        if (filter(arr1[i])) {\n          arr1[i] = arr2[j--];\n        }\n      }\n      googAsserts.assert(j == -1);\n    } else {\n      for (i = 0, ii = arr1.length, j = 0; i < ii; ++i) {\n        if (filter(arr1[i])) {\n          arr1[i] = arr2[j++];\n        }\n      }\n      googAsserts.assert(j == arr2.length);\n    }\n  });\n\n  return function() {\n    dereg1();\n    dereg2();\n  };\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc/syncArrays.js","/**\n * @module ngeo.source.AsitVD\n */\nimport olSourceWMTS from 'ol/source/WMTS.js';\nimport olTilegridWMTS from 'ol/tilegrid/WMTS.js';\n\n\n/**\n * @const {!Array.<number>}\n */\nconst asitVDResolutions = [\n  4000, 3750, 3500, 3250, 3000, 2750, 2500, 2250, 2000, 1750, 1500, 1250,\n  1000, 750, 650, 500, 250, 100, 50, 20, 10, 5, 2.5, 2, 1.5, 1, 0.5\n];\n\n\n/**\n * @const {ol.tilegrid.WMTS}\n */\nconst asitVDTileGrid = new olTilegridWMTS({\n  extent: [420000, 30000, 900000, 350000],\n  resolutions: asitVDResolutions,\n  matrixIds: asitVDResolutions.map((value, index) => `${index}`)\n});\n\n\n/**\n * Layer source for the ASIT VD tile server.\n * @see https://www.asitvd.ch/chercher/geoservices/fond-de-plan-asit-vd.html\n *\n */\nconst exports = class extends olSourceWMTS {\n\n  /**\n   * @param {ngeox.source.AsitVDOptions} options WMTS options.\n   */\n  constructor(options) {\n    super({\n      attributions: 'géodonnées &copy; Etat de Vaud & &copy; contributeurs OpenStreetMap',\n      url: 'https://ows{1-4}.asitvd.ch/wmts/1.0.0/{Layer}/default/default/0/' +\n        '21781/{TileMatrix}/{TileRow}/{TileCol}.png',\n      projection: 'EPSG:21781',\n      requestEncoding: 'REST',\n      layer: options.layer,\n      style: 'default',\n      matrixSet: '21781',\n      format: 'image/png',\n      tileGrid: asitVDTileGrid\n    });\n  }\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/source/AsitVD.js"],"sourceRoot":""}